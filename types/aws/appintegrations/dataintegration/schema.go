// Code generated by schema-generate. DO NOT EDIT.

package dataintegration

import (
    "errors"
    "encoding/json"
    "fmt"
    "bytes"
)

// Resource Resource Type definition for AWS::AppIntegrations::DataIntegration
type Resource struct {

  // The Amazon Resource Name (ARN) of the data integration.
  DataIntegrationArn string `json:"DataIntegrationArn,omitempty"`

  // The data integration description.
  Description string `json:"Description,omitempty"`

  // The unique identifer of the data integration.
  Id string `json:"Id,omitempty"`

  // The KMS key of the data integration.
  KmsKey string `json:"KmsKey"`

  // The name of the data integration.
  Name string `json:"Name"`

  // The name of the data and how often it should be pulled from the source.
  ScheduleConfig *ScheduleConfig `json:"ScheduleConfig"`

  // The URI of the data source.
  SourceURI string `json:"SourceURI"`

  // The tags (keys and values) associated with the data integration.
  Tags []*Tag `json:"Tags,omitempty"`
}

// ScheduleConfig 
type ScheduleConfig struct {

  // The start date for objects to import in the first flow run. Epoch or ISO timestamp format is supported.
  FirstExecutionFrom string `json:"FirstExecutionFrom"`

  // The name of the object to pull from the data source.
  Object string `json:"Object"`

  // How often the data should be pulled from data source.
  ScheduleExpression string `json:"ScheduleExpression"`
}

// Tag A label for tagging DataIntegration resources
type Tag struct {

  // A key to identify the tag.
  Key string `json:"Key"`

  // Corresponding tag value for the key.
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DataIntegrationArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DataIntegrationArn\": ")
	if tmp, err := json.Marshal(strct.DataIntegrationArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "KmsKey" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "KmsKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KmsKey\": ")
	if tmp, err := json.Marshal(strct.KmsKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ScheduleConfig" field is required
    if strct.ScheduleConfig == nil {
        return nil, errors.New("ScheduleConfig is a required field")
    }
    // Marshal the "ScheduleConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ScheduleConfig\": ")
	if tmp, err := json.Marshal(strct.ScheduleConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SourceURI" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SourceURI" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceURI\": ")
	if tmp, err := json.Marshal(strct.SourceURI); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    KmsKeyReceived := false
    NameReceived := false
    ScheduleConfigReceived := false
    SourceURIReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DataIntegrationArn":
            if err := json.Unmarshal([]byte(v), &strct.DataIntegrationArn); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "KmsKey":
            if err := json.Unmarshal([]byte(v), &strct.KmsKey); err != nil {
                return err
             }
            KmsKeyReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "ScheduleConfig":
            if err := json.Unmarshal([]byte(v), &strct.ScheduleConfig); err != nil {
                return err
             }
            ScheduleConfigReceived = true
        case "SourceURI":
            if err := json.Unmarshal([]byte(v), &strct.SourceURI); err != nil {
                return err
             }
            SourceURIReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if KmsKey (a required property) was received
    if !KmsKeyReceived {
        return errors.New("\"KmsKey\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if ScheduleConfig (a required property) was received
    if !ScheduleConfigReceived {
        return errors.New("\"ScheduleConfig\" is required but was not present")
    }
    // check if SourceURI (a required property) was received
    if !SourceURIReceived {
        return errors.New("\"SourceURI\" is required but was not present")
    }
    return nil
}

func (strct *ScheduleConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "FirstExecutionFrom" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "FirstExecutionFrom" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FirstExecutionFrom\": ")
	if tmp, err := json.Marshal(strct.FirstExecutionFrom); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Object" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Object" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Object\": ")
	if tmp, err := json.Marshal(strct.Object); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ScheduleExpression" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ScheduleExpression" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ScheduleExpression\": ")
	if tmp, err := json.Marshal(strct.ScheduleExpression); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ScheduleConfig) UnmarshalJSON(b []byte) error {
    FirstExecutionFromReceived := false
    ObjectReceived := false
    ScheduleExpressionReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "FirstExecutionFrom":
            if err := json.Unmarshal([]byte(v), &strct.FirstExecutionFrom); err != nil {
                return err
             }
            FirstExecutionFromReceived = true
        case "Object":
            if err := json.Unmarshal([]byte(v), &strct.Object); err != nil {
                return err
             }
            ObjectReceived = true
        case "ScheduleExpression":
            if err := json.Unmarshal([]byte(v), &strct.ScheduleExpression); err != nil {
                return err
             }
            ScheduleExpressionReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if FirstExecutionFrom (a required property) was received
    if !FirstExecutionFromReceived {
        return errors.New("\"FirstExecutionFrom\" is required but was not present")
    }
    // check if Object (a required property) was received
    if !ObjectReceived {
        return errors.New("\"Object\" is required but was not present")
    }
    // check if ScheduleExpression (a required property) was received
    if !ScheduleExpressionReceived {
        return errors.New("\"ScheduleExpression\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
