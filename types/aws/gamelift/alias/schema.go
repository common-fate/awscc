// Code generated by schema-generate. DO NOT EDIT.

package alias

import (
    "encoding/json"
    "fmt"
    "bytes"
    "errors"
)

// Resource The AWS::GameLift::Alias resource creates an alias for an Amazon GameLift (GameLift) fleet destination.
type Resource struct {

  // Unique alias ID
  AliasId string `json:"AliasId,omitempty"`

  // A human-readable description of the alias.
  Description string `json:"Description,omitempty"`

  // A descriptive label that is associated with an alias. Alias names do not need to be unique.
  Name string `json:"Name"`

  // A routing configuration that specifies where traffic is directed for this alias, such as to a fleet or to a message.
  RoutingStrategy *RoutingStrategy `json:"RoutingStrategy"`
}

// RoutingStrategy 
type RoutingStrategy struct {

  // A unique identifier for a fleet that the alias points to. If you specify SIMPLE for the Type property, you must specify this property.
  FleetId string `json:"FleetId,omitempty"`

  // The message text to be used with a terminal routing strategy. If you specify TERMINAL for the Type property, you must specify this property.
  Message string `json:"Message,omitempty"`

  // Simple routing strategy. The alias resolves to one specific fleet. Use this type when routing to active fleets.
  Type string `json:"Type"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AliasId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AliasId\": ")
	if tmp, err := json.Marshal(strct.AliasId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RoutingStrategy" field is required
    if strct.RoutingStrategy == nil {
        return nil, errors.New("RoutingStrategy is a required field")
    }
    // Marshal the "RoutingStrategy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoutingStrategy\": ")
	if tmp, err := json.Marshal(strct.RoutingStrategy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    NameReceived := false
    RoutingStrategyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AliasId":
            if err := json.Unmarshal([]byte(v), &strct.AliasId); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "RoutingStrategy":
            if err := json.Unmarshal([]byte(v), &strct.RoutingStrategy); err != nil {
                return err
             }
            RoutingStrategyReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if RoutingStrategy (a required property) was received
    if !RoutingStrategyReceived {
        return errors.New("\"RoutingStrategy\" is required but was not present")
    }
    return nil
}

func (strct *RoutingStrategy) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "FleetId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FleetId\": ")
	if tmp, err := json.Marshal(strct.FleetId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Message" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Message\": ")
	if tmp, err := json.Marshal(strct.Message); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *RoutingStrategy) UnmarshalJSON(b []byte) error {
    TypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "FleetId":
            if err := json.Unmarshal([]byte(v), &strct.FleetId); err != nil {
                return err
             }
        case "Message":
            if err := json.Unmarshal([]byte(v), &strct.Message); err != nil {
                return err
             }
        case "Type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            TypeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Type (a required property) was received
    if !TypeReceived {
        return errors.New("\"Type\" is required but was not present")
    }
    return nil
}
