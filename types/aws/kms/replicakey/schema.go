// Code generated by schema-generate. DO NOT EDIT.

package replicakey

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// KeyPolicy_object The key policy that authorizes use of the AWS KMS key. The key policy must observe the following rules.
type KeyPolicy_object struct {
}

// Resource The AWS::KMS::ReplicaKey resource specifies a multi-region replica AWS KMS key in AWS Key Management Service (AWS KMS).
type Resource struct {
  Arn string `json:"Arn,omitempty"`

  // A description of the AWS KMS key. Use a description that helps you to distinguish this AWS KMS key from others in the account, such as its intended use.
  Description string `json:"Description,omitempty"`

  // Specifies whether the AWS KMS key is enabled. Disabled AWS KMS keys cannot be used in cryptographic operations.
  Enabled bool `json:"Enabled,omitempty"`
  KeyId string `json:"KeyId,omitempty"`

  // The key policy that authorizes use of the AWS KMS key. The key policy must observe the following rules.
  KeyPolicy interface{} `json:"KeyPolicy"`

  // Specifies the number of days in the waiting period before AWS KMS deletes an AWS KMS key that has been removed from a CloudFormation stack. Enter a value between 7 and 30 days. The default value is 30 days.
  PendingWindowInDays int `json:"PendingWindowInDays,omitempty"`

  // Identifies the primary AWS KMS key to create a replica of. Specify the Amazon Resource Name (ARN) of the AWS KMS key. You cannot specify an alias or key ID. For help finding the ARN, see Finding the Key ID and ARN in the AWS Key Management Service Developer Guide.
  PrimaryKeyArn string `json:"PrimaryKeyArn"`

  // An array of key-value pairs to apply to this resource.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Enabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enabled\": ")
	if tmp, err := json.Marshal(strct.Enabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "KeyId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KeyId\": ")
	if tmp, err := json.Marshal(strct.KeyId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "KeyPolicy" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "KeyPolicy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KeyPolicy\": ")
	if tmp, err := json.Marshal(strct.KeyPolicy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PendingWindowInDays" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PendingWindowInDays\": ")
	if tmp, err := json.Marshal(strct.PendingWindowInDays); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PrimaryKeyArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "PrimaryKeyArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PrimaryKeyArn\": ")
	if tmp, err := json.Marshal(strct.PrimaryKeyArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    KeyPolicyReceived := false
    PrimaryKeyArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Enabled":
            if err := json.Unmarshal([]byte(v), &strct.Enabled); err != nil {
                return err
             }
        case "KeyId":
            if err := json.Unmarshal([]byte(v), &strct.KeyId); err != nil {
                return err
             }
        case "KeyPolicy":
            if err := json.Unmarshal([]byte(v), &strct.KeyPolicy); err != nil {
                return err
             }
            KeyPolicyReceived = true
        case "PendingWindowInDays":
            if err := json.Unmarshal([]byte(v), &strct.PendingWindowInDays); err != nil {
                return err
             }
        case "PrimaryKeyArn":
            if err := json.Unmarshal([]byte(v), &strct.PrimaryKeyArn); err != nil {
                return err
             }
            PrimaryKeyArnReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if KeyPolicy (a required property) was received
    if !KeyPolicyReceived {
        return errors.New("\"KeyPolicy\" is required but was not present")
    }
    // check if PrimaryKeyArn (a required property) was received
    if !PrimaryKeyArnReceived {
        return errors.New("\"PrimaryKeyArn\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
