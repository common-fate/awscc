// Code generated by schema-generate. DO NOT EDIT.

package certificate

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Use the AWS::IoT::Certificate resource to declare an AWS IoT X.509 certificate.
type Resource struct {
  Arn string `json:"Arn,omitempty"`
  CACertificatePem string `json:"CACertificatePem,omitempty"`
  CertificateMode string `json:"CertificateMode,omitempty"`
  CertificatePem string `json:"CertificatePem,omitempty"`
  CertificateSigningRequest string `json:"CertificateSigningRequest,omitempty"`
  Id string `json:"Id,omitempty"`
  Status string `json:"Status"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CACertificatePem" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CACertificatePem\": ")
	if tmp, err := json.Marshal(strct.CACertificatePem); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CertificateMode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CertificateMode\": ")
	if tmp, err := json.Marshal(strct.CertificateMode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CertificatePem" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CertificatePem\": ")
	if tmp, err := json.Marshal(strct.CertificatePem); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CertificateSigningRequest" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CertificateSigningRequest\": ")
	if tmp, err := json.Marshal(strct.CertificateSigningRequest); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Status" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    StatusReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "CACertificatePem":
            if err := json.Unmarshal([]byte(v), &strct.CACertificatePem); err != nil {
                return err
             }
        case "CertificateMode":
            if err := json.Unmarshal([]byte(v), &strct.CertificateMode); err != nil {
                return err
             }
        case "CertificatePem":
            if err := json.Unmarshal([]byte(v), &strct.CertificatePem); err != nil {
                return err
             }
        case "CertificateSigningRequest":
            if err := json.Unmarshal([]byte(v), &strct.CertificateSigningRequest); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
            StatusReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Status (a required property) was received
    if !StatusReceived {
        return errors.New("\"Status\" is required but was not present")
    }
    return nil
}
