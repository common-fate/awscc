// Code generated by schema-generate. DO NOT EDIT.

package topicruledestination

import (
    "encoding/json"
    "fmt"
    "bytes"
)

// HttpUrlDestinationSummary 
type HttpUrlDestinationSummary struct {
  ConfirmationUrl string `json:"ConfirmationUrl,omitempty"`
}

// Resource Resource Type definition for AWS::IoT::TopicRuleDestination
type Resource struct {

  // Amazon Resource Name (ARN).
  Arn string `json:"Arn,omitempty"`

  // HTTP URL destination properties.
  HttpUrlProperties *HttpUrlDestinationSummary `json:"HttpUrlProperties,omitempty"`

  // The status of the TopicRuleDestination.
  Status string `json:"Status,omitempty"`

  // The reasoning for the current status of the TopicRuleDestination.
  StatusReason string `json:"StatusReason,omitempty"`

  // VPC destination properties.
  VpcProperties *VpcDestinationProperties `json:"VpcProperties,omitempty"`
}

// VpcDestinationProperties 
type VpcDestinationProperties struct {
  RoleArn string `json:"RoleArn,omitempty"`
  SecurityGroups []string `json:"SecurityGroups,omitempty"`
  SubnetIds []string `json:"SubnetIds,omitempty"`
  VpcId string `json:"VpcId,omitempty"`
}

func (strct *HttpUrlDestinationSummary) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ConfirmationUrl" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConfirmationUrl\": ")
	if tmp, err := json.Marshal(strct.ConfirmationUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *HttpUrlDestinationSummary) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ConfirmationUrl":
            if err := json.Unmarshal([]byte(v), &strct.ConfirmationUrl); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HttpUrlProperties" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HttpUrlProperties\": ")
	if tmp, err := json.Marshal(strct.HttpUrlProperties); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StatusReason" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StatusReason\": ")
	if tmp, err := json.Marshal(strct.StatusReason); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpcProperties" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcProperties\": ")
	if tmp, err := json.Marshal(strct.VpcProperties); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "HttpUrlProperties":
            if err := json.Unmarshal([]byte(v), &strct.HttpUrlProperties); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "StatusReason":
            if err := json.Unmarshal([]byte(v), &strct.StatusReason); err != nil {
                return err
             }
        case "VpcProperties":
            if err := json.Unmarshal([]byte(v), &strct.VpcProperties); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *VpcDestinationProperties) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecurityGroups" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecurityGroups\": ")
	if tmp, err := json.Marshal(strct.SecurityGroups); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SubnetIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubnetIds\": ")
	if tmp, err := json.Marshal(strct.SubnetIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpcId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcId\": ")
	if tmp, err := json.Marshal(strct.VpcId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *VpcDestinationProperties) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
        case "SecurityGroups":
            if err := json.Unmarshal([]byte(v), &strct.SecurityGroups); err != nil {
                return err
             }
        case "SubnetIds":
            if err := json.Unmarshal([]byte(v), &strct.SubnetIds); err != nil {
                return err
             }
        case "VpcId":
            if err := json.Unmarshal([]byte(v), &strct.VpcId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
