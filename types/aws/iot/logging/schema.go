// Code generated by schema-generate. DO NOT EDIT.

package logging

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Resource Logging Options enable you to configure your IoT V2 logging role and default logging level so that you can monitor progress events logs as it passes from your devices through Iot core service.
type Resource struct {

  // Your 12-digit account ID (used as the primary identifier for the CloudFormation resource).
  AccountId string `json:"AccountId"`

  // The log level to use. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
  DefaultLogLevel string `json:"DefaultLogLevel"`

  // The ARN of the role that allows IoT to write to Cloudwatch logs.
  RoleArn string `json:"RoleArn"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AccountId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AccountId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AccountId\": ")
	if tmp, err := json.Marshal(strct.AccountId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DefaultLogLevel" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DefaultLogLevel" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultLogLevel\": ")
	if tmp, err := json.Marshal(strct.DefaultLogLevel); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AccountIdReceived := false
    DefaultLogLevelReceived := false
    RoleArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AccountId":
            if err := json.Unmarshal([]byte(v), &strct.AccountId); err != nil {
                return err
             }
            AccountIdReceived = true
        case "DefaultLogLevel":
            if err := json.Unmarshal([]byte(v), &strct.DefaultLogLevel); err != nil {
                return err
             }
            DefaultLogLevelReceived = true
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
            RoleArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AccountId (a required property) was received
    if !AccountIdReceived {
        return errors.New("\"AccountId\" is required but was not present")
    }
    // check if DefaultLogLevel (a required property) was received
    if !DefaultLogLevelReceived {
        return errors.New("\"DefaultLogLevel\" is required but was not present")
    }
    // check if RoleArn (a required property) was received
    if !RoleArnReceived {
        return errors.New("\"RoleArn\" is required but was not present")
    }
    return nil
}
