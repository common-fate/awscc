// Code generated by schema-generate. DO NOT EDIT.

package authorizer

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Resource Creates an authorizer.
type Resource struct {
  Arn string `json:"Arn,omitempty"`
  AuthorizerFunctionArn string `json:"AuthorizerFunctionArn"`
  AuthorizerName string `json:"AuthorizerName,omitempty"`
  EnableCachingForHttp bool `json:"EnableCachingForHttp,omitempty"`
  SigningDisabled bool `json:"SigningDisabled,omitempty"`
  Status string `json:"Status,omitempty"`
  Tags []*Tag `json:"Tags,omitempty"`
  TokenKeyName string `json:"TokenKeyName,omitempty"`
  TokenSigningPublicKeys *TokenSigningPublicKeys `json:"TokenSigningPublicKeys,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

// TokenSigningPublicKeys 
type TokenSigningPublicKeys struct {
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "AuthorizerFunctionArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AuthorizerFunctionArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AuthorizerFunctionArn\": ")
	if tmp, err := json.Marshal(strct.AuthorizerFunctionArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AuthorizerName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AuthorizerName\": ")
	if tmp, err := json.Marshal(strct.AuthorizerName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EnableCachingForHttp" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnableCachingForHttp\": ")
	if tmp, err := json.Marshal(strct.EnableCachingForHttp); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SigningDisabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SigningDisabled\": ")
	if tmp, err := json.Marshal(strct.SigningDisabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TokenKeyName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TokenKeyName\": ")
	if tmp, err := json.Marshal(strct.TokenKeyName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TokenSigningPublicKeys" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TokenSigningPublicKeys\": ")
	if tmp, err := json.Marshal(strct.TokenSigningPublicKeys); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AuthorizerFunctionArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "AuthorizerFunctionArn":
            if err := json.Unmarshal([]byte(v), &strct.AuthorizerFunctionArn); err != nil {
                return err
             }
            AuthorizerFunctionArnReceived = true
        case "AuthorizerName":
            if err := json.Unmarshal([]byte(v), &strct.AuthorizerName); err != nil {
                return err
             }
        case "EnableCachingForHttp":
            if err := json.Unmarshal([]byte(v), &strct.EnableCachingForHttp); err != nil {
                return err
             }
        case "SigningDisabled":
            if err := json.Unmarshal([]byte(v), &strct.SigningDisabled); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TokenKeyName":
            if err := json.Unmarshal([]byte(v), &strct.TokenKeyName); err != nil {
                return err
             }
        case "TokenSigningPublicKeys":
            if err := json.Unmarshal([]byte(v), &strct.TokenSigningPublicKeys); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AuthorizerFunctionArn (a required property) was received
    if !AuthorizerFunctionArnReceived {
        return errors.New("\"AuthorizerFunctionArn\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *TokenSigningPublicKeys) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TokenSigningPublicKeys) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
