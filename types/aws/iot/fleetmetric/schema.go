// Code generated by schema-generate. DO NOT EDIT.

package fleetmetric

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// AggregationType Aggregation types supported by Fleet Indexing
type AggregationType struct {

  // Fleet Indexing aggregation type names such as Statistics, Percentiles and Cardinality
  Name string `json:"Name"`

  // Fleet Indexing aggregation type values
  Values []string `json:"Values"`
}

// Resource An aggregated metric of certain devices in your fleet
type Resource struct {

  // The aggregation field to perform aggregation and metric emission
  AggregationField string `json:"AggregationField,omitempty"`
  AggregationType *AggregationType `json:"AggregationType,omitempty"`

  // The creation date of a fleet metric
  CreationDate float64 `json:"CreationDate,omitempty"`

  // The description of a fleet metric
  Description string `json:"Description,omitempty"`

  // The index name of a fleet metric
  IndexName string `json:"IndexName,omitempty"`

  // The last modified date of a fleet metric
  LastModifiedDate float64 `json:"LastModifiedDate,omitempty"`

  // The Amazon Resource Number (ARN) of a fleet metric metric
  MetricArn string `json:"MetricArn,omitempty"`

  // The name of the fleet metric
  MetricName string `json:"MetricName"`

  // The period of metric emission in seconds
  Period int `json:"Period,omitempty"`

  // The Fleet Indexing query used by a fleet metric
  QueryString string `json:"QueryString,omitempty"`

  // The version of a Fleet Indexing query used by a fleet metric
  QueryVersion string `json:"QueryVersion,omitempty"`

  // An array of key-value pairs to apply to this resource
  Tags []*Tag `json:"Tags,omitempty"`

  // The unit of data points emitted by a fleet metric
  Unit string `json:"Unit,omitempty"`

  // The version of a fleet metric
  Version float64 `json:"Version,omitempty"`
}

// Tag A key-value pair to associate with a resource
type Tag struct {

  // The tag's key
  Key string `json:"Key"`

  // The tag's value
  Value string `json:"Value"`
}

func (strct *AggregationType) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Values" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Values" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Values\": ")
	if tmp, err := json.Marshal(strct.Values); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AggregationType) UnmarshalJSON(b []byte) error {
    NameReceived := false
    ValuesReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Values":
            if err := json.Unmarshal([]byte(v), &strct.Values); err != nil {
                return err
             }
            ValuesReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if Values (a required property) was received
    if !ValuesReceived {
        return errors.New("\"Values\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AggregationField" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AggregationField\": ")
	if tmp, err := json.Marshal(strct.AggregationField); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AggregationType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AggregationType\": ")
	if tmp, err := json.Marshal(strct.AggregationType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CreationDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreationDate\": ")
	if tmp, err := json.Marshal(strct.CreationDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IndexName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IndexName\": ")
	if tmp, err := json.Marshal(strct.IndexName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LastModifiedDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LastModifiedDate\": ")
	if tmp, err := json.Marshal(strct.LastModifiedDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MetricArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MetricArn\": ")
	if tmp, err := json.Marshal(strct.MetricArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MetricName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MetricName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MetricName\": ")
	if tmp, err := json.Marshal(strct.MetricName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Period" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Period\": ")
	if tmp, err := json.Marshal(strct.Period); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "QueryString" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"QueryString\": ")
	if tmp, err := json.Marshal(strct.QueryString); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "QueryVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"QueryVersion\": ")
	if tmp, err := json.Marshal(strct.QueryVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Unit" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Unit\": ")
	if tmp, err := json.Marshal(strct.Unit); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Version" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Version\": ")
	if tmp, err := json.Marshal(strct.Version); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    MetricNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AggregationField":
            if err := json.Unmarshal([]byte(v), &strct.AggregationField); err != nil {
                return err
             }
        case "AggregationType":
            if err := json.Unmarshal([]byte(v), &strct.AggregationType); err != nil {
                return err
             }
        case "CreationDate":
            if err := json.Unmarshal([]byte(v), &strct.CreationDate); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "IndexName":
            if err := json.Unmarshal([]byte(v), &strct.IndexName); err != nil {
                return err
             }
        case "LastModifiedDate":
            if err := json.Unmarshal([]byte(v), &strct.LastModifiedDate); err != nil {
                return err
             }
        case "MetricArn":
            if err := json.Unmarshal([]byte(v), &strct.MetricArn); err != nil {
                return err
             }
        case "MetricName":
            if err := json.Unmarshal([]byte(v), &strct.MetricName); err != nil {
                return err
             }
            MetricNameReceived = true
        case "Period":
            if err := json.Unmarshal([]byte(v), &strct.Period); err != nil {
                return err
             }
        case "QueryString":
            if err := json.Unmarshal([]byte(v), &strct.QueryString); err != nil {
                return err
             }
        case "QueryVersion":
            if err := json.Unmarshal([]byte(v), &strct.QueryVersion); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "Unit":
            if err := json.Unmarshal([]byte(v), &strct.Unit); err != nil {
                return err
             }
        case "Version":
            if err := json.Unmarshal([]byte(v), &strct.Version); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if MetricName (a required property) was received
    if !MetricNameReceived {
        return errors.New("\"MetricName\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
