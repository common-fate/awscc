// Code generated by schema-generate. DO NOT EDIT.

package accesspoint

import (
    "errors"
    "encoding/json"
    "fmt"
    "bytes"
)

// Policy The access point policy associated with this access point.
type Policy struct {
}

// Resource Resource Type Definition for AWS::S3Outposts::AccessPoint
type Resource struct {

  // The Amazon Resource Name (ARN) of the specified AccessPoint.
  Arn string `json:"Arn,omitempty"`

  // The Amazon Resource Name (ARN) of the bucket you want to associate this AccessPoint with.
  Bucket string `json:"Bucket"`

  // A name for the AccessPoint.
  Name string `json:"Name"`

  // The access point policy associated with this access point.
  Policy *Policy `json:"Policy,omitempty"`

  // Virtual Private Cloud (VPC) from which requests can be made to the AccessPoint.
  VpcConfiguration *VpcConfiguration `json:"VpcConfiguration"`
}

// VpcConfiguration 
type VpcConfiguration struct {

  // Virtual Private Cloud (VPC) Id from which AccessPoint will allow requests.
  VpcId string `json:"VpcId,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Bucket" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Bucket" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Bucket\": ")
	if tmp, err := json.Marshal(strct.Bucket); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Policy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Policy\": ")
	if tmp, err := json.Marshal(strct.Policy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "VpcConfiguration" field is required
    if strct.VpcConfiguration == nil {
        return nil, errors.New("VpcConfiguration is a required field")
    }
    // Marshal the "VpcConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcConfiguration\": ")
	if tmp, err := json.Marshal(strct.VpcConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    BucketReceived := false
    NameReceived := false
    VpcConfigurationReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Bucket":
            if err := json.Unmarshal([]byte(v), &strct.Bucket); err != nil {
                return err
             }
            BucketReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Policy":
            if err := json.Unmarshal([]byte(v), &strct.Policy); err != nil {
                return err
             }
        case "VpcConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.VpcConfiguration); err != nil {
                return err
             }
            VpcConfigurationReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Bucket (a required property) was received
    if !BucketReceived {
        return errors.New("\"Bucket\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if VpcConfiguration (a required property) was received
    if !VpcConfigurationReceived {
        return errors.New("\"VpcConfiguration\" is required but was not present")
    }
    return nil
}

func (strct *VpcConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "VpcId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcId\": ")
	if tmp, err := json.Marshal(strct.VpcId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *VpcConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "VpcId":
            if err := json.Unmarshal([]byte(v), &strct.VpcId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
