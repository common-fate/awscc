// Code generated by schema-generate. DO NOT EDIT.

package bucket

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// AbortIncompleteMultipartUpload Specifies the days since the initiation of an incomplete multipart upload that Amazon S3Outposts will wait before permanently removing all parts of the upload.
type AbortIncompleteMultipartUpload struct {

  // Specifies the number of days after which Amazon S3Outposts aborts an incomplete multipart upload.
  DaysAfterInitiation int `json:"DaysAfterInitiation"`
}

// Filter The container for the filter of the lifecycle rule.
type Filter struct {

  // The container for the AND condition for the lifecycle rule. A combination of Prefix and 1 or more Tags OR a minimum of 2 or more tags.
  AndOperator interface{} `json:"AndOperator,omitempty"`

  // Object key prefix that identifies one or more objects to which this rule applies.
  Prefix string `json:"Prefix,omitempty"`

  // Specifies a tag used to identify a subset of objects for an Amazon S3Outposts bucket.
  Tag *FilterTag `json:"Tag,omitempty"`
}

// FilterTag Tag used to identify a subset of objects for an Amazon S3Outposts bucket.
type FilterTag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

// LifecycleConfiguration 
type LifecycleConfiguration struct {

  // A list of lifecycle rules for individual objects in an Amazon S3Outposts bucket.
  Rules []*Rule `json:"Rules"`
}

// Resource Resource Type Definition for AWS::S3Outposts::Bucket
type Resource struct {

  // The Amazon Resource Name (ARN) of the specified bucket.
  Arn string `json:"Arn,omitempty"`

  // A name for the bucket.
  BucketName string `json:"BucketName"`

  // Rules that define how Amazon S3Outposts manages objects during their lifetime.
  LifecycleConfiguration *LifecycleConfiguration `json:"LifecycleConfiguration,omitempty"`

  // The id of the customer outpost on which the bucket resides.
  OutpostId string `json:"OutpostId"`

  // An arbitrary set of tags (key-value pairs) for this S3Outposts bucket.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Rule Specifies lifecycle rules for an Amazon S3Outposts bucket. You must specify at least one of the following: AbortIncompleteMultipartUpload, ExpirationDate, ExpirationInDays.
type Rule struct {

  // Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3Outposts bucket.
  AbortIncompleteMultipartUpload *AbortIncompleteMultipartUpload `json:"AbortIncompleteMultipartUpload,omitempty"`

  // Indicates when objects are deleted from Amazon S3Outposts. The date value must be in ISO 8601 format. The time is always midnight UTC.
  ExpirationDate string `json:"ExpirationDate,omitempty"`

  // Indicates the number of days after creation when objects are deleted from Amazon S3Outposts.
  ExpirationInDays int `json:"ExpirationInDays,omitempty"`

  // The container for the filter of the lifecycle rule.
  Filter *Filter `json:"Filter,omitempty"`

  // Unique identifier for the lifecycle rule. The value can't be longer than 255 characters.
  Id string `json:"Id,omitempty"`
  Status string `json:"Status,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *AbortIncompleteMultipartUpload) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "DaysAfterInitiation" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DaysAfterInitiation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DaysAfterInitiation\": ")
	if tmp, err := json.Marshal(strct.DaysAfterInitiation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AbortIncompleteMultipartUpload) UnmarshalJSON(b []byte) error {
    DaysAfterInitiationReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DaysAfterInitiation":
            if err := json.Unmarshal([]byte(v), &strct.DaysAfterInitiation); err != nil {
                return err
             }
            DaysAfterInitiationReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DaysAfterInitiation (a required property) was received
    if !DaysAfterInitiationReceived {
        return errors.New("\"DaysAfterInitiation\" is required but was not present")
    }
    return nil
}

func (strct *Filter) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AndOperator" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AndOperator\": ")
	if tmp, err := json.Marshal(strct.AndOperator); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Prefix" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Prefix\": ")
	if tmp, err := json.Marshal(strct.Prefix); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tag" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tag\": ")
	if tmp, err := json.Marshal(strct.Tag); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Filter) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AndOperator":
            if err := json.Unmarshal([]byte(v), &strct.AndOperator); err != nil {
                return err
             }
        case "Prefix":
            if err := json.Unmarshal([]byte(v), &strct.Prefix); err != nil {
                return err
             }
        case "Tag":
            if err := json.Unmarshal([]byte(v), &strct.Tag); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *FilterTag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *FilterTag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *LifecycleConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Rules" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Rules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Rules\": ")
	if tmp, err := json.Marshal(strct.Rules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *LifecycleConfiguration) UnmarshalJSON(b []byte) error {
    RulesReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Rules":
            if err := json.Unmarshal([]byte(v), &strct.Rules); err != nil {
                return err
             }
            RulesReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Rules (a required property) was received
    if !RulesReceived {
        return errors.New("\"Rules\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "BucketName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "BucketName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BucketName\": ")
	if tmp, err := json.Marshal(strct.BucketName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LifecycleConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LifecycleConfiguration\": ")
	if tmp, err := json.Marshal(strct.LifecycleConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "OutpostId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "OutpostId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OutpostId\": ")
	if tmp, err := json.Marshal(strct.OutpostId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    BucketNameReceived := false
    OutpostIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "BucketName":
            if err := json.Unmarshal([]byte(v), &strct.BucketName); err != nil {
                return err
             }
            BucketNameReceived = true
        case "LifecycleConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.LifecycleConfiguration); err != nil {
                return err
             }
        case "OutpostId":
            if err := json.Unmarshal([]byte(v), &strct.OutpostId); err != nil {
                return err
             }
            OutpostIdReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if BucketName (a required property) was received
    if !BucketNameReceived {
        return errors.New("\"BucketName\" is required but was not present")
    }
    // check if OutpostId (a required property) was received
    if !OutpostIdReceived {
        return errors.New("\"OutpostId\" is required but was not present")
    }
    return nil
}

func (strct *Rule) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AbortIncompleteMultipartUpload" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AbortIncompleteMultipartUpload\": ")
	if tmp, err := json.Marshal(strct.AbortIncompleteMultipartUpload); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ExpirationDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ExpirationDate\": ")
	if tmp, err := json.Marshal(strct.ExpirationDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ExpirationInDays" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ExpirationInDays\": ")
	if tmp, err := json.Marshal(strct.ExpirationInDays); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Filter" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Filter\": ")
	if tmp, err := json.Marshal(strct.Filter); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Rule) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AbortIncompleteMultipartUpload":
            if err := json.Unmarshal([]byte(v), &strct.AbortIncompleteMultipartUpload); err != nil {
                return err
             }
        case "ExpirationDate":
            if err := json.Unmarshal([]byte(v), &strct.ExpirationDate); err != nil {
                return err
             }
        case "ExpirationInDays":
            if err := json.Unmarshal([]byte(v), &strct.ExpirationInDays); err != nil {
                return err
             }
        case "Filter":
            if err := json.Unmarshal([]byte(v), &strct.Filter); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
