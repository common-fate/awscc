// Code generated by schema-generate. DO NOT EDIT.

package configuration

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource Type definition for AWS::MSK::Configuration
type Resource struct {
  Arn string `json:"Arn,omitempty"`
  Description string `json:"Description,omitempty"`
  KafkaVersionsList []string `json:"KafkaVersionsList,omitempty"`
  Name string `json:"Name"`
  ServerProperties string `json:"ServerProperties"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "KafkaVersionsList" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KafkaVersionsList\": ")
	if tmp, err := json.Marshal(strct.KafkaVersionsList); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ServerProperties" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ServerProperties" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServerProperties\": ")
	if tmp, err := json.Marshal(strct.ServerProperties); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    NameReceived := false
    ServerPropertiesReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "KafkaVersionsList":
            if err := json.Unmarshal([]byte(v), &strct.KafkaVersionsList); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "ServerProperties":
            if err := json.Unmarshal([]byte(v), &strct.ServerProperties); err != nil {
                return err
             }
            ServerPropertiesReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if ServerProperties (a required property) was received
    if !ServerPropertiesReceived {
        return errors.New("\"ServerProperties\" is required but was not present")
    }
    return nil
}
