// Code generated by schema-generate. DO NOT EDIT.

package appmonitor

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// AppMonitorConfiguration AppMonitor configuration
type AppMonitorConfiguration struct {

  // If you set this to true, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
  AllowCookies bool `json:"AllowCookies,omitempty"`

  // If you set this to true, RUM enables xray tracing for the user sessions that RUM samples. RUM adds an xray trace header to allowed HTTP requests. It also records an xray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the xray console and the CW ServiceLens console.
  EnableXRay bool `json:"EnableXRay,omitempty"`

  // A list of URLs in your website or application to exclude from RUM data collection. You can't include both ExcludedPages and IncludedPages in the same operation.
  ExcludedPages []string `json:"ExcludedPages,omitempty"`

  // A list of pages in the RUM console that are to be displayed with a favorite icon.
  FavoritePages []string `json:"FavoritePages,omitempty"`

  // The ARN of the guest IAM role that is attached to the identity pool that is used to authorize the sending of data to RUM.
  GuestRoleArn string `json:"GuestRoleArn,omitempty"`

  // The ID of the identity pool that is used to authorize the sending of data to RUM.
  IdentityPoolId string `json:"IdentityPoolId,omitempty"`

  // If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. You can't include both ExcludedPages and IncludedPages in the same operation.
  IncludedPages []string `json:"IncludedPages,omitempty"`

  // An array of structures which define the destinations and the metrics that you want to send.
  MetricDestinations []*MetricDestination `json:"MetricDestinations,omitempty"`

  // Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. If you omit this parameter, the default of 10 is used.
  SessionSampleRate float64 `json:"SessionSampleRate,omitempty"`

  // An array that lists the types of telemetry data that this app monitor is to collect.
  Telemetries []string `json:"Telemetries,omitempty"`
}

// CustomEvents AppMonitor custom events configuration
type CustomEvents struct {

  // Indicates whether AppMonitor accepts custom events.
  Status string `json:"Status,omitempty"`
}

// DimensionKeys Use this field only if you are sending the metric to CloudWatch.
// 
// This field is a map of field paths to dimension names. It defines the dimensions to associate with this metric in CloudWatch. Valid values for the entries in this field are the following:
// 
// "metadata.pageId": "PageId"
// 
// "metadata.browserName": "BrowserName"
// 
// "metadata.deviceType": "DeviceType"
// 
// "metadata.osName": "OSName"
// 
// "metadata.countryCode": "CountryCode"
// 
// "event_details.fileType": "FileType"
// 
// All dimensions listed in this field must also be included in EventPattern.
type DimensionKeys struct {
}

// MetricDefinition A single metric definition
type MetricDefinition struct {

  // Use this field only if you are sending the metric to CloudWatch.
  // 
  // This field is a map of field paths to dimension names. It defines the dimensions to associate with this metric in CloudWatch. Valid values for the entries in this field are the following:
  // 
  // "metadata.pageId": "PageId"
  // 
  // "metadata.browserName": "BrowserName"
  // 
  // "metadata.deviceType": "DeviceType"
  // 
  // "metadata.osName": "OSName"
  // 
  // "metadata.countryCode": "CountryCode"
  // 
  // "event_details.fileType": "FileType"
  // 
  // All dimensions listed in this field must also be included in EventPattern.
  DimensionKeys *DimensionKeys `json:"DimensionKeys,omitempty"`

  // The pattern that defines the metric, specified as a JSON object. RUM checks events that happen in a user's session against the pattern, and events that match the pattern are sent to the metric destination.
  // 
  // When you define extended metrics, the metric definition is not valid if EventPattern is omitted.
  // 
  // Example event patterns:
  // 
  // '{ "event_type": ["com.amazon.rum.js_error_event"], "metadata": { "browserName": [ "Chrome", "Safari" ], } }'
  // 
  // '{ "event_type": ["com.amazon.rum.performance_navigation_event"], "metadata": { "browserName": [ "Chrome", "Firefox" ] }, "event_details": { "duration": [{ "numeric": [ "<", 2000 ] }] } }'
  // 
  // '{ "event_type": ["com.amazon.rum.performance_navigation_event"], "metadata": { "browserName": [ "Chrome", "Safari" ], "countryCode": [ "US" ] }, "event_details": { "duration": [{ "numeric": [ ">=", 2000, "<", 8000 ] }] } }'
  // 
  // If the metrics destination' is CloudWatch and the event also matches a value in DimensionKeys, then the metric is published with the specified dimensions.
  EventPattern string `json:"EventPattern,omitempty"`

  // The name for the metric that is defined in this structure. Valid values are the following:
  // 
  // PerformanceNavigationDuration
  // 
  // PerformanceResourceDuration
  // 
  // NavigationSatisfiedTransaction
  // 
  // NavigationToleratedTransaction
  // 
  // NavigationFrustratedTransaction
  // 
  // WebVitalsCumulativeLayoutShift
  // 
  // WebVitalsFirstInputDelay
  // 
  // WebVitalsLargestContentfulPaint
  // 
  // JsErrorCount
  // 
  // HttpErrorCount
  // 
  // SessionCount
  Name string `json:"Name"`

  // The CloudWatch metric unit to use for this metric. If you omit this field, the metric is recorded with no unit.
  UnitLabel string `json:"UnitLabel,omitempty"`

  // The field within the event object that the metric value is sourced from.
  // 
  // If you omit this field, a hardcoded value of 1 is pushed as the metric value. This is useful if you just want to count the number of events that the filter catches.
  // 
  // If this metric is sent to Evidently, this field will be passed to Evidently raw and Evidently will handle data extraction from the event.
  ValueKey string `json:"ValueKey,omitempty"`
}

// MetricDestination An structure which defines the destination and the metrics that you want to send.
type MetricDestination struct {

  // Defines the destination to send the metrics to. Valid values are CloudWatch and Evidently. If you specify Evidently, you must also specify the ARN of the Evidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
  Destination string `json:"Destination"`

  // Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
  DestinationArn string `json:"DestinationArn,omitempty"`

  // This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
  // 
  // This parameter specifies the ARN of an IAM role that RUM will assume to write to the Evidently experiment that you are sending metrics to. This role must have permission to write to that experiment.
  IamRoleArn string `json:"IamRoleArn,omitempty"`

  // An array of structures which define the metrics that you want to send.
  MetricDefinitions []*MetricDefinition `json:"MetricDefinitions,omitempty"`
}

// Resource Resource Type definition for AWS::RUM::AppMonitor
type Resource struct {
  AppMonitorConfiguration *AppMonitorConfiguration `json:"AppMonitorConfiguration,omitempty"`
  CustomEvents *CustomEvents `json:"CustomEvents,omitempty"`

  // Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
  CwLogEnabled bool `json:"CwLogEnabled,omitempty"`

  // The top-level internet domain name for which your application has administrative authority.
  Domain string `json:"Domain"`

  // A name for the app monitor
  Name string `json:"Name"`
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Value string `json:"Value"`
}

func (strct *AppMonitorConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllowCookies" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowCookies\": ")
	if tmp, err := json.Marshal(strct.AllowCookies); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EnableXRay" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnableXRay\": ")
	if tmp, err := json.Marshal(strct.EnableXRay); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ExcludedPages" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ExcludedPages\": ")
	if tmp, err := json.Marshal(strct.ExcludedPages); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FavoritePages" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FavoritePages\": ")
	if tmp, err := json.Marshal(strct.FavoritePages); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "GuestRoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"GuestRoleArn\": ")
	if tmp, err := json.Marshal(strct.GuestRoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IdentityPoolId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IdentityPoolId\": ")
	if tmp, err := json.Marshal(strct.IdentityPoolId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IncludedPages" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IncludedPages\": ")
	if tmp, err := json.Marshal(strct.IncludedPages); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MetricDestinations" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MetricDestinations\": ")
	if tmp, err := json.Marshal(strct.MetricDestinations); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SessionSampleRate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SessionSampleRate\": ")
	if tmp, err := json.Marshal(strct.SessionSampleRate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Telemetries" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Telemetries\": ")
	if tmp, err := json.Marshal(strct.Telemetries); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AppMonitorConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllowCookies":
            if err := json.Unmarshal([]byte(v), &strct.AllowCookies); err != nil {
                return err
             }
        case "EnableXRay":
            if err := json.Unmarshal([]byte(v), &strct.EnableXRay); err != nil {
                return err
             }
        case "ExcludedPages":
            if err := json.Unmarshal([]byte(v), &strct.ExcludedPages); err != nil {
                return err
             }
        case "FavoritePages":
            if err := json.Unmarshal([]byte(v), &strct.FavoritePages); err != nil {
                return err
             }
        case "GuestRoleArn":
            if err := json.Unmarshal([]byte(v), &strct.GuestRoleArn); err != nil {
                return err
             }
        case "IdentityPoolId":
            if err := json.Unmarshal([]byte(v), &strct.IdentityPoolId); err != nil {
                return err
             }
        case "IncludedPages":
            if err := json.Unmarshal([]byte(v), &strct.IncludedPages); err != nil {
                return err
             }
        case "MetricDestinations":
            if err := json.Unmarshal([]byte(v), &strct.MetricDestinations); err != nil {
                return err
             }
        case "SessionSampleRate":
            if err := json.Unmarshal([]byte(v), &strct.SessionSampleRate); err != nil {
                return err
             }
        case "Telemetries":
            if err := json.Unmarshal([]byte(v), &strct.Telemetries); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *CustomEvents) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CustomEvents) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *DimensionKeys) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DimensionKeys) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *MetricDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DimensionKeys" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DimensionKeys\": ")
	if tmp, err := json.Marshal(strct.DimensionKeys); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EventPattern" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EventPattern\": ")
	if tmp, err := json.Marshal(strct.EventPattern); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UnitLabel" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UnitLabel\": ")
	if tmp, err := json.Marshal(strct.UnitLabel); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ValueKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ValueKey\": ")
	if tmp, err := json.Marshal(strct.ValueKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MetricDefinition) UnmarshalJSON(b []byte) error {
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DimensionKeys":
            if err := json.Unmarshal([]byte(v), &strct.DimensionKeys); err != nil {
                return err
             }
        case "EventPattern":
            if err := json.Unmarshal([]byte(v), &strct.EventPattern); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "UnitLabel":
            if err := json.Unmarshal([]byte(v), &strct.UnitLabel); err != nil {
                return err
             }
        case "ValueKey":
            if err := json.Unmarshal([]byte(v), &strct.ValueKey); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}

func (strct *MetricDestination) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Destination" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Destination" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Destination\": ")
	if tmp, err := json.Marshal(strct.Destination); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DestinationArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DestinationArn\": ")
	if tmp, err := json.Marshal(strct.DestinationArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IamRoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IamRoleArn\": ")
	if tmp, err := json.Marshal(strct.IamRoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MetricDefinitions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MetricDefinitions\": ")
	if tmp, err := json.Marshal(strct.MetricDefinitions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MetricDestination) UnmarshalJSON(b []byte) error {
    DestinationReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Destination":
            if err := json.Unmarshal([]byte(v), &strct.Destination); err != nil {
                return err
             }
            DestinationReceived = true
        case "DestinationArn":
            if err := json.Unmarshal([]byte(v), &strct.DestinationArn); err != nil {
                return err
             }
        case "IamRoleArn":
            if err := json.Unmarshal([]byte(v), &strct.IamRoleArn); err != nil {
                return err
             }
        case "MetricDefinitions":
            if err := json.Unmarshal([]byte(v), &strct.MetricDefinitions); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Destination (a required property) was received
    if !DestinationReceived {
        return errors.New("\"Destination\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AppMonitorConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AppMonitorConfiguration\": ")
	if tmp, err := json.Marshal(strct.AppMonitorConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CustomEvents" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CustomEvents\": ")
	if tmp, err := json.Marshal(strct.CustomEvents); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CwLogEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CwLogEnabled\": ")
	if tmp, err := json.Marshal(strct.CwLogEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Domain" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Domain" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Domain\": ")
	if tmp, err := json.Marshal(strct.Domain); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DomainReceived := false
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AppMonitorConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.AppMonitorConfiguration); err != nil {
                return err
             }
        case "CustomEvents":
            if err := json.Unmarshal([]byte(v), &strct.CustomEvents); err != nil {
                return err
             }
        case "CwLogEnabled":
            if err := json.Unmarshal([]byte(v), &strct.CwLogEnabled); err != nil {
                return err
             }
        case "Domain":
            if err := json.Unmarshal([]byte(v), &strct.Domain); err != nil {
                return err
             }
            DomainReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Domain (a required property) was received
    if !DomainReceived {
        return errors.New("\"Domain\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
