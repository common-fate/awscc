// Code generated by schema-generate. DO NOT EDIT.

package cloudfrontoriginaccessidentity

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// CloudFrontOriginAccessIdentityConfig 
type CloudFrontOriginAccessIdentityConfig struct {
  Comment string `json:"Comment"`
}

// Resource Resource Type definition for AWS::CloudFront::CloudFrontOriginAccessIdentity
type Resource struct {
  CloudFrontOriginAccessIdentityConfig *CloudFrontOriginAccessIdentityConfig `json:"CloudFrontOriginAccessIdentityConfig"`
  Id string `json:"Id,omitempty"`
  S3CanonicalUserId string `json:"S3CanonicalUserId,omitempty"`
}

func (strct *CloudFrontOriginAccessIdentityConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Comment" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Comment" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Comment\": ")
	if tmp, err := json.Marshal(strct.Comment); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CloudFrontOriginAccessIdentityConfig) UnmarshalJSON(b []byte) error {
    CommentReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Comment":
            if err := json.Unmarshal([]byte(v), &strct.Comment); err != nil {
                return err
             }
            CommentReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Comment (a required property) was received
    if !CommentReceived {
        return errors.New("\"Comment\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "CloudFrontOriginAccessIdentityConfig" field is required
    if strct.CloudFrontOriginAccessIdentityConfig == nil {
        return nil, errors.New("CloudFrontOriginAccessIdentityConfig is a required field")
    }
    // Marshal the "CloudFrontOriginAccessIdentityConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CloudFrontOriginAccessIdentityConfig\": ")
	if tmp, err := json.Marshal(strct.CloudFrontOriginAccessIdentityConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "S3CanonicalUserId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3CanonicalUserId\": ")
	if tmp, err := json.Marshal(strct.S3CanonicalUserId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    CloudFrontOriginAccessIdentityConfigReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CloudFrontOriginAccessIdentityConfig":
            if err := json.Unmarshal([]byte(v), &strct.CloudFrontOriginAccessIdentityConfig); err != nil {
                return err
             }
            CloudFrontOriginAccessIdentityConfigReceived = true
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "S3CanonicalUserId":
            if err := json.Unmarshal([]byte(v), &strct.S3CanonicalUserId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CloudFrontOriginAccessIdentityConfig (a required property) was received
    if !CloudFrontOriginAccessIdentityConfigReceived {
        return errors.New("\"CloudFrontOriginAccessIdentityConfig\" is required but was not present")
    }
    return nil
}
