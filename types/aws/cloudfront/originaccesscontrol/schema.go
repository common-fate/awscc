// Code generated by schema-generate. DO NOT EDIT.

package originaccesscontrol

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// OriginAccessControlConfig 
type OriginAccessControlConfig struct {
  Description string `json:"Description,omitempty"`
  Name string `json:"Name"`
  OriginAccessControlOriginType string `json:"OriginAccessControlOriginType"`
  SigningBehavior string `json:"SigningBehavior"`
  SigningProtocol string `json:"SigningProtocol"`
}

// Resource Resource Type definition for AWS::CloudFront::OriginAccessControl
type Resource struct {
  Id string `json:"Id,omitempty"`
  OriginAccessControlConfig *OriginAccessControlConfig `json:"OriginAccessControlConfig"`
}

func (strct *OriginAccessControlConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "OriginAccessControlOriginType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "OriginAccessControlOriginType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OriginAccessControlOriginType\": ")
	if tmp, err := json.Marshal(strct.OriginAccessControlOriginType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SigningBehavior" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SigningBehavior" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SigningBehavior\": ")
	if tmp, err := json.Marshal(strct.SigningBehavior); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SigningProtocol" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SigningProtocol" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SigningProtocol\": ")
	if tmp, err := json.Marshal(strct.SigningProtocol); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OriginAccessControlConfig) UnmarshalJSON(b []byte) error {
    NameReceived := false
    OriginAccessControlOriginTypeReceived := false
    SigningBehaviorReceived := false
    SigningProtocolReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "OriginAccessControlOriginType":
            if err := json.Unmarshal([]byte(v), &strct.OriginAccessControlOriginType); err != nil {
                return err
             }
            OriginAccessControlOriginTypeReceived = true
        case "SigningBehavior":
            if err := json.Unmarshal([]byte(v), &strct.SigningBehavior); err != nil {
                return err
             }
            SigningBehaviorReceived = true
        case "SigningProtocol":
            if err := json.Unmarshal([]byte(v), &strct.SigningProtocol); err != nil {
                return err
             }
            SigningProtocolReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if OriginAccessControlOriginType (a required property) was received
    if !OriginAccessControlOriginTypeReceived {
        return errors.New("\"OriginAccessControlOriginType\" is required but was not present")
    }
    // check if SigningBehavior (a required property) was received
    if !SigningBehaviorReceived {
        return errors.New("\"SigningBehavior\" is required but was not present")
    }
    // check if SigningProtocol (a required property) was received
    if !SigningProtocolReceived {
        return errors.New("\"SigningProtocol\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "OriginAccessControlConfig" field is required
    if strct.OriginAccessControlConfig == nil {
        return nil, errors.New("OriginAccessControlConfig is a required field")
    }
    // Marshal the "OriginAccessControlConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OriginAccessControlConfig\": ")
	if tmp, err := json.Marshal(strct.OriginAccessControlConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    OriginAccessControlConfigReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "OriginAccessControlConfig":
            if err := json.Unmarshal([]byte(v), &strct.OriginAccessControlConfig); err != nil {
                return err
             }
            OriginAccessControlConfigReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if OriginAccessControlConfig (a required property) was received
    if !OriginAccessControlConfigReceived {
        return errors.New("\"OriginAccessControlConfig\" is required but was not present")
    }
    return nil
}
