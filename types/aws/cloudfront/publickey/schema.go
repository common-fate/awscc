// Code generated by schema-generate. DO NOT EDIT.

package publickey

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// PublicKeyConfig 
type PublicKeyConfig struct {
  CallerReference string `json:"CallerReference"`
  Comment string `json:"Comment,omitempty"`
  EncodedKey string `json:"EncodedKey"`
  Name string `json:"Name"`
}

// Resource Resource Type definition for AWS::CloudFront::PublicKey
type Resource struct {
  CreatedTime string `json:"CreatedTime,omitempty"`
  Id string `json:"Id,omitempty"`
  PublicKeyConfig *PublicKeyConfig `json:"PublicKeyConfig"`
}

func (strct *PublicKeyConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "CallerReference" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CallerReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CallerReference\": ")
	if tmp, err := json.Marshal(strct.CallerReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Comment" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Comment\": ")
	if tmp, err := json.Marshal(strct.Comment); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "EncodedKey" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "EncodedKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EncodedKey\": ")
	if tmp, err := json.Marshal(strct.EncodedKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PublicKeyConfig) UnmarshalJSON(b []byte) error {
    CallerReferenceReceived := false
    EncodedKeyReceived := false
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CallerReference":
            if err := json.Unmarshal([]byte(v), &strct.CallerReference); err != nil {
                return err
             }
            CallerReferenceReceived = true
        case "Comment":
            if err := json.Unmarshal([]byte(v), &strct.Comment); err != nil {
                return err
             }
        case "EncodedKey":
            if err := json.Unmarshal([]byte(v), &strct.EncodedKey); err != nil {
                return err
             }
            EncodedKeyReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CallerReference (a required property) was received
    if !CallerReferenceReceived {
        return errors.New("\"CallerReference\" is required but was not present")
    }
    // check if EncodedKey (a required property) was received
    if !EncodedKeyReceived {
        return errors.New("\"EncodedKey\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CreatedTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreatedTime\": ")
	if tmp, err := json.Marshal(strct.CreatedTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PublicKeyConfig" field is required
    if strct.PublicKeyConfig == nil {
        return nil, errors.New("PublicKeyConfig is a required field")
    }
    // Marshal the "PublicKeyConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PublicKeyConfig\": ")
	if tmp, err := json.Marshal(strct.PublicKeyConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    PublicKeyConfigReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CreatedTime":
            if err := json.Unmarshal([]byte(v), &strct.CreatedTime); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "PublicKeyConfig":
            if err := json.Unmarshal([]byte(v), &strct.PublicKeyConfig); err != nil {
                return err
             }
            PublicKeyConfigReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if PublicKeyConfig (a required property) was received
    if !PublicKeyConfigReceived {
        return errors.New("\"PublicKeyConfig\" is required but was not present")
    }
    return nil
}
