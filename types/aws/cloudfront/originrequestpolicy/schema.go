// Code generated by schema-generate. DO NOT EDIT.

package originrequestpolicy

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// CookiesConfig 
type CookiesConfig struct {
  CookieBehavior string `json:"CookieBehavior"`
  Cookies []string `json:"Cookies,omitempty"`
}

// HeadersConfig 
type HeadersConfig struct {
  HeaderBehavior string `json:"HeaderBehavior"`
  Headers []string `json:"Headers,omitempty"`
}

// OriginRequestPolicyConfig 
type OriginRequestPolicyConfig struct {
  Comment string `json:"Comment,omitempty"`
  CookiesConfig *CookiesConfig `json:"CookiesConfig"`
  HeadersConfig *HeadersConfig `json:"HeadersConfig"`
  Name string `json:"Name"`
  QueryStringsConfig *QueryStringsConfig `json:"QueryStringsConfig"`
}

// QueryStringsConfig 
type QueryStringsConfig struct {
  QueryStringBehavior string `json:"QueryStringBehavior"`
  QueryStrings []string `json:"QueryStrings,omitempty"`
}

// Resource Resource Type definition for AWS::CloudFront::OriginRequestPolicy
type Resource struct {
  Id string `json:"Id,omitempty"`
  LastModifiedTime string `json:"LastModifiedTime,omitempty"`
  OriginRequestPolicyConfig *OriginRequestPolicyConfig `json:"OriginRequestPolicyConfig"`
}

func (strct *CookiesConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "CookieBehavior" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CookieBehavior" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CookieBehavior\": ")
	if tmp, err := json.Marshal(strct.CookieBehavior); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Cookies" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Cookies\": ")
	if tmp, err := json.Marshal(strct.Cookies); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CookiesConfig) UnmarshalJSON(b []byte) error {
    CookieBehaviorReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CookieBehavior":
            if err := json.Unmarshal([]byte(v), &strct.CookieBehavior); err != nil {
                return err
             }
            CookieBehaviorReceived = true
        case "Cookies":
            if err := json.Unmarshal([]byte(v), &strct.Cookies); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CookieBehavior (a required property) was received
    if !CookieBehaviorReceived {
        return errors.New("\"CookieBehavior\" is required but was not present")
    }
    return nil
}

func (strct *HeadersConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "HeaderBehavior" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "HeaderBehavior" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HeaderBehavior\": ")
	if tmp, err := json.Marshal(strct.HeaderBehavior); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Headers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Headers\": ")
	if tmp, err := json.Marshal(strct.Headers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *HeadersConfig) UnmarshalJSON(b []byte) error {
    HeaderBehaviorReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "HeaderBehavior":
            if err := json.Unmarshal([]byte(v), &strct.HeaderBehavior); err != nil {
                return err
             }
            HeaderBehaviorReceived = true
        case "Headers":
            if err := json.Unmarshal([]byte(v), &strct.Headers); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if HeaderBehavior (a required property) was received
    if !HeaderBehaviorReceived {
        return errors.New("\"HeaderBehavior\" is required but was not present")
    }
    return nil
}

func (strct *OriginRequestPolicyConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Comment" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Comment\": ")
	if tmp, err := json.Marshal(strct.Comment); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "CookiesConfig" field is required
    if strct.CookiesConfig == nil {
        return nil, errors.New("CookiesConfig is a required field")
    }
    // Marshal the "CookiesConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CookiesConfig\": ")
	if tmp, err := json.Marshal(strct.CookiesConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "HeadersConfig" field is required
    if strct.HeadersConfig == nil {
        return nil, errors.New("HeadersConfig is a required field")
    }
    // Marshal the "HeadersConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HeadersConfig\": ")
	if tmp, err := json.Marshal(strct.HeadersConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "QueryStringsConfig" field is required
    if strct.QueryStringsConfig == nil {
        return nil, errors.New("QueryStringsConfig is a required field")
    }
    // Marshal the "QueryStringsConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"QueryStringsConfig\": ")
	if tmp, err := json.Marshal(strct.QueryStringsConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OriginRequestPolicyConfig) UnmarshalJSON(b []byte) error {
    CookiesConfigReceived := false
    HeadersConfigReceived := false
    NameReceived := false
    QueryStringsConfigReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Comment":
            if err := json.Unmarshal([]byte(v), &strct.Comment); err != nil {
                return err
             }
        case "CookiesConfig":
            if err := json.Unmarshal([]byte(v), &strct.CookiesConfig); err != nil {
                return err
             }
            CookiesConfigReceived = true
        case "HeadersConfig":
            if err := json.Unmarshal([]byte(v), &strct.HeadersConfig); err != nil {
                return err
             }
            HeadersConfigReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "QueryStringsConfig":
            if err := json.Unmarshal([]byte(v), &strct.QueryStringsConfig); err != nil {
                return err
             }
            QueryStringsConfigReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CookiesConfig (a required property) was received
    if !CookiesConfigReceived {
        return errors.New("\"CookiesConfig\" is required but was not present")
    }
    // check if HeadersConfig (a required property) was received
    if !HeadersConfigReceived {
        return errors.New("\"HeadersConfig\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if QueryStringsConfig (a required property) was received
    if !QueryStringsConfigReceived {
        return errors.New("\"QueryStringsConfig\" is required but was not present")
    }
    return nil
}

func (strct *QueryStringsConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "QueryStringBehavior" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "QueryStringBehavior" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"QueryStringBehavior\": ")
	if tmp, err := json.Marshal(strct.QueryStringBehavior); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "QueryStrings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"QueryStrings\": ")
	if tmp, err := json.Marshal(strct.QueryStrings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *QueryStringsConfig) UnmarshalJSON(b []byte) error {
    QueryStringBehaviorReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "QueryStringBehavior":
            if err := json.Unmarshal([]byte(v), &strct.QueryStringBehavior); err != nil {
                return err
             }
            QueryStringBehaviorReceived = true
        case "QueryStrings":
            if err := json.Unmarshal([]byte(v), &strct.QueryStrings); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if QueryStringBehavior (a required property) was received
    if !QueryStringBehaviorReceived {
        return errors.New("\"QueryStringBehavior\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LastModifiedTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LastModifiedTime\": ")
	if tmp, err := json.Marshal(strct.LastModifiedTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "OriginRequestPolicyConfig" field is required
    if strct.OriginRequestPolicyConfig == nil {
        return nil, errors.New("OriginRequestPolicyConfig is a required field")
    }
    // Marshal the "OriginRequestPolicyConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OriginRequestPolicyConfig\": ")
	if tmp, err := json.Marshal(strct.OriginRequestPolicyConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    OriginRequestPolicyConfigReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "LastModifiedTime":
            if err := json.Unmarshal([]byte(v), &strct.LastModifiedTime); err != nil {
                return err
             }
        case "OriginRequestPolicyConfig":
            if err := json.Unmarshal([]byte(v), &strct.OriginRequestPolicyConfig); err != nil {
                return err
             }
            OriginRequestPolicyConfigReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if OriginRequestPolicyConfig (a required property) was received
    if !OriginRequestPolicyConfigReceived {
        return errors.New("\"OriginRequestPolicyConfig\" is required but was not present")
    }
    return nil
}
