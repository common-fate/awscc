// Code generated by schema-generate. DO NOT EDIT.

package realtimelogconfig

import (
    "errors"
    "encoding/json"
    "fmt"
    "bytes"
)

// EndPoint 
type EndPoint struct {
  KinesisStreamConfig *KinesisStreamConfig `json:"KinesisStreamConfig"`
  StreamType string `json:"StreamType"`
}

// KinesisStreamConfig 
type KinesisStreamConfig struct {
  RoleArn string `json:"RoleArn"`
  StreamArn string `json:"StreamArn"`
}

// Resource Resource Type definition for AWS::CloudFront::RealtimeLogConfig
type Resource struct {
  Arn string `json:"Arn,omitempty"`
  EndPoints []*EndPoint `json:"EndPoints"`
  Fields []string `json:"Fields"`
  Name string `json:"Name"`
  SamplingRate float64 `json:"SamplingRate"`
}

func (strct *EndPoint) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "KinesisStreamConfig" field is required
    if strct.KinesisStreamConfig == nil {
        return nil, errors.New("KinesisStreamConfig is a required field")
    }
    // Marshal the "KinesisStreamConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KinesisStreamConfig\": ")
	if tmp, err := json.Marshal(strct.KinesisStreamConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "StreamType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "StreamType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StreamType\": ")
	if tmp, err := json.Marshal(strct.StreamType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *EndPoint) UnmarshalJSON(b []byte) error {
    KinesisStreamConfigReceived := false
    StreamTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "KinesisStreamConfig":
            if err := json.Unmarshal([]byte(v), &strct.KinesisStreamConfig); err != nil {
                return err
             }
            KinesisStreamConfigReceived = true
        case "StreamType":
            if err := json.Unmarshal([]byte(v), &strct.StreamType); err != nil {
                return err
             }
            StreamTypeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if KinesisStreamConfig (a required property) was received
    if !KinesisStreamConfigReceived {
        return errors.New("\"KinesisStreamConfig\" is required but was not present")
    }
    // check if StreamType (a required property) was received
    if !StreamTypeReceived {
        return errors.New("\"StreamType\" is required but was not present")
    }
    return nil
}

func (strct *KinesisStreamConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "RoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "StreamArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "StreamArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StreamArn\": ")
	if tmp, err := json.Marshal(strct.StreamArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *KinesisStreamConfig) UnmarshalJSON(b []byte) error {
    RoleArnReceived := false
    StreamArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
            RoleArnReceived = true
        case "StreamArn":
            if err := json.Unmarshal([]byte(v), &strct.StreamArn); err != nil {
                return err
             }
            StreamArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if RoleArn (a required property) was received
    if !RoleArnReceived {
        return errors.New("\"RoleArn\" is required but was not present")
    }
    // check if StreamArn (a required property) was received
    if !StreamArnReceived {
        return errors.New("\"StreamArn\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "EndPoints" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "EndPoints" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EndPoints\": ")
	if tmp, err := json.Marshal(strct.EndPoints); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Fields" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Fields" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Fields\": ")
	if tmp, err := json.Marshal(strct.Fields); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SamplingRate" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SamplingRate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SamplingRate\": ")
	if tmp, err := json.Marshal(strct.SamplingRate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    EndPointsReceived := false
    FieldsReceived := false
    NameReceived := false
    SamplingRateReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "EndPoints":
            if err := json.Unmarshal([]byte(v), &strct.EndPoints); err != nil {
                return err
             }
            EndPointsReceived = true
        case "Fields":
            if err := json.Unmarshal([]byte(v), &strct.Fields); err != nil {
                return err
             }
            FieldsReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "SamplingRate":
            if err := json.Unmarshal([]byte(v), &strct.SamplingRate); err != nil {
                return err
             }
            SamplingRateReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if EndPoints (a required property) was received
    if !EndPointsReceived {
        return errors.New("\"EndPoints\" is required but was not present")
    }
    // check if Fields (a required property) was received
    if !FieldsReceived {
        return errors.New("\"Fields\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if SamplingRate (a required property) was received
    if !SamplingRateReceived {
        return errors.New("\"SamplingRate\" is required but was not present")
    }
    return nil
}
