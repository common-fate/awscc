// Code generated by schema-generate. DO NOT EDIT.

package assessment

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// AWSAccount The AWS account associated with the assessment.
type AWSAccount struct {
  EmailAddress string `json:"EmailAddress,omitempty"`
  Id string `json:"Id,omitempty"`
  Name string `json:"Name,omitempty"`
}

// AWSService An AWS service such as Amazon S3, AWS CloudTrail, and so on.
type AWSService struct {
  ServiceName string `json:"ServiceName,omitempty"`
}

// AssessmentReportsDestination The destination in which evidence reports are stored for the specified assessment.
type AssessmentReportsDestination struct {
  Destination string `json:"Destination,omitempty"`
  DestinationType string `json:"DestinationType,omitempty"`
}

// Delegation The assignment of a control set to a delegate for review.
type Delegation struct {
  AssessmentId string `json:"AssessmentId,omitempty"`
  AssessmentName string `json:"AssessmentName,omitempty"`
  Comment string `json:"Comment,omitempty"`
  ControlSetId string `json:"ControlSetId,omitempty"`
  CreatedBy string `json:"CreatedBy,omitempty"`
  CreationTime float64 `json:"CreationTime,omitempty"`
  Id string `json:"Id,omitempty"`
  LastUpdated float64 `json:"LastUpdated,omitempty"`
  RoleArn string `json:"RoleArn,omitempty"`
  RoleType string `json:"RoleType,omitempty"`
  Status string `json:"Status,omitempty"`
}

// Resource An entity that defines the scope of audit evidence collected by AWS Audit Manager.
type Resource struct {
  Arn string `json:"Arn,omitempty"`
  AssessmentId string `json:"AssessmentId,omitempty"`
  AssessmentReportsDestination *AssessmentReportsDestination `json:"AssessmentReportsDestination,omitempty"`
  AwsAccount *AWSAccount `json:"AwsAccount,omitempty"`
  CreationTime float64 `json:"CreationTime,omitempty"`

  // The list of delegations.
  Delegations []*Delegation `json:"Delegations,omitempty"`
  Description string `json:"Description,omitempty"`
  FrameworkId string `json:"FrameworkId,omitempty"`
  Name string `json:"Name,omitempty"`

  // The list of roles for the specified assessment.
  Roles []*Role `json:"Roles,omitempty"`
  Scope *Scope `json:"Scope,omitempty"`
  Status string `json:"Status,omitempty"`

  // The tags associated with the assessment.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Role The wrapper that contains AWS Audit Manager role information, such as the role type and IAM ARN.
type Role struct {
  RoleArn string `json:"RoleArn,omitempty"`
  RoleType string `json:"RoleType,omitempty"`
}

// Scope The wrapper that contains the AWS accounts and AWS services in scope for the assessment.
type Scope struct {

  // The AWS accounts included in scope.
  AwsAccounts []*AWSAccount `json:"AwsAccounts,omitempty"`

  // The AWS services included in scope.
  AwsServices []*AWSService `json:"AwsServices,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Value string `json:"Value"`
}

func (strct *AWSAccount) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "EmailAddress" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EmailAddress\": ")
	if tmp, err := json.Marshal(strct.EmailAddress); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AWSAccount) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "EmailAddress":
            if err := json.Unmarshal([]byte(v), &strct.EmailAddress); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *AWSService) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ServiceName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServiceName\": ")
	if tmp, err := json.Marshal(strct.ServiceName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AWSService) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ServiceName":
            if err := json.Unmarshal([]byte(v), &strct.ServiceName); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *AssessmentReportsDestination) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Destination" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Destination\": ")
	if tmp, err := json.Marshal(strct.Destination); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DestinationType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DestinationType\": ")
	if tmp, err := json.Marshal(strct.DestinationType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AssessmentReportsDestination) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Destination":
            if err := json.Unmarshal([]byte(v), &strct.Destination); err != nil {
                return err
             }
        case "DestinationType":
            if err := json.Unmarshal([]byte(v), &strct.DestinationType); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Delegation) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AssessmentId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AssessmentId\": ")
	if tmp, err := json.Marshal(strct.AssessmentId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AssessmentName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AssessmentName\": ")
	if tmp, err := json.Marshal(strct.AssessmentName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Comment" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Comment\": ")
	if tmp, err := json.Marshal(strct.Comment); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ControlSetId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ControlSetId\": ")
	if tmp, err := json.Marshal(strct.ControlSetId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CreatedBy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreatedBy\": ")
	if tmp, err := json.Marshal(strct.CreatedBy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CreationTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreationTime\": ")
	if tmp, err := json.Marshal(strct.CreationTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LastUpdated" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LastUpdated\": ")
	if tmp, err := json.Marshal(strct.LastUpdated); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RoleType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleType\": ")
	if tmp, err := json.Marshal(strct.RoleType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Delegation) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AssessmentId":
            if err := json.Unmarshal([]byte(v), &strct.AssessmentId); err != nil {
                return err
             }
        case "AssessmentName":
            if err := json.Unmarshal([]byte(v), &strct.AssessmentName); err != nil {
                return err
             }
        case "Comment":
            if err := json.Unmarshal([]byte(v), &strct.Comment); err != nil {
                return err
             }
        case "ControlSetId":
            if err := json.Unmarshal([]byte(v), &strct.ControlSetId); err != nil {
                return err
             }
        case "CreatedBy":
            if err := json.Unmarshal([]byte(v), &strct.CreatedBy); err != nil {
                return err
             }
        case "CreationTime":
            if err := json.Unmarshal([]byte(v), &strct.CreationTime); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "LastUpdated":
            if err := json.Unmarshal([]byte(v), &strct.LastUpdated); err != nil {
                return err
             }
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
        case "RoleType":
            if err := json.Unmarshal([]byte(v), &strct.RoleType); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AssessmentId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AssessmentId\": ")
	if tmp, err := json.Marshal(strct.AssessmentId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AssessmentReportsDestination" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AssessmentReportsDestination\": ")
	if tmp, err := json.Marshal(strct.AssessmentReportsDestination); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AwsAccount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AwsAccount\": ")
	if tmp, err := json.Marshal(strct.AwsAccount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CreationTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreationTime\": ")
	if tmp, err := json.Marshal(strct.CreationTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Delegations" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Delegations\": ")
	if tmp, err := json.Marshal(strct.Delegations); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FrameworkId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FrameworkId\": ")
	if tmp, err := json.Marshal(strct.FrameworkId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Roles" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Roles\": ")
	if tmp, err := json.Marshal(strct.Roles); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Scope" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Scope\": ")
	if tmp, err := json.Marshal(strct.Scope); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "AssessmentId":
            if err := json.Unmarshal([]byte(v), &strct.AssessmentId); err != nil {
                return err
             }
        case "AssessmentReportsDestination":
            if err := json.Unmarshal([]byte(v), &strct.AssessmentReportsDestination); err != nil {
                return err
             }
        case "AwsAccount":
            if err := json.Unmarshal([]byte(v), &strct.AwsAccount); err != nil {
                return err
             }
        case "CreationTime":
            if err := json.Unmarshal([]byte(v), &strct.CreationTime); err != nil {
                return err
             }
        case "Delegations":
            if err := json.Unmarshal([]byte(v), &strct.Delegations); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "FrameworkId":
            if err := json.Unmarshal([]byte(v), &strct.FrameworkId); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "Roles":
            if err := json.Unmarshal([]byte(v), &strct.Roles); err != nil {
                return err
             }
        case "Scope":
            if err := json.Unmarshal([]byte(v), &strct.Scope); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Role) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RoleType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleType\": ")
	if tmp, err := json.Marshal(strct.RoleType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Role) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
        case "RoleType":
            if err := json.Unmarshal([]byte(v), &strct.RoleType); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Scope) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AwsAccounts" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AwsAccounts\": ")
	if tmp, err := json.Marshal(strct.AwsAccounts); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AwsServices" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AwsServices\": ")
	if tmp, err := json.Marshal(strct.AwsServices); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Scope) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AwsAccounts":
            if err := json.Unmarshal([]byte(v), &strct.AwsAccounts); err != nil {
                return err
             }
        case "AwsServices":
            if err := json.Unmarshal([]byte(v), &strct.AwsServices); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
