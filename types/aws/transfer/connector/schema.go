// Code generated by schema-generate. DO NOT EDIT.

package connector

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// As2Config Configuration for an AS2 connector.
type As2Config struct {

  // Compression setting for this AS2 connector configuration.
  Compression string `json:"Compression,omitempty"`

  // Encryption algorithm for this AS2 connector configuration.
  EncryptionAlgorithm string `json:"EncryptionAlgorithm,omitempty"`

  // A unique identifier for the local profile.
  LocalProfileId string `json:"LocalProfileId,omitempty"`

  // MDN Response setting for this AS2 connector configuration.
  MdnResponse string `json:"MdnResponse,omitempty"`

  // MDN Signing algorithm for this AS2 connector configuration.
  MdnSigningAlgorithm string `json:"MdnSigningAlgorithm,omitempty"`

  // The message subject for this AS2 connector configuration.
  MessageSubject string `json:"MessageSubject,omitempty"`

  // A unique identifier for the partner profile.
  PartnerProfileId string `json:"PartnerProfileId,omitempty"`

  // Signing algorithm for this AS2 connector configuration.
  SigningAlgorithm string `json:"SigningAlgorithm,omitempty"`
}

// Resource Resource Type definition for AWS::Transfer::Connector
type Resource struct {

  // Specifies the access role for the connector.
  AccessRole string `json:"AccessRole"`

  // Specifies the unique Amazon Resource Name (ARN) for the workflow.
  Arn string `json:"Arn,omitempty"`

  // Configuration for an AS2 connector.
  As2Config *As2Config `json:"As2Config"`

  // A unique identifier for the connector.
  ConnectorId string `json:"ConnectorId,omitempty"`

  // Specifies the logging role for the connector.
  LoggingRole string `json:"LoggingRole,omitempty"`

  // Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
  Tags []*Tag `json:"Tags,omitempty"`

  // URL for Connector
  Url string `json:"Url"`
}

// Tag Creates a key-value pair for a specific resource.
type Tag struct {

  // The name assigned to the tag that you create.
  Key string `json:"Key"`

  // Contains one or more values that you assigned to the key name you create.
  Value string `json:"Value"`
}

func (strct *As2Config) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Compression" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Compression\": ")
	if tmp, err := json.Marshal(strct.Compression); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EncryptionAlgorithm" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EncryptionAlgorithm\": ")
	if tmp, err := json.Marshal(strct.EncryptionAlgorithm); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LocalProfileId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocalProfileId\": ")
	if tmp, err := json.Marshal(strct.LocalProfileId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MdnResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MdnResponse\": ")
	if tmp, err := json.Marshal(strct.MdnResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MdnSigningAlgorithm" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MdnSigningAlgorithm\": ")
	if tmp, err := json.Marshal(strct.MdnSigningAlgorithm); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MessageSubject" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MessageSubject\": ")
	if tmp, err := json.Marshal(strct.MessageSubject); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PartnerProfileId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PartnerProfileId\": ")
	if tmp, err := json.Marshal(strct.PartnerProfileId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SigningAlgorithm" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SigningAlgorithm\": ")
	if tmp, err := json.Marshal(strct.SigningAlgorithm); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *As2Config) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Compression":
            if err := json.Unmarshal([]byte(v), &strct.Compression); err != nil {
                return err
             }
        case "EncryptionAlgorithm":
            if err := json.Unmarshal([]byte(v), &strct.EncryptionAlgorithm); err != nil {
                return err
             }
        case "LocalProfileId":
            if err := json.Unmarshal([]byte(v), &strct.LocalProfileId); err != nil {
                return err
             }
        case "MdnResponse":
            if err := json.Unmarshal([]byte(v), &strct.MdnResponse); err != nil {
                return err
             }
        case "MdnSigningAlgorithm":
            if err := json.Unmarshal([]byte(v), &strct.MdnSigningAlgorithm); err != nil {
                return err
             }
        case "MessageSubject":
            if err := json.Unmarshal([]byte(v), &strct.MessageSubject); err != nil {
                return err
             }
        case "PartnerProfileId":
            if err := json.Unmarshal([]byte(v), &strct.PartnerProfileId); err != nil {
                return err
             }
        case "SigningAlgorithm":
            if err := json.Unmarshal([]byte(v), &strct.SigningAlgorithm); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AccessRole" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AccessRole" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AccessRole\": ")
	if tmp, err := json.Marshal(strct.AccessRole); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "As2Config" field is required
    if strct.As2Config == nil {
        return nil, errors.New("As2Config is a required field")
    }
    // Marshal the "As2Config" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"As2Config\": ")
	if tmp, err := json.Marshal(strct.As2Config); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ConnectorId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConnectorId\": ")
	if tmp, err := json.Marshal(strct.ConnectorId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoggingRole" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoggingRole\": ")
	if tmp, err := json.Marshal(strct.LoggingRole); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Url" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AccessRoleReceived := false
    As2ConfigReceived := false
    UrlReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AccessRole":
            if err := json.Unmarshal([]byte(v), &strct.AccessRole); err != nil {
                return err
             }
            AccessRoleReceived = true
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "As2Config":
            if err := json.Unmarshal([]byte(v), &strct.As2Config); err != nil {
                return err
             }
            As2ConfigReceived = true
        case "ConnectorId":
            if err := json.Unmarshal([]byte(v), &strct.ConnectorId); err != nil {
                return err
             }
        case "LoggingRole":
            if err := json.Unmarshal([]byte(v), &strct.LoggingRole); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "Url":
            if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
                return err
             }
            UrlReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AccessRole (a required property) was received
    if !AccessRoleReceived {
        return errors.New("\"AccessRole\" is required but was not present")
    }
    // check if As2Config (a required property) was received
    if !As2ConfigReceived {
        return errors.New("\"As2Config\" is required but was not present")
    }
    // check if Url (a required property) was received
    if !UrlReceived {
        return errors.New("\"Url\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
