// Code generated by schema-generate. DO NOT EDIT.

package certificate

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Resource Resource Type definition for AWS::Transfer::Certificate
type Resource struct {

  // Specifies the active date for the certificate.
  ActiveDate string `json:"ActiveDate,omitempty"`

  // Specifies the unique Amazon Resource Name (ARN) for the agreement.
  Arn string `json:"Arn,omitempty"`

  // Specifies the certificate body to be imported.
  Certificate string `json:"Certificate"`

  // Specifies the certificate chain to be imported.
  CertificateChain string `json:"CertificateChain,omitempty"`

  // A unique identifier for the certificate.
  CertificateId string `json:"CertificateId,omitempty"`

  // A textual description for the certificate.
  Description string `json:"Description,omitempty"`

  // Specifies the inactive date for the certificate.
  InactiveDate string `json:"InactiveDate,omitempty"`

  // Specifies the not after date for the certificate.
  NotAfterDate string `json:"NotAfterDate,omitempty"`

  // Specifies the not before date for the certificate.
  NotBeforeDate string `json:"NotBeforeDate,omitempty"`

  // Specifies the private key for the certificate.
  PrivateKey string `json:"PrivateKey,omitempty"`

  // Specifies Certificate's serial.
  Serial string `json:"Serial,omitempty"`

  // A status description for the certificate.
  Status string `json:"Status,omitempty"`

  // Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.
  Tags []*Tag `json:"Tags,omitempty"`

  // Describing the type of certificate. With or without a private key.
  Type string `json:"Type,omitempty"`

  // Specifies the usage type for the certificate.
  Usage string `json:"Usage"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ActiveDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ActiveDate\": ")
	if tmp, err := json.Marshal(strct.ActiveDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Certificate" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Certificate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Certificate\": ")
	if tmp, err := json.Marshal(strct.Certificate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CertificateChain" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CertificateChain\": ")
	if tmp, err := json.Marshal(strct.CertificateChain); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CertificateId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CertificateId\": ")
	if tmp, err := json.Marshal(strct.CertificateId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InactiveDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InactiveDate\": ")
	if tmp, err := json.Marshal(strct.InactiveDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NotAfterDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NotAfterDate\": ")
	if tmp, err := json.Marshal(strct.NotAfterDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NotBeforeDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NotBeforeDate\": ")
	if tmp, err := json.Marshal(strct.NotBeforeDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PrivateKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PrivateKey\": ")
	if tmp, err := json.Marshal(strct.PrivateKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Serial" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Serial\": ")
	if tmp, err := json.Marshal(strct.Serial); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Usage" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Usage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Usage\": ")
	if tmp, err := json.Marshal(strct.Usage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    CertificateReceived := false
    UsageReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ActiveDate":
            if err := json.Unmarshal([]byte(v), &strct.ActiveDate); err != nil {
                return err
             }
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Certificate":
            if err := json.Unmarshal([]byte(v), &strct.Certificate); err != nil {
                return err
             }
            CertificateReceived = true
        case "CertificateChain":
            if err := json.Unmarshal([]byte(v), &strct.CertificateChain); err != nil {
                return err
             }
        case "CertificateId":
            if err := json.Unmarshal([]byte(v), &strct.CertificateId); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "InactiveDate":
            if err := json.Unmarshal([]byte(v), &strct.InactiveDate); err != nil {
                return err
             }
        case "NotAfterDate":
            if err := json.Unmarshal([]byte(v), &strct.NotAfterDate); err != nil {
                return err
             }
        case "NotBeforeDate":
            if err := json.Unmarshal([]byte(v), &strct.NotBeforeDate); err != nil {
                return err
             }
        case "PrivateKey":
            if err := json.Unmarshal([]byte(v), &strct.PrivateKey); err != nil {
                return err
             }
        case "Serial":
            if err := json.Unmarshal([]byte(v), &strct.Serial); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "Type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        case "Usage":
            if err := json.Unmarshal([]byte(v), &strct.Usage); err != nil {
                return err
             }
            UsageReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Certificate (a required property) was received
    if !CertificateReceived {
        return errors.New("\"Certificate\" is required but was not present")
    }
    // check if Usage (a required property) was received
    if !UsageReceived {
        return errors.New("\"Usage\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
