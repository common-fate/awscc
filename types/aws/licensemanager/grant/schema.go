// Code generated by schema-generate. DO NOT EDIT.

package grant

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// Resource An example resource schema demonstrating some basic constructs and validation rules.
type Resource struct {
  AllowedOperations []string `json:"AllowedOperations,omitempty"`

  // Arn of the grant.
  GrantArn string `json:"GrantArn,omitempty"`

  // Name for the created Grant.
  GrantName string `json:"GrantName,omitempty"`

  // Home region for the created grant.
  HomeRegion string `json:"HomeRegion,omitempty"`

  // License Arn for the grant.
  LicenseArn string `json:"LicenseArn,omitempty"`
  Principals []string `json:"Principals,omitempty"`
  Status string `json:"Status,omitempty"`

  // The version of the grant.
  Version string `json:"Version,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllowedOperations" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowedOperations\": ")
	if tmp, err := json.Marshal(strct.AllowedOperations); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "GrantArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"GrantArn\": ")
	if tmp, err := json.Marshal(strct.GrantArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "GrantName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"GrantName\": ")
	if tmp, err := json.Marshal(strct.GrantName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HomeRegion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HomeRegion\": ")
	if tmp, err := json.Marshal(strct.HomeRegion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LicenseArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LicenseArn\": ")
	if tmp, err := json.Marshal(strct.LicenseArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Principals" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Principals\": ")
	if tmp, err := json.Marshal(strct.Principals); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Version" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Version\": ")
	if tmp, err := json.Marshal(strct.Version); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllowedOperations":
            if err := json.Unmarshal([]byte(v), &strct.AllowedOperations); err != nil {
                return err
             }
        case "GrantArn":
            if err := json.Unmarshal([]byte(v), &strct.GrantArn); err != nil {
                return err
             }
        case "GrantName":
            if err := json.Unmarshal([]byte(v), &strct.GrantName); err != nil {
                return err
             }
        case "HomeRegion":
            if err := json.Unmarshal([]byte(v), &strct.HomeRegion); err != nil {
                return err
             }
        case "LicenseArn":
            if err := json.Unmarshal([]byte(v), &strct.LicenseArn); err != nil {
                return err
             }
        case "Principals":
            if err := json.Unmarshal([]byte(v), &strct.Principals); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "Version":
            if err := json.Unmarshal([]byte(v), &strct.Version); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
