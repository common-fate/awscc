// Code generated by schema-generate. DO NOT EDIT.

package repository

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// PermissionsPolicyDocument The access control resource policy on the provided repository.
type PermissionsPolicyDocument struct {
}

// Resource The resource schema to create a CodeArtifact repository.
type Resource struct {

  // The ARN of the repository.
  Arn string `json:"Arn,omitempty"`

  // A text description of the repository.
  Description string `json:"Description,omitempty"`

  // The name of the domain that contains the repository.
  DomainName string `json:"DomainName"`

  // The 12-digit account ID of the AWS account that owns the domain.
  DomainOwner string `json:"DomainOwner,omitempty"`

  // A list of external connections associated with the repository.
  ExternalConnections []string `json:"ExternalConnections,omitempty"`

  // The name of the repository. This is used for GetAtt
  Name string `json:"Name,omitempty"`

  // The access control resource policy on the provided repository.
  PermissionsPolicyDocument *PermissionsPolicyDocument `json:"PermissionsPolicyDocument,omitempty"`

  // The name of the repository.
  RepositoryName string `json:"RepositoryName"`

  // An array of key-value pairs to apply to this resource.
  Tags []*Tag `json:"Tags,omitempty"`

  // A list of upstream repositories associated with the repository.
  Upstreams []string `json:"Upstreams,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DomainName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DomainName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DomainName\": ")
	if tmp, err := json.Marshal(strct.DomainName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DomainOwner" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DomainOwner\": ")
	if tmp, err := json.Marshal(strct.DomainOwner); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ExternalConnections" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ExternalConnections\": ")
	if tmp, err := json.Marshal(strct.ExternalConnections); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PermissionsPolicyDocument" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PermissionsPolicyDocument\": ")
	if tmp, err := json.Marshal(strct.PermissionsPolicyDocument); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RepositoryName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RepositoryName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RepositoryName\": ")
	if tmp, err := json.Marshal(strct.RepositoryName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Upstreams" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Upstreams\": ")
	if tmp, err := json.Marshal(strct.Upstreams); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DomainNameReceived := false
    RepositoryNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "DomainName":
            if err := json.Unmarshal([]byte(v), &strct.DomainName); err != nil {
                return err
             }
            DomainNameReceived = true
        case "DomainOwner":
            if err := json.Unmarshal([]byte(v), &strct.DomainOwner); err != nil {
                return err
             }
        case "ExternalConnections":
            if err := json.Unmarshal([]byte(v), &strct.ExternalConnections); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "PermissionsPolicyDocument":
            if err := json.Unmarshal([]byte(v), &strct.PermissionsPolicyDocument); err != nil {
                return err
             }
        case "RepositoryName":
            if err := json.Unmarshal([]byte(v), &strct.RepositoryName); err != nil {
                return err
             }
            RepositoryNameReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "Upstreams":
            if err := json.Unmarshal([]byte(v), &strct.Upstreams); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DomainName (a required property) was received
    if !DomainNameReceived {
        return errors.New("\"DomainName\" is required but was not present")
    }
    // check if RepositoryName (a required property) was received
    if !RepositoryNameReceived {
        return errors.New("\"RepositoryName\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
