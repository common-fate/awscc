// Code generated by schema-generate. DO NOT EDIT.

package metricfilter

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// Dimension the key-value pairs that further define a metric.
type Dimension struct {

  // The key of the dimension. Maximum length of 255.
  Key string `json:"Key"`

  // The value of the dimension. Maximum length of 255.
  Value string `json:"Value"`
}

// MetricTransformation 
type MetricTransformation struct {

  // The value to emit when a filter pattern does not match a log event. This value can be null.
  DefaultValue float64 `json:"DefaultValue,omitempty"`

  // Dimensions are the key-value pairs that further define a metric
  Dimensions []*Dimension `json:"Dimensions,omitempty"`

  // The name of the CloudWatch metric. Metric name must be in ASCII format.
  MetricName string `json:"MetricName"`

  // The namespace of the CloudWatch metric.
  MetricNamespace string `json:"MetricNamespace"`

  // The value to publish to the CloudWatch metric when a filter pattern matches a log event.
  MetricValue string `json:"MetricValue"`

  // The unit to assign to the metric. If you omit this, the unit is set as None.
  Unit string `json:"Unit,omitempty"`
}

// Resource Specifies a metric filter that describes how CloudWatch Logs extracts information from logs and transforms it into Amazon CloudWatch metrics.
type Resource struct {

  // A name for the metric filter.
  FilterName string `json:"FilterName,omitempty"`

  // Pattern that Logs follows to interpret each entry in a log.
  FilterPattern string `json:"FilterPattern"`

  // Existing log group that you want to associate with this filter.
  LogGroupName string `json:"LogGroupName"`

  // A collection of information that defines how metric data gets emitted.
  MetricTransformations []*MetricTransformation `json:"MetricTransformations"`
}

func (strct *Dimension) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Dimension) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *MetricTransformation) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DefaultValue" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultValue\": ")
	if tmp, err := json.Marshal(strct.DefaultValue); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Dimensions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Dimensions\": ")
	if tmp, err := json.Marshal(strct.Dimensions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MetricName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MetricName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MetricName\": ")
	if tmp, err := json.Marshal(strct.MetricName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MetricNamespace" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MetricNamespace" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MetricNamespace\": ")
	if tmp, err := json.Marshal(strct.MetricNamespace); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MetricValue" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MetricValue" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MetricValue\": ")
	if tmp, err := json.Marshal(strct.MetricValue); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Unit" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Unit\": ")
	if tmp, err := json.Marshal(strct.Unit); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MetricTransformation) UnmarshalJSON(b []byte) error {
    MetricNameReceived := false
    MetricNamespaceReceived := false
    MetricValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DefaultValue":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValue); err != nil {
                return err
             }
        case "Dimensions":
            if err := json.Unmarshal([]byte(v), &strct.Dimensions); err != nil {
                return err
             }
        case "MetricName":
            if err := json.Unmarshal([]byte(v), &strct.MetricName); err != nil {
                return err
             }
            MetricNameReceived = true
        case "MetricNamespace":
            if err := json.Unmarshal([]byte(v), &strct.MetricNamespace); err != nil {
                return err
             }
            MetricNamespaceReceived = true
        case "MetricValue":
            if err := json.Unmarshal([]byte(v), &strct.MetricValue); err != nil {
                return err
             }
            MetricValueReceived = true
        case "Unit":
            if err := json.Unmarshal([]byte(v), &strct.Unit); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if MetricName (a required property) was received
    if !MetricNameReceived {
        return errors.New("\"MetricName\" is required but was not present")
    }
    // check if MetricNamespace (a required property) was received
    if !MetricNamespaceReceived {
        return errors.New("\"MetricNamespace\" is required but was not present")
    }
    // check if MetricValue (a required property) was received
    if !MetricValueReceived {
        return errors.New("\"MetricValue\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "FilterName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FilterName\": ")
	if tmp, err := json.Marshal(strct.FilterName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "FilterPattern" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "FilterPattern" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FilterPattern\": ")
	if tmp, err := json.Marshal(strct.FilterPattern); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "LogGroupName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LogGroupName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LogGroupName\": ")
	if tmp, err := json.Marshal(strct.LogGroupName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MetricTransformations" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MetricTransformations" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MetricTransformations\": ")
	if tmp, err := json.Marshal(strct.MetricTransformations); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    FilterPatternReceived := false
    LogGroupNameReceived := false
    MetricTransformationsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "FilterName":
            if err := json.Unmarshal([]byte(v), &strct.FilterName); err != nil {
                return err
             }
        case "FilterPattern":
            if err := json.Unmarshal([]byte(v), &strct.FilterPattern); err != nil {
                return err
             }
            FilterPatternReceived = true
        case "LogGroupName":
            if err := json.Unmarshal([]byte(v), &strct.LogGroupName); err != nil {
                return err
             }
            LogGroupNameReceived = true
        case "MetricTransformations":
            if err := json.Unmarshal([]byte(v), &strct.MetricTransformations); err != nil {
                return err
             }
            MetricTransformationsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if FilterPattern (a required property) was received
    if !FilterPatternReceived {
        return errors.New("\"FilterPattern\" is required but was not present")
    }
    // check if LogGroupName (a required property) was received
    if !LogGroupNameReceived {
        return errors.New("\"LogGroupName\" is required but was not present")
    }
    // check if MetricTransformations (a required property) was received
    if !MetricTransformationsReceived {
        return errors.New("\"MetricTransformations\" is required but was not present")
    }
    return nil
}
