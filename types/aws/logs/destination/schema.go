// Code generated by schema-generate. DO NOT EDIT.

package destination

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource The AWS::Logs::Destination resource specifies a CloudWatch Logs destination. A destination encapsulates a physical resource (such as an Amazon Kinesis data stream) and enables you to subscribe that resource to a stream of log events.
type Resource struct {
  Arn string `json:"Arn,omitempty"`

  // The name of the destination resource
  DestinationName string `json:"DestinationName"`

  // An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
  DestinationPolicy string `json:"DestinationPolicy,omitempty"`

  // The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource
  RoleArn string `json:"RoleArn"`

  // The ARN of the physical target where the log events are delivered (for example, a Kinesis stream)
  TargetArn string `json:"TargetArn"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DestinationName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DestinationName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DestinationName\": ")
	if tmp, err := json.Marshal(strct.DestinationName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DestinationPolicy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DestinationPolicy\": ")
	if tmp, err := json.Marshal(strct.DestinationPolicy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TargetArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TargetArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TargetArn\": ")
	if tmp, err := json.Marshal(strct.TargetArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DestinationNameReceived := false
    RoleArnReceived := false
    TargetArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "DestinationName":
            if err := json.Unmarshal([]byte(v), &strct.DestinationName); err != nil {
                return err
             }
            DestinationNameReceived = true
        case "DestinationPolicy":
            if err := json.Unmarshal([]byte(v), &strct.DestinationPolicy); err != nil {
                return err
             }
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
            RoleArnReceived = true
        case "TargetArn":
            if err := json.Unmarshal([]byte(v), &strct.TargetArn); err != nil {
                return err
             }
            TargetArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DestinationName (a required property) was received
    if !DestinationNameReceived {
        return errors.New("\"DestinationName\" is required but was not present")
    }
    // check if RoleArn (a required property) was received
    if !RoleArnReceived {
        return errors.New("\"RoleArn\" is required but was not present")
    }
    // check if TargetArn (a required property) was received
    if !TargetArnReceived {
        return errors.New("\"TargetArn\" is required but was not present")
    }
    return nil
}
