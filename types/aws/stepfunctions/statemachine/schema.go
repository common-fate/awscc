// Code generated by schema-generate. DO NOT EDIT.

package statemachine

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// CloudWatchLogsLogGroup 
type CloudWatchLogsLogGroup struct {
  LogGroupArn string `json:"LogGroupArn,omitempty"`
}

// Definition 
type Definition struct {
}

// DefinitionSubstitutions 
type DefinitionSubstitutions struct {
}

// LogDestination 
type LogDestination struct {
  CloudWatchLogsLogGroup *CloudWatchLogsLogGroup `json:"CloudWatchLogsLogGroup,omitempty"`
}

// LoggingConfiguration 
type LoggingConfiguration struct {
  Destinations []*LogDestination `json:"Destinations,omitempty"`
  IncludeExecutionData bool `json:"IncludeExecutionData,omitempty"`
  Level string `json:"Level,omitempty"`
}

// Resource Resource schema for StateMachine
type Resource struct {
  Arn string `json:"Arn,omitempty"`
  Definition *Definition `json:"Definition,omitempty"`
  DefinitionS3Location *S3Location `json:"DefinitionS3Location,omitempty"`
  DefinitionString string `json:"DefinitionString,omitempty"`
  DefinitionSubstitutions *DefinitionSubstitutions `json:"DefinitionSubstitutions,omitempty"`
  LoggingConfiguration *LoggingConfiguration `json:"LoggingConfiguration,omitempty"`
  Name string `json:"Name,omitempty"`
  RoleArn string `json:"RoleArn"`
  StateMachineName string `json:"StateMachineName,omitempty"`
  StateMachineType string `json:"StateMachineType,omitempty"`
  Tags []*TagsEntry `json:"Tags,omitempty"`
  TracingConfiguration *TracingConfiguration `json:"TracingConfiguration,omitempty"`
}

// S3Location 
type S3Location struct {
  Bucket string `json:"Bucket"`
  Key string `json:"Key"`
  Version string `json:"Version,omitempty"`
}

// TagsEntry 
type TagsEntry struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

// TracingConfiguration 
type TracingConfiguration struct {
  Enabled bool `json:"Enabled,omitempty"`
}

func (strct *CloudWatchLogsLogGroup) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "LogGroupArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LogGroupArn\": ")
	if tmp, err := json.Marshal(strct.LogGroupArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CloudWatchLogsLogGroup) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "LogGroupArn":
            if err := json.Unmarshal([]byte(v), &strct.LogGroupArn); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *DefinitionSubstitutions) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DefinitionSubstitutions) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *LogDestination) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CloudWatchLogsLogGroup" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CloudWatchLogsLogGroup\": ")
	if tmp, err := json.Marshal(strct.CloudWatchLogsLogGroup); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *LogDestination) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CloudWatchLogsLogGroup":
            if err := json.Unmarshal([]byte(v), &strct.CloudWatchLogsLogGroup); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *LoggingConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Destinations" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Destinations\": ")
	if tmp, err := json.Marshal(strct.Destinations); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IncludeExecutionData" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IncludeExecutionData\": ")
	if tmp, err := json.Marshal(strct.IncludeExecutionData); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Level" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Level\": ")
	if tmp, err := json.Marshal(strct.Level); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *LoggingConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Destinations":
            if err := json.Unmarshal([]byte(v), &strct.Destinations); err != nil {
                return err
             }
        case "IncludeExecutionData":
            if err := json.Unmarshal([]byte(v), &strct.IncludeExecutionData); err != nil {
                return err
             }
        case "Level":
            if err := json.Unmarshal([]byte(v), &strct.Level); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Definition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Definition\": ")
	if tmp, err := json.Marshal(strct.Definition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DefinitionS3Location" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefinitionS3Location\": ")
	if tmp, err := json.Marshal(strct.DefinitionS3Location); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DefinitionString" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefinitionString\": ")
	if tmp, err := json.Marshal(strct.DefinitionString); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DefinitionSubstitutions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefinitionSubstitutions\": ")
	if tmp, err := json.Marshal(strct.DefinitionSubstitutions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoggingConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoggingConfiguration\": ")
	if tmp, err := json.Marshal(strct.LoggingConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StateMachineName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StateMachineName\": ")
	if tmp, err := json.Marshal(strct.StateMachineName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StateMachineType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StateMachineType\": ")
	if tmp, err := json.Marshal(strct.StateMachineType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TracingConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TracingConfiguration\": ")
	if tmp, err := json.Marshal(strct.TracingConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    RoleArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Definition":
            if err := json.Unmarshal([]byte(v), &strct.Definition); err != nil {
                return err
             }
        case "DefinitionS3Location":
            if err := json.Unmarshal([]byte(v), &strct.DefinitionS3Location); err != nil {
                return err
             }
        case "DefinitionString":
            if err := json.Unmarshal([]byte(v), &strct.DefinitionString); err != nil {
                return err
             }
        case "DefinitionSubstitutions":
            if err := json.Unmarshal([]byte(v), &strct.DefinitionSubstitutions); err != nil {
                return err
             }
        case "LoggingConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.LoggingConfiguration); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
            RoleArnReceived = true
        case "StateMachineName":
            if err := json.Unmarshal([]byte(v), &strct.StateMachineName); err != nil {
                return err
             }
        case "StateMachineType":
            if err := json.Unmarshal([]byte(v), &strct.StateMachineType); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TracingConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.TracingConfiguration); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if RoleArn (a required property) was received
    if !RoleArnReceived {
        return errors.New("\"RoleArn\" is required but was not present")
    }
    return nil
}

func (strct *S3Location) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Bucket" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Bucket" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Bucket\": ")
	if tmp, err := json.Marshal(strct.Bucket); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Version" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Version\": ")
	if tmp, err := json.Marshal(strct.Version); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *S3Location) UnmarshalJSON(b []byte) error {
    BucketReceived := false
    KeyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Bucket":
            if err := json.Unmarshal([]byte(v), &strct.Bucket); err != nil {
                return err
             }
            BucketReceived = true
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Version":
            if err := json.Unmarshal([]byte(v), &strct.Version); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Bucket (a required property) was received
    if !BucketReceived {
        return errors.New("\"Bucket\" is required but was not present")
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    return nil
}

func (strct *TagsEntry) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TagsEntry) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *TracingConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Enabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enabled\": ")
	if tmp, err := json.Marshal(strct.Enabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TracingConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Enabled":
            if err := json.Unmarshal([]byte(v), &strct.Enabled); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
