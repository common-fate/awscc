// Code generated by schema-generate. DO NOT EDIT.

package firewall

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource type definition for AWS::NetworkFirewall::Firewall
type Resource struct {
  DeleteProtection bool `json:"DeleteProtection,omitempty"`
  Description string `json:"Description,omitempty"`
  EndpointIds []string `json:"EndpointIds,omitempty"`
  FirewallArn string `json:"FirewallArn,omitempty"`
  FirewallId string `json:"FirewallId,omitempty"`
  FirewallName string `json:"FirewallName"`
  FirewallPolicyArn string `json:"FirewallPolicyArn"`
  FirewallPolicyChangeProtection bool `json:"FirewallPolicyChangeProtection,omitempty"`
  SubnetChangeProtection bool `json:"SubnetChangeProtection,omitempty"`
  SubnetMappings []*SubnetMapping `json:"SubnetMappings"`
  Tags []*Tag `json:"Tags,omitempty"`
  VpcId string `json:"VpcId"`
}

// SubnetMapping 
type SubnetMapping struct {

  // A IPAddressType
  IPAddressType string `json:"IPAddressType,omitempty"`

  // A SubnetId.
  SubnetId string `json:"SubnetId"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DeleteProtection" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeleteProtection\": ")
	if tmp, err := json.Marshal(strct.DeleteProtection); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EndpointIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EndpointIds\": ")
	if tmp, err := json.Marshal(strct.EndpointIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FirewallArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FirewallArn\": ")
	if tmp, err := json.Marshal(strct.FirewallArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FirewallId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FirewallId\": ")
	if tmp, err := json.Marshal(strct.FirewallId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "FirewallName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "FirewallName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FirewallName\": ")
	if tmp, err := json.Marshal(strct.FirewallName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "FirewallPolicyArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "FirewallPolicyArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FirewallPolicyArn\": ")
	if tmp, err := json.Marshal(strct.FirewallPolicyArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FirewallPolicyChangeProtection" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FirewallPolicyChangeProtection\": ")
	if tmp, err := json.Marshal(strct.FirewallPolicyChangeProtection); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SubnetChangeProtection" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubnetChangeProtection\": ")
	if tmp, err := json.Marshal(strct.SubnetChangeProtection); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SubnetMappings" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SubnetMappings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubnetMappings\": ")
	if tmp, err := json.Marshal(strct.SubnetMappings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "VpcId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "VpcId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcId\": ")
	if tmp, err := json.Marshal(strct.VpcId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    FirewallNameReceived := false
    FirewallPolicyArnReceived := false
    SubnetMappingsReceived := false
    VpcIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DeleteProtection":
            if err := json.Unmarshal([]byte(v), &strct.DeleteProtection); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "EndpointIds":
            if err := json.Unmarshal([]byte(v), &strct.EndpointIds); err != nil {
                return err
             }
        case "FirewallArn":
            if err := json.Unmarshal([]byte(v), &strct.FirewallArn); err != nil {
                return err
             }
        case "FirewallId":
            if err := json.Unmarshal([]byte(v), &strct.FirewallId); err != nil {
                return err
             }
        case "FirewallName":
            if err := json.Unmarshal([]byte(v), &strct.FirewallName); err != nil {
                return err
             }
            FirewallNameReceived = true
        case "FirewallPolicyArn":
            if err := json.Unmarshal([]byte(v), &strct.FirewallPolicyArn); err != nil {
                return err
             }
            FirewallPolicyArnReceived = true
        case "FirewallPolicyChangeProtection":
            if err := json.Unmarshal([]byte(v), &strct.FirewallPolicyChangeProtection); err != nil {
                return err
             }
        case "SubnetChangeProtection":
            if err := json.Unmarshal([]byte(v), &strct.SubnetChangeProtection); err != nil {
                return err
             }
        case "SubnetMappings":
            if err := json.Unmarshal([]byte(v), &strct.SubnetMappings); err != nil {
                return err
             }
            SubnetMappingsReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "VpcId":
            if err := json.Unmarshal([]byte(v), &strct.VpcId); err != nil {
                return err
             }
            VpcIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if FirewallName (a required property) was received
    if !FirewallNameReceived {
        return errors.New("\"FirewallName\" is required but was not present")
    }
    // check if FirewallPolicyArn (a required property) was received
    if !FirewallPolicyArnReceived {
        return errors.New("\"FirewallPolicyArn\" is required but was not present")
    }
    // check if SubnetMappings (a required property) was received
    if !SubnetMappingsReceived {
        return errors.New("\"SubnetMappings\" is required but was not present")
    }
    // check if VpcId (a required property) was received
    if !VpcIdReceived {
        return errors.New("\"VpcId\" is required but was not present")
    }
    return nil
}

func (strct *SubnetMapping) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "IPAddressType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IPAddressType\": ")
	if tmp, err := json.Marshal(strct.IPAddressType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SubnetId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SubnetId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubnetId\": ")
	if tmp, err := json.Marshal(strct.SubnetId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SubnetMapping) UnmarshalJSON(b []byte) error {
    SubnetIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "IPAddressType":
            if err := json.Unmarshal([]byte(v), &strct.IPAddressType); err != nil {
                return err
             }
        case "SubnetId":
            if err := json.Unmarshal([]byte(v), &strct.SubnetId); err != nil {
                return err
             }
            SubnetIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SubnetId (a required property) was received
    if !SubnetIdReceived {
        return errors.New("\"SubnetId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
