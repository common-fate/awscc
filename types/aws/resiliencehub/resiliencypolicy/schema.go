// Code generated by schema-generate. DO NOT EDIT.

package resiliencypolicy

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// FailurePolicy Failure Policy.
type FailurePolicy struct {

  // RPO in seconds.
  RpoInSecs int `json:"RpoInSecs"`

  // RTO in seconds.
  RtoInSecs int `json:"RtoInSecs"`
}

// PolicyMap 
type PolicyMap struct {
}

// Resource Resource Type Definition for Resiliency Policy.
type Resource struct {

  // Data Location Constraint of the Policy.
  DataLocationConstraint string `json:"DataLocationConstraint,omitempty"`
  Policy *PolicyMap `json:"Policy"`

  // Amazon Resource Name (ARN) of the Resiliency Policy.
  PolicyArn string `json:"PolicyArn,omitempty"`

  // Description of Resiliency Policy.
  PolicyDescription string `json:"PolicyDescription,omitempty"`

  // Name of Resiliency Policy.
  PolicyName string `json:"PolicyName"`
  Tags *TagMap `json:"Tags,omitempty"`

  // Resiliency Policy Tier.
  Tier string `json:"Tier"`
}

// TagMap 
type TagMap struct {
}

func (strct *FailurePolicy) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "RpoInSecs" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RpoInSecs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RpoInSecs\": ")
	if tmp, err := json.Marshal(strct.RpoInSecs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RtoInSecs" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RtoInSecs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RtoInSecs\": ")
	if tmp, err := json.Marshal(strct.RtoInSecs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *FailurePolicy) UnmarshalJSON(b []byte) error {
    RpoInSecsReceived := false
    RtoInSecsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "RpoInSecs":
            if err := json.Unmarshal([]byte(v), &strct.RpoInSecs); err != nil {
                return err
             }
            RpoInSecsReceived = true
        case "RtoInSecs":
            if err := json.Unmarshal([]byte(v), &strct.RtoInSecs); err != nil {
                return err
             }
            RtoInSecsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if RpoInSecs (a required property) was received
    if !RpoInSecsReceived {
        return errors.New("\"RpoInSecs\" is required but was not present")
    }
    // check if RtoInSecs (a required property) was received
    if !RtoInSecsReceived {
        return errors.New("\"RtoInSecs\" is required but was not present")
    }
    return nil
}

func (strct *PolicyMap) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PolicyMap) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DataLocationConstraint" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DataLocationConstraint\": ")
	if tmp, err := json.Marshal(strct.DataLocationConstraint); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Policy" field is required
    if strct.Policy == nil {
        return nil, errors.New("Policy is a required field")
    }
    // Marshal the "Policy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Policy\": ")
	if tmp, err := json.Marshal(strct.Policy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PolicyArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PolicyArn\": ")
	if tmp, err := json.Marshal(strct.PolicyArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PolicyDescription" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PolicyDescription\": ")
	if tmp, err := json.Marshal(strct.PolicyDescription); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PolicyName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "PolicyName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PolicyName\": ")
	if tmp, err := json.Marshal(strct.PolicyName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Tier" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Tier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tier\": ")
	if tmp, err := json.Marshal(strct.Tier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    PolicyReceived := false
    PolicyNameReceived := false
    TierReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DataLocationConstraint":
            if err := json.Unmarshal([]byte(v), &strct.DataLocationConstraint); err != nil {
                return err
             }
        case "Policy":
            if err := json.Unmarshal([]byte(v), &strct.Policy); err != nil {
                return err
             }
            PolicyReceived = true
        case "PolicyArn":
            if err := json.Unmarshal([]byte(v), &strct.PolicyArn); err != nil {
                return err
             }
        case "PolicyDescription":
            if err := json.Unmarshal([]byte(v), &strct.PolicyDescription); err != nil {
                return err
             }
        case "PolicyName":
            if err := json.Unmarshal([]byte(v), &strct.PolicyName); err != nil {
                return err
             }
            PolicyNameReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "Tier":
            if err := json.Unmarshal([]byte(v), &strct.Tier); err != nil {
                return err
             }
            TierReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Policy (a required property) was received
    if !PolicyReceived {
        return errors.New("\"Policy\" is required but was not present")
    }
    // check if PolicyName (a required property) was received
    if !PolicyNameReceived {
        return errors.New("\"PolicyName\" is required but was not present")
    }
    // check if Tier (a required property) was received
    if !TierReceived {
        return errors.New("\"Tier\" is required but was not present")
    }
    return nil
}

func (strct *TagMap) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TagMap) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
