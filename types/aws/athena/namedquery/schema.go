// Code generated by schema-generate. DO NOT EDIT.

package namedquery

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource schema for AWS::Athena::NamedQuery
type Resource struct {

  // The database to which the query belongs.
  Database string `json:"Database"`

  // The query description.
  Description string `json:"Description,omitempty"`

  // The query name.
  Name string `json:"Name,omitempty"`

  // The unique ID of the query.
  NamedQueryId string `json:"NamedQueryId,omitempty"`

  // The contents of the query with all query statements.
  QueryString string `json:"QueryString"`

  // The name of the workgroup that contains the named query.
  WorkGroup string `json:"WorkGroup,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Database" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Database" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Database\": ")
	if tmp, err := json.Marshal(strct.Database); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NamedQueryId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NamedQueryId\": ")
	if tmp, err := json.Marshal(strct.NamedQueryId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "QueryString" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "QueryString" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"QueryString\": ")
	if tmp, err := json.Marshal(strct.QueryString); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "WorkGroup" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WorkGroup\": ")
	if tmp, err := json.Marshal(strct.WorkGroup); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DatabaseReceived := false
    QueryStringReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Database":
            if err := json.Unmarshal([]byte(v), &strct.Database); err != nil {
                return err
             }
            DatabaseReceived = true
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "NamedQueryId":
            if err := json.Unmarshal([]byte(v), &strct.NamedQueryId); err != nil {
                return err
             }
        case "QueryString":
            if err := json.Unmarshal([]byte(v), &strct.QueryString); err != nil {
                return err
             }
            QueryStringReceived = true
        case "WorkGroup":
            if err := json.Unmarshal([]byte(v), &strct.WorkGroup); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Database (a required property) was received
    if !DatabaseReceived {
        return errors.New("\"Database\" is required but was not present")
    }
    // check if QueryString (a required property) was received
    if !QueryStringReceived {
        return errors.New("\"QueryString\" is required but was not present")
    }
    return nil
}
