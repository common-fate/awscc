// Code generated by schema-generate. DO NOT EDIT.

package preparedstatement

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// Resource Resource schema for AWS::Athena::PreparedStatement
type Resource struct {

  // The description of the prepared statement.
  Description string `json:"Description,omitempty"`

  // The query string for the prepared statement.
  QueryStatement string `json:"QueryStatement"`

  // The name of the prepared statement.
  StatementName string `json:"StatementName"`

  // The name of the workgroup to which the prepared statement belongs.
  WorkGroup string `json:"WorkGroup"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "QueryStatement" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "QueryStatement" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"QueryStatement\": ")
	if tmp, err := json.Marshal(strct.QueryStatement); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "StatementName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "StatementName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StatementName\": ")
	if tmp, err := json.Marshal(strct.StatementName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "WorkGroup" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "WorkGroup" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WorkGroup\": ")
	if tmp, err := json.Marshal(strct.WorkGroup); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    QueryStatementReceived := false
    StatementNameReceived := false
    WorkGroupReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "QueryStatement":
            if err := json.Unmarshal([]byte(v), &strct.QueryStatement); err != nil {
                return err
             }
            QueryStatementReceived = true
        case "StatementName":
            if err := json.Unmarshal([]byte(v), &strct.StatementName); err != nil {
                return err
             }
            StatementNameReceived = true
        case "WorkGroup":
            if err := json.Unmarshal([]byte(v), &strct.WorkGroup); err != nil {
                return err
             }
            WorkGroupReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if QueryStatement (a required property) was received
    if !QueryStatementReceived {
        return errors.New("\"QueryStatement\" is required but was not present")
    }
    // check if StatementName (a required property) was received
    if !StatementNameReceived {
        return errors.New("\"StatementName\" is required but was not present")
    }
    // check if WorkGroup (a required property) was received
    if !WorkGroupReceived {
        return errors.New("\"WorkGroup\" is required but was not present")
    }
    return nil
}
