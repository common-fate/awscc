// Code generated by schema-generate. DO NOT EDIT.

package streamingimage

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Represents a streaming session machine image that can be used to launch a streaming session
type Resource struct {

  // <p>A human-readable description of the streaming image.</p>
  Description string `json:"Description,omitempty"`

  // <p>The ID of an EC2 machine image with which to create this streaming image.</p>
  Ec2ImageId string `json:"Ec2ImageId"`
  EncryptionConfiguration *StreamingImageEncryptionConfiguration `json:"EncryptionConfiguration,omitempty"`

  // <p>The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.</p>
  EulaIds []string `json:"EulaIds,omitempty"`

  // <p>A friendly name for a streaming image resource.</p>
  Name string `json:"Name"`

  // <p>The owner of the streaming image, either the studioId that contains the streaming image, or 'amazon' for images that are provided by Amazon Nimble Studio.</p>
  Owner string `json:"Owner,omitempty"`

  // <p>The platform of the streaming image, either WINDOWS or LINUX.</p>
  Platform string `json:"Platform,omitempty"`
  StreamingImageId string `json:"StreamingImageId,omitempty"`

  // <p>The studioId. </p>
  StudioId string `json:"StudioId"`
  Tags *Tags `json:"Tags,omitempty"`
}

// StreamingImageEncryptionConfiguration <p>TODO</p>
type StreamingImageEncryptionConfiguration struct {

  // <p>The ARN for a KMS key that is used to encrypt studio data.</p>
  KeyArn string `json:"KeyArn,omitempty"`
  KeyType string `json:"KeyType"`
}

// Tags 
type Tags struct {
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Ec2ImageId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Ec2ImageId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Ec2ImageId\": ")
	if tmp, err := json.Marshal(strct.Ec2ImageId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EncryptionConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EncryptionConfiguration\": ")
	if tmp, err := json.Marshal(strct.EncryptionConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EulaIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EulaIds\": ")
	if tmp, err := json.Marshal(strct.EulaIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Owner" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Owner\": ")
	if tmp, err := json.Marshal(strct.Owner); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Platform" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Platform\": ")
	if tmp, err := json.Marshal(strct.Platform); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StreamingImageId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StreamingImageId\": ")
	if tmp, err := json.Marshal(strct.StreamingImageId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "StudioId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "StudioId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StudioId\": ")
	if tmp, err := json.Marshal(strct.StudioId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    Ec2ImageIdReceived := false
    NameReceived := false
    StudioIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Ec2ImageId":
            if err := json.Unmarshal([]byte(v), &strct.Ec2ImageId); err != nil {
                return err
             }
            Ec2ImageIdReceived = true
        case "EncryptionConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.EncryptionConfiguration); err != nil {
                return err
             }
        case "EulaIds":
            if err := json.Unmarshal([]byte(v), &strct.EulaIds); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Owner":
            if err := json.Unmarshal([]byte(v), &strct.Owner); err != nil {
                return err
             }
        case "Platform":
            if err := json.Unmarshal([]byte(v), &strct.Platform); err != nil {
                return err
             }
        case "StreamingImageId":
            if err := json.Unmarshal([]byte(v), &strct.StreamingImageId); err != nil {
                return err
             }
        case "StudioId":
            if err := json.Unmarshal([]byte(v), &strct.StudioId); err != nil {
                return err
             }
            StudioIdReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Ec2ImageId (a required property) was received
    if !Ec2ImageIdReceived {
        return errors.New("\"Ec2ImageId\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if StudioId (a required property) was received
    if !StudioIdReceived {
        return errors.New("\"StudioId\" is required but was not present")
    }
    return nil
}

func (strct *StreamingImageEncryptionConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "KeyArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KeyArn\": ")
	if tmp, err := json.Marshal(strct.KeyArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "KeyType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "KeyType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KeyType\": ")
	if tmp, err := json.Marshal(strct.KeyType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *StreamingImageEncryptionConfiguration) UnmarshalJSON(b []byte) error {
    KeyTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "KeyArn":
            if err := json.Unmarshal([]byte(v), &strct.KeyArn); err != nil {
                return err
             }
        case "KeyType":
            if err := json.Unmarshal([]byte(v), &strct.KeyType); err != nil {
                return err
             }
            KeyTypeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if KeyType (a required property) was received
    if !KeyTypeReceived {
        return errors.New("\"KeyType\" is required but was not present")
    }
    return nil
}

func (strct *Tags) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tags) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
