// Code generated by schema-generate. DO NOT EDIT.

package transitgatewaypeering

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource AWS::NetworkManager::TransitGatewayPeering Resoruce Type.
type Resource struct {

  // The ARN (Amazon Resource Name) of the core network that you want to peer a transit gateway to.
  CoreNetworkArn string `json:"CoreNetworkArn,omitempty"`

  // The Id of the core network that you want to peer a transit gateway to.
  CoreNetworkId string `json:"CoreNetworkId"`

  // The creation time of the transit gateway peering
  CreatedAt string `json:"CreatedAt,omitempty"`

  // The location of the transit gateway peering
  EdgeLocation string `json:"EdgeLocation,omitempty"`

  // Peering owner account Id
  OwnerAccountId string `json:"OwnerAccountId,omitempty"`

  // The Id of the transit gateway peering
  PeeringId string `json:"PeeringId,omitempty"`

  // Peering type (TransitGatewayPeering)
  PeeringType string `json:"PeeringType,omitempty"`

  // The ARN (Amazon Resource Name) of the resource that you will peer to a core network
  ResourceArn string `json:"ResourceArn,omitempty"`

  // The state of the transit gateway peering
  State string `json:"State,omitempty"`

  // An array of key-value pairs to apply to this resource.
  Tags []*Tag `json:"Tags,omitempty"`

  // The ARN (Amazon Resource Name) of the transit gateway that you will peer to a core network
  TransitGatewayArn string `json:"TransitGatewayArn"`

  // The ID of the TransitGatewayPeeringAttachment
  TransitGatewayPeeringAttachmentId string `json:"TransitGatewayPeeringAttachmentId,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CoreNetworkArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CoreNetworkArn\": ")
	if tmp, err := json.Marshal(strct.CoreNetworkArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "CoreNetworkId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CoreNetworkId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CoreNetworkId\": ")
	if tmp, err := json.Marshal(strct.CoreNetworkId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CreatedAt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreatedAt\": ")
	if tmp, err := json.Marshal(strct.CreatedAt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EdgeLocation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EdgeLocation\": ")
	if tmp, err := json.Marshal(strct.EdgeLocation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OwnerAccountId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OwnerAccountId\": ")
	if tmp, err := json.Marshal(strct.OwnerAccountId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PeeringId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PeeringId\": ")
	if tmp, err := json.Marshal(strct.PeeringId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PeeringType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PeeringType\": ")
	if tmp, err := json.Marshal(strct.PeeringType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ResourceArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceArn\": ")
	if tmp, err := json.Marshal(strct.ResourceArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "State" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"State\": ")
	if tmp, err := json.Marshal(strct.State); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TransitGatewayArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TransitGatewayArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayArn\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGatewayPeeringAttachmentId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayPeeringAttachmentId\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayPeeringAttachmentId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    CoreNetworkIdReceived := false
    TransitGatewayArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CoreNetworkArn":
            if err := json.Unmarshal([]byte(v), &strct.CoreNetworkArn); err != nil {
                return err
             }
        case "CoreNetworkId":
            if err := json.Unmarshal([]byte(v), &strct.CoreNetworkId); err != nil {
                return err
             }
            CoreNetworkIdReceived = true
        case "CreatedAt":
            if err := json.Unmarshal([]byte(v), &strct.CreatedAt); err != nil {
                return err
             }
        case "EdgeLocation":
            if err := json.Unmarshal([]byte(v), &strct.EdgeLocation); err != nil {
                return err
             }
        case "OwnerAccountId":
            if err := json.Unmarshal([]byte(v), &strct.OwnerAccountId); err != nil {
                return err
             }
        case "PeeringId":
            if err := json.Unmarshal([]byte(v), &strct.PeeringId); err != nil {
                return err
             }
        case "PeeringType":
            if err := json.Unmarshal([]byte(v), &strct.PeeringType); err != nil {
                return err
             }
        case "ResourceArn":
            if err := json.Unmarshal([]byte(v), &strct.ResourceArn); err != nil {
                return err
             }
        case "State":
            if err := json.Unmarshal([]byte(v), &strct.State); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TransitGatewayArn":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayArn); err != nil {
                return err
             }
            TransitGatewayArnReceived = true
        case "TransitGatewayPeeringAttachmentId":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayPeeringAttachmentId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CoreNetworkId (a required property) was received
    if !CoreNetworkIdReceived {
        return errors.New("\"CoreNetworkId\" is required but was not present")
    }
    // check if TransitGatewayArn (a required property) was received
    if !TransitGatewayArnReceived {
        return errors.New("\"TransitGatewayArn\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
