// Code generated by schema-generate. DO NOT EDIT.

package link

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Bandwidth The bandwidth for the link.
type Bandwidth struct {

  // Download speed in Mbps.
  DownloadSpeed int `json:"DownloadSpeed,omitempty"`

  // Upload speed in Mbps.
  UploadSpeed int `json:"UploadSpeed,omitempty"`
}

// Resource The AWS::NetworkManager::Link type describes a link.
type Resource struct {

  // The Bandwidth for the link.
  Bandwidth *Bandwidth `json:"Bandwidth"`

  // The description of the link.
  Description string `json:"Description,omitempty"`

  // The ID of the global network.
  GlobalNetworkId string `json:"GlobalNetworkId"`

  // The Amazon Resource Name (ARN) of the link.
  LinkArn string `json:"LinkArn,omitempty"`

  // The ID of the link.
  LinkId string `json:"LinkId,omitempty"`

  // The provider of the link.
  Provider string `json:"Provider,omitempty"`

  // The ID of the site
  SiteId string `json:"SiteId"`

  // The tags for the link.
  Tags []*Tag `json:"Tags,omitempty"`

  // The type of the link.
  Type string `json:"Type,omitempty"`
}

// Tag A key-value pair to associate with a link resource.
type Tag struct {
  Key string `json:"Key,omitempty"`
  Value string `json:"Value,omitempty"`
}

func (strct *Bandwidth) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DownloadSpeed" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DownloadSpeed\": ")
	if tmp, err := json.Marshal(strct.DownloadSpeed); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UploadSpeed" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UploadSpeed\": ")
	if tmp, err := json.Marshal(strct.UploadSpeed); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Bandwidth) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DownloadSpeed":
            if err := json.Unmarshal([]byte(v), &strct.DownloadSpeed); err != nil {
                return err
             }
        case "UploadSpeed":
            if err := json.Unmarshal([]byte(v), &strct.UploadSpeed); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Bandwidth" field is required
    if strct.Bandwidth == nil {
        return nil, errors.New("Bandwidth is a required field")
    }
    // Marshal the "Bandwidth" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Bandwidth\": ")
	if tmp, err := json.Marshal(strct.Bandwidth); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "GlobalNetworkId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "GlobalNetworkId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"GlobalNetworkId\": ")
	if tmp, err := json.Marshal(strct.GlobalNetworkId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LinkArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LinkArn\": ")
	if tmp, err := json.Marshal(strct.LinkArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LinkId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LinkId\": ")
	if tmp, err := json.Marshal(strct.LinkId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Provider" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Provider\": ")
	if tmp, err := json.Marshal(strct.Provider); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SiteId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SiteId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SiteId\": ")
	if tmp, err := json.Marshal(strct.SiteId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    BandwidthReceived := false
    GlobalNetworkIdReceived := false
    SiteIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Bandwidth":
            if err := json.Unmarshal([]byte(v), &strct.Bandwidth); err != nil {
                return err
             }
            BandwidthReceived = true
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "GlobalNetworkId":
            if err := json.Unmarshal([]byte(v), &strct.GlobalNetworkId); err != nil {
                return err
             }
            GlobalNetworkIdReceived = true
        case "LinkArn":
            if err := json.Unmarshal([]byte(v), &strct.LinkArn); err != nil {
                return err
             }
        case "LinkId":
            if err := json.Unmarshal([]byte(v), &strct.LinkId); err != nil {
                return err
             }
        case "Provider":
            if err := json.Unmarshal([]byte(v), &strct.Provider); err != nil {
                return err
             }
        case "SiteId":
            if err := json.Unmarshal([]byte(v), &strct.SiteId); err != nil {
                return err
             }
            SiteIdReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "Type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Bandwidth (a required property) was received
    if !BandwidthReceived {
        return errors.New("\"Bandwidth\" is required but was not present")
    }
    // check if GlobalNetworkId (a required property) was received
    if !GlobalNetworkIdReceived {
        return errors.New("\"GlobalNetworkId\" is required but was not present")
    }
    // check if SiteId (a required property) was received
    if !SiteIdReceived {
        return errors.New("\"SiteId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
