// Code generated by schema-generate. DO NOT EDIT.

package targetgroup

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// Matcher 
type Matcher struct {

  // You can specify values between 0 and 99. You can specify multiple values, or a range of values. The default value is 12.
  GrpcCode string `json:"GrpcCode,omitempty"`

  // For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values or a range of values. 
  HttpCode string `json:"HttpCode,omitempty"`
}

// Resource Resource Type definition for AWS::ElasticLoadBalancingV2::TargetGroup
type Resource struct {

  // Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
  HealthCheckEnabled bool `json:"HealthCheckEnabled,omitempty"`

  // The approximate amount of time, in seconds, between health checks of an individual target.
  HealthCheckIntervalSeconds int `json:"HealthCheckIntervalSeconds,omitempty"`

  // [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /AWS.ALB/healthcheck.
  HealthCheckPath string `json:"HealthCheckPath,omitempty"`

  // The port the load balancer uses when performing health checks on targets. 
  HealthCheckPort string `json:"HealthCheckPort,omitempty"`

  // The protocol the load balancer uses when performing health checks on targets. 
  HealthCheckProtocol string `json:"HealthCheckProtocol,omitempty"`

  // The amount of time, in seconds, during which no response from a target means a failed health check.
  HealthCheckTimeoutSeconds int `json:"HealthCheckTimeoutSeconds,omitempty"`

  // The number of consecutive health checks successes required before considering an unhealthy target healthy. 
  HealthyThresholdCount int `json:"HealthyThresholdCount,omitempty"`

  // The type of IP address used for this target group. The possible values are ipv4 and ipv6. 
  IpAddressType string `json:"IpAddressType,omitempty"`

  // The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.
  LoadBalancerArns []string `json:"LoadBalancerArns,omitempty"`

  // [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.
  Matcher *Matcher `json:"Matcher,omitempty"`

  // The name of the target group.
  Name string `json:"Name,omitempty"`

  // The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.
  Port int `json:"Port,omitempty"`

  // The protocol to use for routing traffic to the targets.
  Protocol string `json:"Protocol,omitempty"`

  // [HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.
  ProtocolVersion string `json:"ProtocolVersion,omitempty"`

  // The tags.
  Tags []*Tag `json:"Tags,omitempty"`

  // The ARN of the Target Group
  TargetGroupArn string `json:"TargetGroupArn,omitempty"`

  // The attributes.
  TargetGroupAttributes []*TargetGroupAttribute `json:"TargetGroupAttributes,omitempty"`

  // The full name of the target group.
  TargetGroupFullName string `json:"TargetGroupFullName,omitempty"`

  // The name of the target group.
  TargetGroupName string `json:"TargetGroupName,omitempty"`

  // The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.
  TargetType string `json:"TargetType,omitempty"`

  // The targets.
  Targets []*TargetDescription `json:"Targets,omitempty"`

  // The number of consecutive health check failures required before considering a target unhealthy.
  UnhealthyThresholdCount int `json:"UnhealthyThresholdCount,omitempty"`

  // The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
  VpcId string `json:"VpcId,omitempty"`
}

// Tag 
type Tag struct {

  // The value for the tag. 
  Key string `json:"Key"`

  // The key name of the tag. 
  Value string `json:"Value"`
}

// TargetDescription 
type TargetDescription struct {

  // An Availability Zone or all. This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer.
  AvailabilityZone string `json:"AvailabilityZone,omitempty"`

  // The ID of the target. If the target type of the target group is instance, specify an instance ID. If the target type is ip, specify an IP address. If the target type is lambda, specify the ARN of the Lambda function. If the target type is alb, specify the ARN of the Application Load Balancer target. 
  Id string `json:"Id"`

  // The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the target type is alb, the targeted Application Load Balancer must have at least one listener whose port matches the target group port. Not used if the target is a Lambda function.
  Port int `json:"Port,omitempty"`
}

// TargetGroupAttribute 
type TargetGroupAttribute struct {

  // The value of the attribute.
  Key string `json:"Key,omitempty"`

  // The name of the attribute.
  Value string `json:"Value,omitempty"`
}

func (strct *Matcher) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "GrpcCode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"GrpcCode\": ")
	if tmp, err := json.Marshal(strct.GrpcCode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HttpCode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HttpCode\": ")
	if tmp, err := json.Marshal(strct.HttpCode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Matcher) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "GrpcCode":
            if err := json.Unmarshal([]byte(v), &strct.GrpcCode); err != nil {
                return err
             }
        case "HttpCode":
            if err := json.Unmarshal([]byte(v), &strct.HttpCode); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "HealthCheckEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HealthCheckEnabled\": ")
	if tmp, err := json.Marshal(strct.HealthCheckEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HealthCheckIntervalSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HealthCheckIntervalSeconds\": ")
	if tmp, err := json.Marshal(strct.HealthCheckIntervalSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HealthCheckPath" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HealthCheckPath\": ")
	if tmp, err := json.Marshal(strct.HealthCheckPath); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HealthCheckPort" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HealthCheckPort\": ")
	if tmp, err := json.Marshal(strct.HealthCheckPort); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HealthCheckProtocol" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HealthCheckProtocol\": ")
	if tmp, err := json.Marshal(strct.HealthCheckProtocol); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HealthCheckTimeoutSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HealthCheckTimeoutSeconds\": ")
	if tmp, err := json.Marshal(strct.HealthCheckTimeoutSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HealthyThresholdCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HealthyThresholdCount\": ")
	if tmp, err := json.Marshal(strct.HealthyThresholdCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IpAddressType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IpAddressType\": ")
	if tmp, err := json.Marshal(strct.IpAddressType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoadBalancerArns" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoadBalancerArns\": ")
	if tmp, err := json.Marshal(strct.LoadBalancerArns); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Matcher" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Matcher\": ")
	if tmp, err := json.Marshal(strct.Matcher); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Port" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Port\": ")
	if tmp, err := json.Marshal(strct.Port); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Protocol" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Protocol\": ")
	if tmp, err := json.Marshal(strct.Protocol); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProtocolVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProtocolVersion\": ")
	if tmp, err := json.Marshal(strct.ProtocolVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TargetGroupArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TargetGroupArn\": ")
	if tmp, err := json.Marshal(strct.TargetGroupArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TargetGroupAttributes" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TargetGroupAttributes\": ")
	if tmp, err := json.Marshal(strct.TargetGroupAttributes); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TargetGroupFullName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TargetGroupFullName\": ")
	if tmp, err := json.Marshal(strct.TargetGroupFullName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TargetGroupName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TargetGroupName\": ")
	if tmp, err := json.Marshal(strct.TargetGroupName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TargetType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TargetType\": ")
	if tmp, err := json.Marshal(strct.TargetType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Targets" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Targets\": ")
	if tmp, err := json.Marshal(strct.Targets); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UnhealthyThresholdCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UnhealthyThresholdCount\": ")
	if tmp, err := json.Marshal(strct.UnhealthyThresholdCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpcId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcId\": ")
	if tmp, err := json.Marshal(strct.VpcId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "HealthCheckEnabled":
            if err := json.Unmarshal([]byte(v), &strct.HealthCheckEnabled); err != nil {
                return err
             }
        case "HealthCheckIntervalSeconds":
            if err := json.Unmarshal([]byte(v), &strct.HealthCheckIntervalSeconds); err != nil {
                return err
             }
        case "HealthCheckPath":
            if err := json.Unmarshal([]byte(v), &strct.HealthCheckPath); err != nil {
                return err
             }
        case "HealthCheckPort":
            if err := json.Unmarshal([]byte(v), &strct.HealthCheckPort); err != nil {
                return err
             }
        case "HealthCheckProtocol":
            if err := json.Unmarshal([]byte(v), &strct.HealthCheckProtocol); err != nil {
                return err
             }
        case "HealthCheckTimeoutSeconds":
            if err := json.Unmarshal([]byte(v), &strct.HealthCheckTimeoutSeconds); err != nil {
                return err
             }
        case "HealthyThresholdCount":
            if err := json.Unmarshal([]byte(v), &strct.HealthyThresholdCount); err != nil {
                return err
             }
        case "IpAddressType":
            if err := json.Unmarshal([]byte(v), &strct.IpAddressType); err != nil {
                return err
             }
        case "LoadBalancerArns":
            if err := json.Unmarshal([]byte(v), &strct.LoadBalancerArns); err != nil {
                return err
             }
        case "Matcher":
            if err := json.Unmarshal([]byte(v), &strct.Matcher); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "Port":
            if err := json.Unmarshal([]byte(v), &strct.Port); err != nil {
                return err
             }
        case "Protocol":
            if err := json.Unmarshal([]byte(v), &strct.Protocol); err != nil {
                return err
             }
        case "ProtocolVersion":
            if err := json.Unmarshal([]byte(v), &strct.ProtocolVersion); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TargetGroupArn":
            if err := json.Unmarshal([]byte(v), &strct.TargetGroupArn); err != nil {
                return err
             }
        case "TargetGroupAttributes":
            if err := json.Unmarshal([]byte(v), &strct.TargetGroupAttributes); err != nil {
                return err
             }
        case "TargetGroupFullName":
            if err := json.Unmarshal([]byte(v), &strct.TargetGroupFullName); err != nil {
                return err
             }
        case "TargetGroupName":
            if err := json.Unmarshal([]byte(v), &strct.TargetGroupName); err != nil {
                return err
             }
        case "TargetType":
            if err := json.Unmarshal([]byte(v), &strct.TargetType); err != nil {
                return err
             }
        case "Targets":
            if err := json.Unmarshal([]byte(v), &strct.Targets); err != nil {
                return err
             }
        case "UnhealthyThresholdCount":
            if err := json.Unmarshal([]byte(v), &strct.UnhealthyThresholdCount); err != nil {
                return err
             }
        case "VpcId":
            if err := json.Unmarshal([]byte(v), &strct.VpcId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *TargetDescription) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AvailabilityZone" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AvailabilityZone\": ")
	if tmp, err := json.Marshal(strct.AvailabilityZone); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Id" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Port" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Port\": ")
	if tmp, err := json.Marshal(strct.Port); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TargetDescription) UnmarshalJSON(b []byte) error {
    IdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AvailabilityZone":
            if err := json.Unmarshal([]byte(v), &strct.AvailabilityZone); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
            IdReceived = true
        case "Port":
            if err := json.Unmarshal([]byte(v), &strct.Port); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Id (a required property) was received
    if !IdReceived {
        return errors.New("\"Id\" is required but was not present")
    }
    return nil
}

func (strct *TargetGroupAttribute) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TargetGroupAttribute) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
