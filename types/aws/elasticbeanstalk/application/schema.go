// Code generated by schema-generate. DO NOT EDIT.

package application

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// ApplicationResourceLifecycleConfig 
type ApplicationResourceLifecycleConfig struct {

  // The ARN of an IAM service role that Elastic Beanstalk has permission to assume. The ServiceRole property is required the first time that you provide a ResourceLifecycleConfig for the application. After you provide it once, Elastic Beanstalk persists the Service Role with the application, and you don't need to specify it again. You can, however, specify it in subsequent updates to change the Service Role to another value.
  ServiceRole string `json:"ServiceRole,omitempty"`

  // Defines lifecycle settings for application versions.
  VersionLifecycleConfig *ApplicationVersionLifecycleConfig `json:"VersionLifecycleConfig,omitempty"`
}

// ApplicationVersionLifecycleConfig 
type ApplicationVersionLifecycleConfig struct {

  // Specify a max age rule to restrict the length of time that application versions are retained for an application.
  MaxAgeRule *MaxAgeRule `json:"MaxAgeRule,omitempty"`

  // Specify a max count rule to restrict the number of application versions that are retained for an application.
  MaxCountRule *MaxCountRule `json:"MaxCountRule,omitempty"`
}

// MaxAgeRule 
type MaxAgeRule struct {

  // Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
  DeleteSourceFromS3 bool `json:"DeleteSourceFromS3,omitempty"`

  // Specify true to apply the rule, or false to disable it.
  Enabled bool `json:"Enabled,omitempty"`

  // Specify the number of days to retain an application versions.
  MaxAgeInDays int `json:"MaxAgeInDays,omitempty"`
}

// MaxCountRule 
type MaxCountRule struct {

  // Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
  DeleteSourceFromS3 bool `json:"DeleteSourceFromS3,omitempty"`

  // Specify true to apply the rule, or false to disable it.
  Enabled bool `json:"Enabled,omitempty"`

  // Specify the maximum number of application versions to retain.
  MaxCount int `json:"MaxCount,omitempty"`
}

// Resource The AWS::ElasticBeanstalk::Application resource specifies an Elastic Beanstalk application.
type Resource struct {

  // A name for the Elastic Beanstalk application. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the application name.
  ApplicationName string `json:"ApplicationName,omitempty"`

  // Your description of the application.
  Description string `json:"Description,omitempty"`

  // Specifies an application resource lifecycle configuration to prevent your application from accumulating too many versions.
  ResourceLifecycleConfig *ApplicationResourceLifecycleConfig `json:"ResourceLifecycleConfig,omitempty"`
}

func (strct *ApplicationResourceLifecycleConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ServiceRole" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServiceRole\": ")
	if tmp, err := json.Marshal(strct.ServiceRole); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VersionLifecycleConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VersionLifecycleConfig\": ")
	if tmp, err := json.Marshal(strct.VersionLifecycleConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ApplicationResourceLifecycleConfig) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ServiceRole":
            if err := json.Unmarshal([]byte(v), &strct.ServiceRole); err != nil {
                return err
             }
        case "VersionLifecycleConfig":
            if err := json.Unmarshal([]byte(v), &strct.VersionLifecycleConfig); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ApplicationVersionLifecycleConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "MaxAgeRule" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxAgeRule\": ")
	if tmp, err := json.Marshal(strct.MaxAgeRule); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaxCountRule" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxCountRule\": ")
	if tmp, err := json.Marshal(strct.MaxCountRule); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ApplicationVersionLifecycleConfig) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "MaxAgeRule":
            if err := json.Unmarshal([]byte(v), &strct.MaxAgeRule); err != nil {
                return err
             }
        case "MaxCountRule":
            if err := json.Unmarshal([]byte(v), &strct.MaxCountRule); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *MaxAgeRule) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DeleteSourceFromS3" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeleteSourceFromS3\": ")
	if tmp, err := json.Marshal(strct.DeleteSourceFromS3); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Enabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enabled\": ")
	if tmp, err := json.Marshal(strct.Enabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaxAgeInDays" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxAgeInDays\": ")
	if tmp, err := json.Marshal(strct.MaxAgeInDays); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MaxAgeRule) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DeleteSourceFromS3":
            if err := json.Unmarshal([]byte(v), &strct.DeleteSourceFromS3); err != nil {
                return err
             }
        case "Enabled":
            if err := json.Unmarshal([]byte(v), &strct.Enabled); err != nil {
                return err
             }
        case "MaxAgeInDays":
            if err := json.Unmarshal([]byte(v), &strct.MaxAgeInDays); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *MaxCountRule) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DeleteSourceFromS3" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeleteSourceFromS3\": ")
	if tmp, err := json.Marshal(strct.DeleteSourceFromS3); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Enabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enabled\": ")
	if tmp, err := json.Marshal(strct.Enabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaxCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxCount\": ")
	if tmp, err := json.Marshal(strct.MaxCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MaxCountRule) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DeleteSourceFromS3":
            if err := json.Unmarshal([]byte(v), &strct.DeleteSourceFromS3); err != nil {
                return err
             }
        case "Enabled":
            if err := json.Unmarshal([]byte(v), &strct.Enabled); err != nil {
                return err
             }
        case "MaxCount":
            if err := json.Unmarshal([]byte(v), &strct.MaxCount); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ApplicationName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApplicationName\": ")
	if tmp, err := json.Marshal(strct.ApplicationName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ResourceLifecycleConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceLifecycleConfig\": ")
	if tmp, err := json.Marshal(strct.ResourceLifecycleConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ApplicationName":
            if err := json.Unmarshal([]byte(v), &strct.ApplicationName); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "ResourceLifecycleConfig":
            if err := json.Unmarshal([]byte(v), &strct.ResourceLifecycleConfig); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
