// Code generated by schema-generate. DO NOT EDIT.

package configurationtemplate

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// ConfigurationOptionSetting 
type ConfigurationOptionSetting struct {

  // A unique namespace that identifies the option's associated AWS resource.
  Namespace string `json:"Namespace"`

  // The name of the configuration option.
  OptionName string `json:"OptionName"`

  // A unique resource name for the option setting. Use it for a timeâ€“based scaling configuration option. 
  ResourceName string `json:"ResourceName,omitempty"`

  // The current value for the configuration option.
  Value string `json:"Value,omitempty"`
}

// Resource Resource Type definition for AWS::ElasticBeanstalk::ConfigurationTemplate
type Resource struct {

  // The name of the Elastic Beanstalk application to associate with this configuration template. 
  ApplicationName string `json:"ApplicationName"`

  // An optional description for this configuration.
  Description string `json:"Description,omitempty"`

  // The ID of an environment whose settings you want to use to create the configuration template. You must specify EnvironmentId if you don't specify PlatformArn, SolutionStackName, or SourceConfiguration. 
  EnvironmentId string `json:"EnvironmentId,omitempty"`

  // Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these values override the values obtained from the solution stack or the source configuration template. For a complete list of Elastic Beanstalk configuration options, see [Option Values](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html) in the AWS Elastic Beanstalk Developer Guide. 
  OptionSettings []*ConfigurationOptionSetting `json:"OptionSettings,omitempty"`

  // The Amazon Resource Name (ARN) of the custom platform. For more information, see [Custom Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html) in the AWS Elastic Beanstalk Developer Guide. 
  PlatformArn string `json:"PlatformArn,omitempty"`

  // The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For example, 64bit Amazon Linux 2013.09 running Tomcat 7 Java 7. A solution stack specifies the operating system, runtime, and application server for a configuration template. It also determines the set of configuration options as well as the possible and default values. For more information, see [Supported Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html) in the AWS Elastic Beanstalk Developer Guide.
  // 
  //  You must specify SolutionStackName if you don't specify PlatformArn, EnvironmentId, or SourceConfiguration.
  // 
  //  Use the ListAvailableSolutionStacks API to obtain a list of available solution stacks. 
  SolutionStackName string `json:"SolutionStackName,omitempty"`

  // An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration.
  // 
  // Values specified in OptionSettings override any values obtained from the SourceConfiguration.
  // 
  // You must specify SourceConfiguration if you don't specify PlatformArn, EnvironmentId, or SolutionStackName.
  // 
  // Constraint: If both solution stack name and source configuration are specified, the solution stack of the source configuration template must match the specified solution stack name. 
  SourceConfiguration *SourceConfiguration `json:"SourceConfiguration,omitempty"`

  // The name of the configuration template
  TemplateName string `json:"TemplateName,omitempty"`
}

// SourceConfiguration 
type SourceConfiguration struct {

  // The name of the application associated with the configuration.
  ApplicationName string `json:"ApplicationName"`

  // The name of the configuration template.
  TemplateName string `json:"TemplateName"`
}

func (strct *ConfigurationOptionSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Namespace" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Namespace" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Namespace\": ")
	if tmp, err := json.Marshal(strct.Namespace); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "OptionName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "OptionName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OptionName\": ")
	if tmp, err := json.Marshal(strct.OptionName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ResourceName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceName\": ")
	if tmp, err := json.Marshal(strct.ResourceName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ConfigurationOptionSetting) UnmarshalJSON(b []byte) error {
    NamespaceReceived := false
    OptionNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Namespace":
            if err := json.Unmarshal([]byte(v), &strct.Namespace); err != nil {
                return err
             }
            NamespaceReceived = true
        case "OptionName":
            if err := json.Unmarshal([]byte(v), &strct.OptionName); err != nil {
                return err
             }
            OptionNameReceived = true
        case "ResourceName":
            if err := json.Unmarshal([]byte(v), &strct.ResourceName); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Namespace (a required property) was received
    if !NamespaceReceived {
        return errors.New("\"Namespace\" is required but was not present")
    }
    // check if OptionName (a required property) was received
    if !OptionNameReceived {
        return errors.New("\"OptionName\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ApplicationName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ApplicationName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApplicationName\": ")
	if tmp, err := json.Marshal(strct.ApplicationName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EnvironmentId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnvironmentId\": ")
	if tmp, err := json.Marshal(strct.EnvironmentId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OptionSettings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OptionSettings\": ")
	if tmp, err := json.Marshal(strct.OptionSettings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PlatformArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PlatformArn\": ")
	if tmp, err := json.Marshal(strct.PlatformArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SolutionStackName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SolutionStackName\": ")
	if tmp, err := json.Marshal(strct.SolutionStackName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SourceConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceConfiguration\": ")
	if tmp, err := json.Marshal(strct.SourceConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TemplateName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TemplateName\": ")
	if tmp, err := json.Marshal(strct.TemplateName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ApplicationNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ApplicationName":
            if err := json.Unmarshal([]byte(v), &strct.ApplicationName); err != nil {
                return err
             }
            ApplicationNameReceived = true
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "EnvironmentId":
            if err := json.Unmarshal([]byte(v), &strct.EnvironmentId); err != nil {
                return err
             }
        case "OptionSettings":
            if err := json.Unmarshal([]byte(v), &strct.OptionSettings); err != nil {
                return err
             }
        case "PlatformArn":
            if err := json.Unmarshal([]byte(v), &strct.PlatformArn); err != nil {
                return err
             }
        case "SolutionStackName":
            if err := json.Unmarshal([]byte(v), &strct.SolutionStackName); err != nil {
                return err
             }
        case "SourceConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.SourceConfiguration); err != nil {
                return err
             }
        case "TemplateName":
            if err := json.Unmarshal([]byte(v), &strct.TemplateName); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ApplicationName (a required property) was received
    if !ApplicationNameReceived {
        return errors.New("\"ApplicationName\" is required but was not present")
    }
    return nil
}

func (strct *SourceConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ApplicationName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ApplicationName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApplicationName\": ")
	if tmp, err := json.Marshal(strct.ApplicationName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TemplateName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TemplateName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TemplateName\": ")
	if tmp, err := json.Marshal(strct.TemplateName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SourceConfiguration) UnmarshalJSON(b []byte) error {
    ApplicationNameReceived := false
    TemplateNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ApplicationName":
            if err := json.Unmarshal([]byte(v), &strct.ApplicationName); err != nil {
                return err
             }
            ApplicationNameReceived = true
        case "TemplateName":
            if err := json.Unmarshal([]byte(v), &strct.TemplateName); err != nil {
                return err
             }
            TemplateNameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ApplicationName (a required property) was received
    if !ApplicationNameReceived {
        return errors.New("\"ApplicationName\" is required but was not present")
    }
    // check if TemplateName (a required property) was received
    if !TemplateNameReceived {
        return errors.New("\"TemplateName\" is required but was not present")
    }
    return nil
}
