// Code generated by schema-generate. DO NOT EDIT.

package environment

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// OptionSetting 
type OptionSetting struct {

  // A unique namespace that identifies the option's associated AWS resource.
  Namespace string `json:"Namespace"`

  // The name of the configuration option.
  OptionName string `json:"OptionName"`

  // A unique resource name for the option setting. Use it for a timeâ€“based scaling configuration option.
  ResourceName string `json:"ResourceName,omitempty"`

  // The current value for the configuration option.
  Value string `json:"Value,omitempty"`
}

// Resource Resource Type definition for AWS::ElasticBeanstalk::Environment
type Resource struct {

  // The name of the application that is associated with this environment.
  ApplicationName string `json:"ApplicationName"`

  // If specified, the environment attempts to use this value as the prefix for the CNAME in your Elastic Beanstalk environment URL. If not specified, the CNAME is generated automatically by appending a random alphanumeric string to the environment name.
  CNAMEPrefix string `json:"CNAMEPrefix,omitempty"`

  // Your description for this environment.
  Description string `json:"Description,omitempty"`
  EndpointURL string `json:"EndpointURL,omitempty"`

  // A unique name for the environment.
  EnvironmentName string `json:"EnvironmentName,omitempty"`

  // The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment's operations role.
  OperationsRole string `json:"OperationsRole,omitempty"`

  // Key-value pairs defining configuration options for this environment, such as the instance type.
  OptionSettings []*OptionSetting `json:"OptionSettings,omitempty"`

  // The Amazon Resource Name (ARN) of the custom platform to use with the environment.
  PlatformArn string `json:"PlatformArn,omitempty"`

  // The name of an Elastic Beanstalk solution stack (platform version) to use with the environment.
  SolutionStackName string `json:"SolutionStackName,omitempty"`

  // Specifies the tags applied to resources in the environment.
  Tags []*Tag `json:"Tags,omitempty"`

  // The name of the Elastic Beanstalk configuration template to use with the environment.
  TemplateName string `json:"TemplateName,omitempty"`

  // Specifies the tier to use in creating this environment. The environment tier that you choose determines whether Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web application that handles background-processing tasks.
  Tier *Tier `json:"Tier,omitempty"`

  // The name of the application version to deploy.
  VersionLabel string `json:"VersionLabel,omitempty"`
}

// Tag 
type Tag struct {

  // The key name of the tag.
  Key string `json:"Key"`

  // The value for the tag.
  Value string `json:"Value"`
}

// Tier 
type Tier struct {

  // The name of this environment tier.
  Name string `json:"Name,omitempty"`

  // The type of this environment tier.
  Type string `json:"Type,omitempty"`

  // The version of this environment tier. When you don't set a value to it, Elastic Beanstalk uses the latest compatible worker tier version.
  Version string `json:"Version,omitempty"`
}

func (strct *OptionSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Namespace" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Namespace" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Namespace\": ")
	if tmp, err := json.Marshal(strct.Namespace); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "OptionName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "OptionName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OptionName\": ")
	if tmp, err := json.Marshal(strct.OptionName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ResourceName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceName\": ")
	if tmp, err := json.Marshal(strct.ResourceName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OptionSetting) UnmarshalJSON(b []byte) error {
    NamespaceReceived := false
    OptionNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Namespace":
            if err := json.Unmarshal([]byte(v), &strct.Namespace); err != nil {
                return err
             }
            NamespaceReceived = true
        case "OptionName":
            if err := json.Unmarshal([]byte(v), &strct.OptionName); err != nil {
                return err
             }
            OptionNameReceived = true
        case "ResourceName":
            if err := json.Unmarshal([]byte(v), &strct.ResourceName); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Namespace (a required property) was received
    if !NamespaceReceived {
        return errors.New("\"Namespace\" is required but was not present")
    }
    // check if OptionName (a required property) was received
    if !OptionNameReceived {
        return errors.New("\"OptionName\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ApplicationName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ApplicationName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApplicationName\": ")
	if tmp, err := json.Marshal(strct.ApplicationName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CNAMEPrefix" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CNAMEPrefix\": ")
	if tmp, err := json.Marshal(strct.CNAMEPrefix); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EndpointURL" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EndpointURL\": ")
	if tmp, err := json.Marshal(strct.EndpointURL); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EnvironmentName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnvironmentName\": ")
	if tmp, err := json.Marshal(strct.EnvironmentName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OperationsRole" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OperationsRole\": ")
	if tmp, err := json.Marshal(strct.OperationsRole); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OptionSettings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OptionSettings\": ")
	if tmp, err := json.Marshal(strct.OptionSettings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PlatformArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PlatformArn\": ")
	if tmp, err := json.Marshal(strct.PlatformArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SolutionStackName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SolutionStackName\": ")
	if tmp, err := json.Marshal(strct.SolutionStackName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TemplateName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TemplateName\": ")
	if tmp, err := json.Marshal(strct.TemplateName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tier\": ")
	if tmp, err := json.Marshal(strct.Tier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VersionLabel" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VersionLabel\": ")
	if tmp, err := json.Marshal(strct.VersionLabel); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ApplicationNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ApplicationName":
            if err := json.Unmarshal([]byte(v), &strct.ApplicationName); err != nil {
                return err
             }
            ApplicationNameReceived = true
        case "CNAMEPrefix":
            if err := json.Unmarshal([]byte(v), &strct.CNAMEPrefix); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "EndpointURL":
            if err := json.Unmarshal([]byte(v), &strct.EndpointURL); err != nil {
                return err
             }
        case "EnvironmentName":
            if err := json.Unmarshal([]byte(v), &strct.EnvironmentName); err != nil {
                return err
             }
        case "OperationsRole":
            if err := json.Unmarshal([]byte(v), &strct.OperationsRole); err != nil {
                return err
             }
        case "OptionSettings":
            if err := json.Unmarshal([]byte(v), &strct.OptionSettings); err != nil {
                return err
             }
        case "PlatformArn":
            if err := json.Unmarshal([]byte(v), &strct.PlatformArn); err != nil {
                return err
             }
        case "SolutionStackName":
            if err := json.Unmarshal([]byte(v), &strct.SolutionStackName); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TemplateName":
            if err := json.Unmarshal([]byte(v), &strct.TemplateName); err != nil {
                return err
             }
        case "Tier":
            if err := json.Unmarshal([]byte(v), &strct.Tier); err != nil {
                return err
             }
        case "VersionLabel":
            if err := json.Unmarshal([]byte(v), &strct.VersionLabel); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ApplicationName (a required property) was received
    if !ApplicationNameReceived {
        return errors.New("\"ApplicationName\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *Tier) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Version" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Version\": ")
	if tmp, err := json.Marshal(strct.Version); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tier) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "Type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        case "Version":
            if err := json.Unmarshal([]byte(v), &strct.Version); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
