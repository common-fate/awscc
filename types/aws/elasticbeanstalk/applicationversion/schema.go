// Code generated by schema-generate. DO NOT EDIT.

package applicationversion

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// Resource Resource Type definition for AWS::ElasticBeanstalk::ApplicationVersion
type Resource struct {

  // The name of the Elastic Beanstalk application that is associated with this application version. 
  ApplicationName string `json:"ApplicationName"`

  // A description of this application version.
  Description string `json:"Description,omitempty"`
  Id string `json:"Id,omitempty"`

  // The Amazon S3 bucket and key that identify the location of the source bundle for this version. 
  SourceBundle *SourceBundle `json:"SourceBundle"`
}

// SourceBundle 
type SourceBundle struct {

  // The Amazon S3 bucket where the data is located.
  S3Bucket string `json:"S3Bucket"`

  // The Amazon S3 key where the data is located.
  S3Key string `json:"S3Key"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ApplicationName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ApplicationName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApplicationName\": ")
	if tmp, err := json.Marshal(strct.ApplicationName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SourceBundle" field is required
    if strct.SourceBundle == nil {
        return nil, errors.New("SourceBundle is a required field")
    }
    // Marshal the "SourceBundle" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceBundle\": ")
	if tmp, err := json.Marshal(strct.SourceBundle); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ApplicationNameReceived := false
    SourceBundleReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ApplicationName":
            if err := json.Unmarshal([]byte(v), &strct.ApplicationName); err != nil {
                return err
             }
            ApplicationNameReceived = true
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "SourceBundle":
            if err := json.Unmarshal([]byte(v), &strct.SourceBundle); err != nil {
                return err
             }
            SourceBundleReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ApplicationName (a required property) was received
    if !ApplicationNameReceived {
        return errors.New("\"ApplicationName\" is required but was not present")
    }
    // check if SourceBundle (a required property) was received
    if !SourceBundleReceived {
        return errors.New("\"SourceBundle\" is required but was not present")
    }
    return nil
}

func (strct *SourceBundle) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "S3Bucket" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "S3Bucket" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3Bucket\": ")
	if tmp, err := json.Marshal(strct.S3Bucket); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "S3Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "S3Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3Key\": ")
	if tmp, err := json.Marshal(strct.S3Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SourceBundle) UnmarshalJSON(b []byte) error {
    S3BucketReceived := false
    S3KeyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "S3Bucket":
            if err := json.Unmarshal([]byte(v), &strct.S3Bucket); err != nil {
                return err
             }
            S3BucketReceived = true
        case "S3Key":
            if err := json.Unmarshal([]byte(v), &strct.S3Key); err != nil {
                return err
             }
            S3KeyReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if S3Bucket (a required property) was received
    if !S3BucketReceived {
        return errors.New("\"S3Bucket\" is required but was not present")
    }
    // check if S3Key (a required property) was received
    if !S3KeyReceived {
        return errors.New("\"S3Key\" is required but was not present")
    }
    return nil
}
