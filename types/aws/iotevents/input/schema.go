// Code generated by schema-generate. DO NOT EDIT.

package input

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// Attribute The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using `BatchPutMessage`. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the `condition` expressions used by detectors that monitor this input.
type Attribute struct {

  // An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to AWS IoT Events (`BatchPutMessage`). Each such message contains a JSON payload. The attribute (and its paired value) specified here are available for use in the `condition` expressions used by detectors.
  // 
  // _Syntax_: `<field-name>.<field-name>...`
  JsonPath string `json:"JsonPath"`
}

// InputDefinition The definition of the input.
type InputDefinition struct {

  // The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using `BatchPutMessage`. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the `condition` expressions used by detectors that monitor this input.
  Attributes []*Attribute `json:"Attributes"`
}

// Resource The AWS::IoTEvents::Input resource creates an input. To monitor your devices and processes, they must have a way to get telemetry data into AWS IoT Events. This is done by sending messages as *inputs* to AWS IoT Events. For more information, see [How to Use AWS IoT Events](https://docs.aws.amazon.com/iotevents/latest/developerguide/how-to-use-iotevents.html) in the *AWS IoT Events Developer Guide*.
type Resource struct {
  InputDefinition *InputDefinition `json:"InputDefinition"`

  // A brief description of the input.
  InputDescription string `json:"InputDescription,omitempty"`

  // The name of the input.
  InputName string `json:"InputName,omitempty"`

  // An array of key-value pairs to apply to this resource.
  // 
  // For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag Tags to be applied to Input.
type Tag struct {

  // Key of the Tag.
  Key string `json:"Key"`

  // Value of the Tag.
  Value string `json:"Value"`
}

func (strct *Attribute) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "JsonPath" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "JsonPath" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"JsonPath\": ")
	if tmp, err := json.Marshal(strct.JsonPath); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Attribute) UnmarshalJSON(b []byte) error {
    JsonPathReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "JsonPath":
            if err := json.Unmarshal([]byte(v), &strct.JsonPath); err != nil {
                return err
             }
            JsonPathReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if JsonPath (a required property) was received
    if !JsonPathReceived {
        return errors.New("\"JsonPath\" is required but was not present")
    }
    return nil
}

func (strct *InputDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Attributes" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Attributes" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Attributes\": ")
	if tmp, err := json.Marshal(strct.Attributes); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *InputDefinition) UnmarshalJSON(b []byte) error {
    AttributesReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Attributes":
            if err := json.Unmarshal([]byte(v), &strct.Attributes); err != nil {
                return err
             }
            AttributesReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Attributes (a required property) was received
    if !AttributesReceived {
        return errors.New("\"Attributes\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "InputDefinition" field is required
    if strct.InputDefinition == nil {
        return nil, errors.New("InputDefinition is a required field")
    }
    // Marshal the "InputDefinition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InputDefinition\": ")
	if tmp, err := json.Marshal(strct.InputDefinition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InputDescription" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InputDescription\": ")
	if tmp, err := json.Marshal(strct.InputDescription); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InputName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InputName\": ")
	if tmp, err := json.Marshal(strct.InputName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    InputDefinitionReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "InputDefinition":
            if err := json.Unmarshal([]byte(v), &strct.InputDefinition); err != nil {
                return err
             }
            InputDefinitionReceived = true
        case "InputDescription":
            if err := json.Unmarshal([]byte(v), &strct.InputDescription); err != nil {
                return err
             }
        case "InputName":
            if err := json.Unmarshal([]byte(v), &strct.InputName); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if InputDefinition (a required property) was received
    if !InputDefinitionReceived {
        return errors.New("\"InputDefinition\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
