// Code generated by schema-generate. DO NOT EDIT.

package objecttype

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// FieldMap 
type FieldMap struct {
  Name string `json:"Name,omitempty"`
  ObjectTypeField *ObjectTypeField `json:"ObjectTypeField,omitempty"`
}

// KeyMap 
type KeyMap struct {
  Name string `json:"Name,omitempty"`
  ObjectTypeKeyList []*ObjectTypeKey `json:"ObjectTypeKeyList,omitempty"`
}

// ObjectTypeField Represents a field in a ProfileObjectType.
type ObjectTypeField struct {

  // The content type of the field. Used for determining equality when searching.
  ContentType string `json:"ContentType,omitempty"`

  // A field of a ProfileObject. For example: _source.FirstName, where "_source" is a ProfileObjectType of a Zendesk user and "FirstName" is a field in that ObjectType.
  Source string `json:"Source,omitempty"`

  // The location of the data in the standard ProfileObject model. For example: _profile.Address.PostalCode.
  Target string `json:"Target,omitempty"`
}

// ObjectTypeKey An object that defines the Key element of a ProfileObject. A Key is a special element that can be used to search for a customer profile.
type ObjectTypeKey struct {

  // The reference for the key name of the fields map. 
  FieldNames []string `json:"FieldNames,omitempty"`

  // The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.
  StandardIdentifiers []string `json:"StandardIdentifiers,omitempty"`
}

// Resource An ObjectType resource of Amazon Connect Customer Profiles
type Resource struct {

  // Indicates whether a profile should be created when data is received.
  AllowProfileCreation bool `json:"AllowProfileCreation,omitempty"`

  // The time of this integration got created.
  CreatedAt string `json:"CreatedAt,omitempty"`

  // Description of the profile object type.
  Description string `json:"Description,omitempty"`

  // The unique name of the domain.
  DomainName string `json:"DomainName"`

  // The default encryption key
  EncryptionKey string `json:"EncryptionKey,omitempty"`

  // The default number of days until the data within the domain expires.
  ExpirationDays int `json:"ExpirationDays,omitempty"`

  // A list of the name and ObjectType field.
  Fields []*FieldMap `json:"Fields,omitempty"`

  // A list of unique keys that can be used to map data to the profile.
  Keys []*KeyMap `json:"Keys,omitempty"`

  // The time of this integration got last updated at.
  LastUpdatedAt string `json:"LastUpdatedAt,omitempty"`

  // The name of the profile object type.
  ObjectTypeName string `json:"ObjectTypeName,omitempty"`

  // The tags (keys and values) associated with the integration.
  Tags []*Tag `json:"Tags,omitempty"`

  // A unique identifier for the object template.
  TemplateId string `json:"TemplateId,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *FieldMap) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ObjectTypeField" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ObjectTypeField\": ")
	if tmp, err := json.Marshal(strct.ObjectTypeField); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *FieldMap) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "ObjectTypeField":
            if err := json.Unmarshal([]byte(v), &strct.ObjectTypeField); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *KeyMap) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ObjectTypeKeyList" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ObjectTypeKeyList\": ")
	if tmp, err := json.Marshal(strct.ObjectTypeKeyList); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *KeyMap) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "ObjectTypeKeyList":
            if err := json.Unmarshal([]byte(v), &strct.ObjectTypeKeyList); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ObjectTypeField) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ContentType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ContentType\": ")
	if tmp, err := json.Marshal(strct.ContentType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Source" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Source\": ")
	if tmp, err := json.Marshal(strct.Source); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Target" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Target\": ")
	if tmp, err := json.Marshal(strct.Target); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ObjectTypeField) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ContentType":
            if err := json.Unmarshal([]byte(v), &strct.ContentType); err != nil {
                return err
             }
        case "Source":
            if err := json.Unmarshal([]byte(v), &strct.Source); err != nil {
                return err
             }
        case "Target":
            if err := json.Unmarshal([]byte(v), &strct.Target); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ObjectTypeKey) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "FieldNames" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FieldNames\": ")
	if tmp, err := json.Marshal(strct.FieldNames); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StandardIdentifiers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StandardIdentifiers\": ")
	if tmp, err := json.Marshal(strct.StandardIdentifiers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ObjectTypeKey) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "FieldNames":
            if err := json.Unmarshal([]byte(v), &strct.FieldNames); err != nil {
                return err
             }
        case "StandardIdentifiers":
            if err := json.Unmarshal([]byte(v), &strct.StandardIdentifiers); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllowProfileCreation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowProfileCreation\": ")
	if tmp, err := json.Marshal(strct.AllowProfileCreation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CreatedAt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreatedAt\": ")
	if tmp, err := json.Marshal(strct.CreatedAt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DomainName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DomainName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DomainName\": ")
	if tmp, err := json.Marshal(strct.DomainName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EncryptionKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EncryptionKey\": ")
	if tmp, err := json.Marshal(strct.EncryptionKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ExpirationDays" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ExpirationDays\": ")
	if tmp, err := json.Marshal(strct.ExpirationDays); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Fields" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Fields\": ")
	if tmp, err := json.Marshal(strct.Fields); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Keys" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Keys\": ")
	if tmp, err := json.Marshal(strct.Keys); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LastUpdatedAt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LastUpdatedAt\": ")
	if tmp, err := json.Marshal(strct.LastUpdatedAt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ObjectTypeName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ObjectTypeName\": ")
	if tmp, err := json.Marshal(strct.ObjectTypeName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TemplateId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TemplateId\": ")
	if tmp, err := json.Marshal(strct.TemplateId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DomainNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllowProfileCreation":
            if err := json.Unmarshal([]byte(v), &strct.AllowProfileCreation); err != nil {
                return err
             }
        case "CreatedAt":
            if err := json.Unmarshal([]byte(v), &strct.CreatedAt); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "DomainName":
            if err := json.Unmarshal([]byte(v), &strct.DomainName); err != nil {
                return err
             }
            DomainNameReceived = true
        case "EncryptionKey":
            if err := json.Unmarshal([]byte(v), &strct.EncryptionKey); err != nil {
                return err
             }
        case "ExpirationDays":
            if err := json.Unmarshal([]byte(v), &strct.ExpirationDays); err != nil {
                return err
             }
        case "Fields":
            if err := json.Unmarshal([]byte(v), &strct.Fields); err != nil {
                return err
             }
        case "Keys":
            if err := json.Unmarshal([]byte(v), &strct.Keys); err != nil {
                return err
             }
        case "LastUpdatedAt":
            if err := json.Unmarshal([]byte(v), &strct.LastUpdatedAt); err != nil {
                return err
             }
        case "ObjectTypeName":
            if err := json.Unmarshal([]byte(v), &strct.ObjectTypeName); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TemplateId":
            if err := json.Unmarshal([]byte(v), &strct.TemplateId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DomainName (a required property) was received
    if !DomainNameReceived {
        return errors.New("\"DomainName\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
