// Code generated by schema-generate. DO NOT EDIT.

package studio

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource schema for AWS::EMR::Studio
type Resource struct {

  // The Amazon Resource Name (ARN) of the EMR Studio.
  Arn string `json:"Arn,omitempty"`

  // Specifies whether the Studio authenticates users using single sign-on (SSO) or IAM. Amazon EMR Studio currently only supports SSO authentication.
  AuthMode string `json:"AuthMode"`

  // The default Amazon S3 location to back up EMR Studio Workspaces and notebook files. A Studio user can select an alternative Amazon S3 location when creating a Workspace.
  DefaultS3Location string `json:"DefaultS3Location"`

  // A detailed description of the Studio.
  Description string `json:"Description,omitempty"`

  // The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by VpcId.
  EngineSecurityGroupId string `json:"EngineSecurityGroupId"`

  // Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for authentication when logging in to a Studio with the Studio URL.
  IdpAuthUrl string `json:"IdpAuthUrl,omitempty"`

  // The name of relay state parameter for external Identity Provider.
  IdpRelayStateParameterName string `json:"IdpRelayStateParameterName,omitempty"`

  // A descriptive name for the Amazon EMR Studio.
  Name string `json:"Name"`

  // The IAM role that will be assumed by the Amazon EMR Studio. The service role provides a way for Amazon EMR Studio to interoperate with other AWS services.
  ServiceRole string `json:"ServiceRole"`

  // The ID of the EMR Studio.
  StudioId string `json:"StudioId,omitempty"`

  // A list of up to 5 subnet IDs to associate with the Studio. The subnets must belong to the VPC specified by VpcId. Studio users can create a Workspace in any of the specified subnets.
  SubnetIds []string `json:"SubnetIds"`

  // A list of tags to associate with the Studio. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
  Tags []*Tag `json:"Tags,omitempty"`

  // The unique Studio access URL.
  Url string `json:"Url,omitempty"`

  // The IAM user role that will be assumed by users and groups logged in to a Studio. The permissions attached to this IAM role can be scoped down for each user or group using session policies.
  UserRole string `json:"UserRole,omitempty"`

  // The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.
  VpcId string `json:"VpcId"`

  // The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic to resources in the Engine security group, and it must be in the same VPC specified by VpcId.
  WorkspaceSecurityGroupId string `json:"WorkspaceSecurityGroupId"`
}

// Tag An arbitrary set of tags (key-value pairs) for this EMR Studio.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "AuthMode" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AuthMode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AuthMode\": ")
	if tmp, err := json.Marshal(strct.AuthMode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DefaultS3Location" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DefaultS3Location" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultS3Location\": ")
	if tmp, err := json.Marshal(strct.DefaultS3Location); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "EngineSecurityGroupId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "EngineSecurityGroupId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EngineSecurityGroupId\": ")
	if tmp, err := json.Marshal(strct.EngineSecurityGroupId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IdpAuthUrl" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IdpAuthUrl\": ")
	if tmp, err := json.Marshal(strct.IdpAuthUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IdpRelayStateParameterName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IdpRelayStateParameterName\": ")
	if tmp, err := json.Marshal(strct.IdpRelayStateParameterName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ServiceRole" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ServiceRole" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServiceRole\": ")
	if tmp, err := json.Marshal(strct.ServiceRole); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StudioId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StudioId\": ")
	if tmp, err := json.Marshal(strct.StudioId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SubnetIds" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SubnetIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubnetIds\": ")
	if tmp, err := json.Marshal(strct.SubnetIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UserRole" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UserRole\": ")
	if tmp, err := json.Marshal(strct.UserRole); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "VpcId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "VpcId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcId\": ")
	if tmp, err := json.Marshal(strct.VpcId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "WorkspaceSecurityGroupId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "WorkspaceSecurityGroupId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WorkspaceSecurityGroupId\": ")
	if tmp, err := json.Marshal(strct.WorkspaceSecurityGroupId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AuthModeReceived := false
    DefaultS3LocationReceived := false
    EngineSecurityGroupIdReceived := false
    NameReceived := false
    ServiceRoleReceived := false
    SubnetIdsReceived := false
    VpcIdReceived := false
    WorkspaceSecurityGroupIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "AuthMode":
            if err := json.Unmarshal([]byte(v), &strct.AuthMode); err != nil {
                return err
             }
            AuthModeReceived = true
        case "DefaultS3Location":
            if err := json.Unmarshal([]byte(v), &strct.DefaultS3Location); err != nil {
                return err
             }
            DefaultS3LocationReceived = true
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "EngineSecurityGroupId":
            if err := json.Unmarshal([]byte(v), &strct.EngineSecurityGroupId); err != nil {
                return err
             }
            EngineSecurityGroupIdReceived = true
        case "IdpAuthUrl":
            if err := json.Unmarshal([]byte(v), &strct.IdpAuthUrl); err != nil {
                return err
             }
        case "IdpRelayStateParameterName":
            if err := json.Unmarshal([]byte(v), &strct.IdpRelayStateParameterName); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "ServiceRole":
            if err := json.Unmarshal([]byte(v), &strct.ServiceRole); err != nil {
                return err
             }
            ServiceRoleReceived = true
        case "StudioId":
            if err := json.Unmarshal([]byte(v), &strct.StudioId); err != nil {
                return err
             }
        case "SubnetIds":
            if err := json.Unmarshal([]byte(v), &strct.SubnetIds); err != nil {
                return err
             }
            SubnetIdsReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "Url":
            if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
                return err
             }
        case "UserRole":
            if err := json.Unmarshal([]byte(v), &strct.UserRole); err != nil {
                return err
             }
        case "VpcId":
            if err := json.Unmarshal([]byte(v), &strct.VpcId); err != nil {
                return err
             }
            VpcIdReceived = true
        case "WorkspaceSecurityGroupId":
            if err := json.Unmarshal([]byte(v), &strct.WorkspaceSecurityGroupId); err != nil {
                return err
             }
            WorkspaceSecurityGroupIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AuthMode (a required property) was received
    if !AuthModeReceived {
        return errors.New("\"AuthMode\" is required but was not present")
    }
    // check if DefaultS3Location (a required property) was received
    if !DefaultS3LocationReceived {
        return errors.New("\"DefaultS3Location\" is required but was not present")
    }
    // check if EngineSecurityGroupId (a required property) was received
    if !EngineSecurityGroupIdReceived {
        return errors.New("\"EngineSecurityGroupId\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if ServiceRole (a required property) was received
    if !ServiceRoleReceived {
        return errors.New("\"ServiceRole\" is required but was not present")
    }
    // check if SubnetIds (a required property) was received
    if !SubnetIdsReceived {
        return errors.New("\"SubnetIds\" is required but was not present")
    }
    // check if VpcId (a required property) was received
    if !VpcIdReceived {
        return errors.New("\"VpcId\" is required but was not present")
    }
    // check if WorkspaceSecurityGroupId (a required property) was received
    if !WorkspaceSecurityGroupIdReceived {
        return errors.New("\"WorkspaceSecurityGroupId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
