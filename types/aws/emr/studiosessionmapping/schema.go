// Code generated by schema-generate. DO NOT EDIT.

package studiosessionmapping

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource An example resource schema demonstrating some basic constructs and validation rules.
type Resource struct {

  // The name of the user or group. For more information, see UserName and DisplayName in the AWS SSO Identity Store API Reference. Either IdentityName or IdentityId must be specified.
  IdentityName string `json:"IdentityName"`

  // Specifies whether the identity to map to the Studio is a user or a group.
  IdentityType string `json:"IdentityType"`

  // The Amazon Resource Name (ARN) for the session policy that will be applied to the user or group. Session policies refine Studio user permissions without the need to use multiple IAM user roles.
  SessionPolicyArn string `json:"SessionPolicyArn"`

  // The ID of the Amazon EMR Studio to which the user or group will be mapped.
  StudioId string `json:"StudioId"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "IdentityName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IdentityName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IdentityName\": ")
	if tmp, err := json.Marshal(strct.IdentityName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IdentityType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IdentityType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IdentityType\": ")
	if tmp, err := json.Marshal(strct.IdentityType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SessionPolicyArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SessionPolicyArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SessionPolicyArn\": ")
	if tmp, err := json.Marshal(strct.SessionPolicyArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "StudioId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "StudioId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StudioId\": ")
	if tmp, err := json.Marshal(strct.StudioId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    IdentityNameReceived := false
    IdentityTypeReceived := false
    SessionPolicyArnReceived := false
    StudioIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "IdentityName":
            if err := json.Unmarshal([]byte(v), &strct.IdentityName); err != nil {
                return err
             }
            IdentityNameReceived = true
        case "IdentityType":
            if err := json.Unmarshal([]byte(v), &strct.IdentityType); err != nil {
                return err
             }
            IdentityTypeReceived = true
        case "SessionPolicyArn":
            if err := json.Unmarshal([]byte(v), &strct.SessionPolicyArn); err != nil {
                return err
             }
            SessionPolicyArnReceived = true
        case "StudioId":
            if err := json.Unmarshal([]byte(v), &strct.StudioId); err != nil {
                return err
             }
            StudioIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if IdentityName (a required property) was received
    if !IdentityNameReceived {
        return errors.New("\"IdentityName\" is required but was not present")
    }
    // check if IdentityType (a required property) was received
    if !IdentityTypeReceived {
        return errors.New("\"IdentityType\" is required but was not present")
    }
    // check if SessionPolicyArn (a required property) was received
    if !SessionPolicyArnReceived {
        return errors.New("\"SessionPolicyArn\" is required but was not present")
    }
    // check if StudioId (a required property) was received
    if !StudioIdReceived {
        return errors.New("\"StudioId\" is required but was not present")
    }
    return nil
}
