// Code generated by schema-generate. DO NOT EDIT.

package cidrcollection

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Location 
type Location struct {

  // A list of CIDR blocks.
  CidrList []string `json:"CidrList"`

  // The name of the location that is associated with the CIDR collection.
  LocationName string `json:"LocationName"`
}

// Resource Resource schema for AWS::Route53::CidrCollection.
type Resource struct {

  // The Amazon resource name (ARN) to uniquely identify the AWS resource.
  Arn string `json:"Arn,omitempty"`

  // UUID of the CIDR collection.
  Id string `json:"Id,omitempty"`

  // A complex type that contains information about the list of CIDR locations.
  Locations []*Location `json:"Locations,omitempty"`

  // A unique name for the CIDR collection.
  Name string `json:"Name"`
}

func (strct *Location) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "CidrList" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CidrList" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CidrList\": ")
	if tmp, err := json.Marshal(strct.CidrList); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "LocationName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LocationName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocationName\": ")
	if tmp, err := json.Marshal(strct.LocationName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Location) UnmarshalJSON(b []byte) error {
    CidrListReceived := false
    LocationNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CidrList":
            if err := json.Unmarshal([]byte(v), &strct.CidrList); err != nil {
                return err
             }
            CidrListReceived = true
        case "LocationName":
            if err := json.Unmarshal([]byte(v), &strct.LocationName); err != nil {
                return err
             }
            LocationNameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CidrList (a required property) was received
    if !CidrListReceived {
        return errors.New("\"CidrList\" is required but was not present")
    }
    // check if LocationName (a required property) was received
    if !LocationNameReceived {
        return errors.New("\"LocationName\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Locations" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Locations\": ")
	if tmp, err := json.Marshal(strct.Locations); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "Locations":
            if err := json.Unmarshal([]byte(v), &strct.Locations); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}
