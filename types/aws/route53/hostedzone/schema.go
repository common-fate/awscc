// Code generated by schema-generate. DO NOT EDIT.

package hostedzone

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// HostedZoneConfig A complex type that contains an optional comment.
// 
// If you don't want to specify a comment, omit the HostedZoneConfig and Comment elements.
type HostedZoneConfig struct {

  // Any comments that you want to include about the hosted zone.
  Comment string `json:"Comment,omitempty"`
}

// HostedZoneTag A complex type that contains information about a tag that you want to add or edit for the specified health check or hosted zone.
type HostedZoneTag struct {

  // The key name of the tag.
  Key string `json:"Key"`

  // The value for the tag.
  Value string `json:"Value"`
}

// QueryLoggingConfig A complex type that contains information about a configuration for DNS query logging.
type QueryLoggingConfig struct {

  // The Amazon Resource Name (ARN) of the CloudWatch Logs log group that Amazon Route 53 is publishing logs to.
  CloudWatchLogsLogGroupArn string `json:"CloudWatchLogsLogGroupArn"`
}

// Resource Resource schema for AWS::Route53::HostedZone.
type Resource struct {
  HostedZoneConfig *HostedZoneConfig `json:"HostedZoneConfig,omitempty"`

  // Adds, edits, or deletes tags for a health check or a hosted zone.
  // 
  // For information about using tags for cost allocation, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
  HostedZoneTags []*HostedZoneTag `json:"HostedZoneTags,omitempty"`
  Id string `json:"Id,omitempty"`

  // The name of the domain. Specify a fully qualified domain name, for example, www.example.com. The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Route 53 treats www.example.com (without a trailing dot) and www.example.com. (with a trailing dot) as identical.
  // 
  // If you're creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name is registered with a registrar other than Route 53, change the name servers for your domain to the set of NameServers that are returned by the Fn::GetAtt intrinsic function.
  Name string `json:"Name,omitempty"`
  NameServers []string `json:"NameServers,omitempty"`
  QueryLoggingConfig *QueryLoggingConfig `json:"QueryLoggingConfig,omitempty"`

  // A complex type that contains information about the VPCs that are associated with the specified hosted zone.
  VPCs []*VPC `json:"VPCs,omitempty"`
}

// VPC A complex type that contains information about an Amazon VPC. Route 53 Resolver uses the records in the private hosted zone to route traffic in that VPC.
type VPC struct {

  // The ID of an Amazon VPC.
  VPCId string `json:"VPCId"`

  // The region that an Amazon VPC was created in. See https://docs.aws.amazon.com/general/latest/gr/rande.html for a list of up to date regions.
  VPCRegion string `json:"VPCRegion"`
}

func (strct *HostedZoneConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Comment" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Comment\": ")
	if tmp, err := json.Marshal(strct.Comment); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *HostedZoneConfig) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Comment":
            if err := json.Unmarshal([]byte(v), &strct.Comment); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *HostedZoneTag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *HostedZoneTag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *QueryLoggingConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "CloudWatchLogsLogGroupArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CloudWatchLogsLogGroupArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CloudWatchLogsLogGroupArn\": ")
	if tmp, err := json.Marshal(strct.CloudWatchLogsLogGroupArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *QueryLoggingConfig) UnmarshalJSON(b []byte) error {
    CloudWatchLogsLogGroupArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CloudWatchLogsLogGroupArn":
            if err := json.Unmarshal([]byte(v), &strct.CloudWatchLogsLogGroupArn); err != nil {
                return err
             }
            CloudWatchLogsLogGroupArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CloudWatchLogsLogGroupArn (a required property) was received
    if !CloudWatchLogsLogGroupArnReceived {
        return errors.New("\"CloudWatchLogsLogGroupArn\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "HostedZoneConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HostedZoneConfig\": ")
	if tmp, err := json.Marshal(strct.HostedZoneConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HostedZoneTags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HostedZoneTags\": ")
	if tmp, err := json.Marshal(strct.HostedZoneTags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NameServers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NameServers\": ")
	if tmp, err := json.Marshal(strct.NameServers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "QueryLoggingConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"QueryLoggingConfig\": ")
	if tmp, err := json.Marshal(strct.QueryLoggingConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VPCs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VPCs\": ")
	if tmp, err := json.Marshal(strct.VPCs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "HostedZoneConfig":
            if err := json.Unmarshal([]byte(v), &strct.HostedZoneConfig); err != nil {
                return err
             }
        case "HostedZoneTags":
            if err := json.Unmarshal([]byte(v), &strct.HostedZoneTags); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "NameServers":
            if err := json.Unmarshal([]byte(v), &strct.NameServers); err != nil {
                return err
             }
        case "QueryLoggingConfig":
            if err := json.Unmarshal([]byte(v), &strct.QueryLoggingConfig); err != nil {
                return err
             }
        case "VPCs":
            if err := json.Unmarshal([]byte(v), &strct.VPCs); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *VPC) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "VPCId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "VPCId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VPCId\": ")
	if tmp, err := json.Marshal(strct.VPCId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "VPCRegion" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "VPCRegion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VPCRegion\": ")
	if tmp, err := json.Marshal(strct.VPCRegion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *VPC) UnmarshalJSON(b []byte) error {
    VPCIdReceived := false
    VPCRegionReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "VPCId":
            if err := json.Unmarshal([]byte(v), &strct.VPCId); err != nil {
                return err
             }
            VPCIdReceived = true
        case "VPCRegion":
            if err := json.Unmarshal([]byte(v), &strct.VPCRegion); err != nil {
                return err
             }
            VPCRegionReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if VPCId (a required property) was received
    if !VPCIdReceived {
        return errors.New("\"VPCId\" is required but was not present")
    }
    // check if VPCRegion (a required property) was received
    if !VPCRegionReceived {
        return errors.New("\"VPCRegion\" is required but was not present")
    }
    return nil
}
