// Code generated by schema-generate. DO NOT EDIT.

package imagepipeline

import (
    "fmt"
    "bytes"
    "encoding/json"
)

// EcrConfiguration Settings for Image Builder to configure the ECR repository and output container images that are scanned.
type EcrConfiguration struct {

  // Tags for Image Builder to apply the output container image that is scanned. Tags can help you identify and manage your scanned images.
  ContainerTags []string `json:"ContainerTags,omitempty"`

  // The name of the container repository that Amazon Inspector scans to identify findings for your container images. The name includes the path for the repository location. If you don?t provide this information, Image Builder creates a repository in your account named image-builder-image-scanning-repository to use for vulnerability scans for your output container images.
  RepositoryName string `json:"RepositoryName,omitempty"`
}

// ImageScanningConfiguration Determines if tests should run after building the image. Image Builder defaults to enable tests to run following the image build, before image distribution.
type ImageScanningConfiguration struct {

  // Contains ECR settings for vulnerability scans.
  EcrConfiguration *EcrConfiguration `json:"EcrConfiguration,omitempty"`

  // This sets whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
  ImageScanningEnabled bool `json:"ImageScanningEnabled,omitempty"`
}

// ImageTestsConfiguration Image tests configuration.
type ImageTestsConfiguration struct {

  // Defines if tests should be executed when building this image.
  ImageTestsEnabled bool `json:"ImageTestsEnabled,omitempty"`

  // The maximum time in minutes that tests are permitted to run.
  TimeoutMinutes int `json:"TimeoutMinutes,omitempty"`
}

// Resource Resource schema for AWS::ImageBuilder::ImagePipeline
type Resource struct {

  // The Amazon Resource Name (ARN) of the image pipeline.
  Arn string `json:"Arn,omitempty"`

  // The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.
  ContainerRecipeArn string `json:"ContainerRecipeArn,omitempty"`

  // The description of the image pipeline.
  Description string `json:"Description,omitempty"`

  // The Amazon Resource Name (ARN) of the distribution configuration associated with this image pipeline.
  DistributionConfigurationArn string `json:"DistributionConfigurationArn,omitempty"`

  // Collects additional information about the image being created, including the operating system (OS) version and package list.
  EnhancedImageMetadataEnabled bool `json:"EnhancedImageMetadataEnabled,omitempty"`

  // The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.
  ImageRecipeArn string `json:"ImageRecipeArn,omitempty"`

  // Contains settings for vulnerability scans.
  ImageScanningConfiguration *ImageScanningConfiguration `json:"ImageScanningConfiguration,omitempty"`

  // The image tests configuration of the image pipeline.
  ImageTestsConfiguration *ImageTestsConfiguration `json:"ImageTestsConfiguration,omitempty"`

  // The Amazon Resource Name (ARN) of the infrastructure configuration associated with this image pipeline.
  InfrastructureConfigurationArn string `json:"InfrastructureConfigurationArn,omitempty"`

  // The name of the image pipeline.
  Name string `json:"Name,omitempty"`

  // The schedule of the image pipeline.
  Schedule *Schedule `json:"Schedule,omitempty"`

  // The status of the image pipeline.
  Status string `json:"Status,omitempty"`

  // The tags of this image pipeline.
  Tags *Tags `json:"Tags,omitempty"`
}

// Schedule The schedule of the image pipeline.
type Schedule struct {

  // The condition configures when the pipeline should trigger a new image build.
  PipelineExecutionStartCondition string `json:"PipelineExecutionStartCondition,omitempty"`

  // The expression determines how often EC2 Image Builder evaluates your pipelineExecutionStartCondition.
  ScheduleExpression string `json:"ScheduleExpression,omitempty"`
}

// Tags The tags of this image pipeline.
type Tags struct {
}

func (strct *EcrConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ContainerTags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ContainerTags\": ")
	if tmp, err := json.Marshal(strct.ContainerTags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RepositoryName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RepositoryName\": ")
	if tmp, err := json.Marshal(strct.RepositoryName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *EcrConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ContainerTags":
            if err := json.Unmarshal([]byte(v), &strct.ContainerTags); err != nil {
                return err
             }
        case "RepositoryName":
            if err := json.Unmarshal([]byte(v), &strct.RepositoryName); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ImageScanningConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "EcrConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EcrConfiguration\": ")
	if tmp, err := json.Marshal(strct.EcrConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ImageScanningEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ImageScanningEnabled\": ")
	if tmp, err := json.Marshal(strct.ImageScanningEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ImageScanningConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "EcrConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.EcrConfiguration); err != nil {
                return err
             }
        case "ImageScanningEnabled":
            if err := json.Unmarshal([]byte(v), &strct.ImageScanningEnabled); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ImageTestsConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ImageTestsEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ImageTestsEnabled\": ")
	if tmp, err := json.Marshal(strct.ImageTestsEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TimeoutMinutes" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeoutMinutes\": ")
	if tmp, err := json.Marshal(strct.TimeoutMinutes); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ImageTestsConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ImageTestsEnabled":
            if err := json.Unmarshal([]byte(v), &strct.ImageTestsEnabled); err != nil {
                return err
             }
        case "TimeoutMinutes":
            if err := json.Unmarshal([]byte(v), &strct.TimeoutMinutes); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ContainerRecipeArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ContainerRecipeArn\": ")
	if tmp, err := json.Marshal(strct.ContainerRecipeArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DistributionConfigurationArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DistributionConfigurationArn\": ")
	if tmp, err := json.Marshal(strct.DistributionConfigurationArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EnhancedImageMetadataEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnhancedImageMetadataEnabled\": ")
	if tmp, err := json.Marshal(strct.EnhancedImageMetadataEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ImageRecipeArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ImageRecipeArn\": ")
	if tmp, err := json.Marshal(strct.ImageRecipeArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ImageScanningConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ImageScanningConfiguration\": ")
	if tmp, err := json.Marshal(strct.ImageScanningConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ImageTestsConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ImageTestsConfiguration\": ")
	if tmp, err := json.Marshal(strct.ImageTestsConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InfrastructureConfigurationArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InfrastructureConfigurationArn\": ")
	if tmp, err := json.Marshal(strct.InfrastructureConfigurationArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Schedule" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Schedule\": ")
	if tmp, err := json.Marshal(strct.Schedule); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "ContainerRecipeArn":
            if err := json.Unmarshal([]byte(v), &strct.ContainerRecipeArn); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "DistributionConfigurationArn":
            if err := json.Unmarshal([]byte(v), &strct.DistributionConfigurationArn); err != nil {
                return err
             }
        case "EnhancedImageMetadataEnabled":
            if err := json.Unmarshal([]byte(v), &strct.EnhancedImageMetadataEnabled); err != nil {
                return err
             }
        case "ImageRecipeArn":
            if err := json.Unmarshal([]byte(v), &strct.ImageRecipeArn); err != nil {
                return err
             }
        case "ImageScanningConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.ImageScanningConfiguration); err != nil {
                return err
             }
        case "ImageTestsConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.ImageTestsConfiguration); err != nil {
                return err
             }
        case "InfrastructureConfigurationArn":
            if err := json.Unmarshal([]byte(v), &strct.InfrastructureConfigurationArn); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "Schedule":
            if err := json.Unmarshal([]byte(v), &strct.Schedule); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Schedule) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "PipelineExecutionStartCondition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PipelineExecutionStartCondition\": ")
	if tmp, err := json.Marshal(strct.PipelineExecutionStartCondition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ScheduleExpression" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ScheduleExpression\": ")
	if tmp, err := json.Marshal(strct.ScheduleExpression); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Schedule) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "PipelineExecutionStartCondition":
            if err := json.Unmarshal([]byte(v), &strct.PipelineExecutionStartCondition); err != nil {
                return err
             }
        case "ScheduleExpression":
            if err := json.Unmarshal([]byte(v), &strct.ScheduleExpression); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tags) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tags) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
