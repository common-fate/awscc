// Code generated by schema-generate. DO NOT EDIT.

package firewallrulegroup

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// FirewallRule Firewall Rule associating the Rule Group to a Domain List
type FirewallRule struct {

  // Rule Action
  Action string `json:"Action"`

  // BlockOverrideDnsType
  BlockOverrideDnsType string `json:"BlockOverrideDnsType,omitempty"`

  // BlockOverrideDomain
  BlockOverrideDomain string `json:"BlockOverrideDomain,omitempty"`

  // BlockOverrideTtl
  BlockOverrideTtl int `json:"BlockOverrideTtl,omitempty"`

  // BlockResponse
  BlockResponse string `json:"BlockResponse,omitempty"`

  // ResourceId
  FirewallDomainListId string `json:"FirewallDomainListId"`

  // Rule Priority
  Priority int `json:"Priority"`
}

// Resource Resource schema for AWS::Route53Resolver::FirewallRuleGroup.
type Resource struct {

  // Arn
  Arn string `json:"Arn,omitempty"`

  // Rfc3339TimeString
  CreationTime string `json:"CreationTime,omitempty"`

  // The id of the creator request.
  CreatorRequestId string `json:"CreatorRequestId,omitempty"`

  // FirewallRules
  FirewallRules []*FirewallRule `json:"FirewallRules,omitempty"`

  // ResourceId
  Id string `json:"Id,omitempty"`

  // Rfc3339TimeString
  ModificationTime string `json:"ModificationTime,omitempty"`

  // FirewallRuleGroupName
  Name string `json:"Name,omitempty"`

  // AccountId
  OwnerId string `json:"OwnerId,omitempty"`

  // Count
  RuleCount int `json:"RuleCount,omitempty"`

  // ShareStatus, possible values are NOT_SHARED, SHARED_WITH_ME, SHARED_BY_ME.
  ShareStatus string `json:"ShareStatus,omitempty"`

  // ResolverFirewallRuleGroupAssociation, possible values are COMPLETE, DELETING, UPDATING, and INACTIVE_OWNER_ACCOUNT_CLOSED.
  Status string `json:"Status,omitempty"`

  // FirewallRuleGroupStatus
  StatusMessage string `json:"StatusMessage,omitempty"`

  // Tags
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Value string `json:"Value"`
}

func (strct *FirewallRule) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Action" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Action" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Action\": ")
	if tmp, err := json.Marshal(strct.Action); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BlockOverrideDnsType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BlockOverrideDnsType\": ")
	if tmp, err := json.Marshal(strct.BlockOverrideDnsType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BlockOverrideDomain" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BlockOverrideDomain\": ")
	if tmp, err := json.Marshal(strct.BlockOverrideDomain); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BlockOverrideTtl" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BlockOverrideTtl\": ")
	if tmp, err := json.Marshal(strct.BlockOverrideTtl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BlockResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BlockResponse\": ")
	if tmp, err := json.Marshal(strct.BlockResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "FirewallDomainListId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "FirewallDomainListId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FirewallDomainListId\": ")
	if tmp, err := json.Marshal(strct.FirewallDomainListId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Priority" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Priority" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Priority\": ")
	if tmp, err := json.Marshal(strct.Priority); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *FirewallRule) UnmarshalJSON(b []byte) error {
    ActionReceived := false
    FirewallDomainListIdReceived := false
    PriorityReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Action":
            if err := json.Unmarshal([]byte(v), &strct.Action); err != nil {
                return err
             }
            ActionReceived = true
        case "BlockOverrideDnsType":
            if err := json.Unmarshal([]byte(v), &strct.BlockOverrideDnsType); err != nil {
                return err
             }
        case "BlockOverrideDomain":
            if err := json.Unmarshal([]byte(v), &strct.BlockOverrideDomain); err != nil {
                return err
             }
        case "BlockOverrideTtl":
            if err := json.Unmarshal([]byte(v), &strct.BlockOverrideTtl); err != nil {
                return err
             }
        case "BlockResponse":
            if err := json.Unmarshal([]byte(v), &strct.BlockResponse); err != nil {
                return err
             }
        case "FirewallDomainListId":
            if err := json.Unmarshal([]byte(v), &strct.FirewallDomainListId); err != nil {
                return err
             }
            FirewallDomainListIdReceived = true
        case "Priority":
            if err := json.Unmarshal([]byte(v), &strct.Priority); err != nil {
                return err
             }
            PriorityReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Action (a required property) was received
    if !ActionReceived {
        return errors.New("\"Action\" is required but was not present")
    }
    // check if FirewallDomainListId (a required property) was received
    if !FirewallDomainListIdReceived {
        return errors.New("\"FirewallDomainListId\" is required but was not present")
    }
    // check if Priority (a required property) was received
    if !PriorityReceived {
        return errors.New("\"Priority\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CreationTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreationTime\": ")
	if tmp, err := json.Marshal(strct.CreationTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CreatorRequestId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreatorRequestId\": ")
	if tmp, err := json.Marshal(strct.CreatorRequestId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FirewallRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FirewallRules\": ")
	if tmp, err := json.Marshal(strct.FirewallRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ModificationTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ModificationTime\": ")
	if tmp, err := json.Marshal(strct.ModificationTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OwnerId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OwnerId\": ")
	if tmp, err := json.Marshal(strct.OwnerId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RuleCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RuleCount\": ")
	if tmp, err := json.Marshal(strct.RuleCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ShareStatus" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ShareStatus\": ")
	if tmp, err := json.Marshal(strct.ShareStatus); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StatusMessage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StatusMessage\": ")
	if tmp, err := json.Marshal(strct.StatusMessage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "CreationTime":
            if err := json.Unmarshal([]byte(v), &strct.CreationTime); err != nil {
                return err
             }
        case "CreatorRequestId":
            if err := json.Unmarshal([]byte(v), &strct.CreatorRequestId); err != nil {
                return err
             }
        case "FirewallRules":
            if err := json.Unmarshal([]byte(v), &strct.FirewallRules); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "ModificationTime":
            if err := json.Unmarshal([]byte(v), &strct.ModificationTime); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "OwnerId":
            if err := json.Unmarshal([]byte(v), &strct.OwnerId); err != nil {
                return err
             }
        case "RuleCount":
            if err := json.Unmarshal([]byte(v), &strct.RuleCount); err != nil {
                return err
             }
        case "ShareStatus":
            if err := json.Unmarshal([]byte(v), &strct.ShareStatus); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "StatusMessage":
            if err := json.Unmarshal([]byte(v), &strct.StatusMessage); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
