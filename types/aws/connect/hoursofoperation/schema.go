// Code generated by schema-generate. DO NOT EDIT.

package hoursofoperation

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// HoursOfOperationConfig Contains information about the hours of operation.
type HoursOfOperationConfig struct {

  // The day that the hours of operation applies to.
  Day string `json:"Day"`

  // The end time that your contact center closes.
  EndTime *HoursOfOperationTimeSlice `json:"EndTime"`

  // The start time that your contact center opens.
  StartTime *HoursOfOperationTimeSlice `json:"StartTime"`
}

// HoursOfOperationTimeSlice The start time or end time for an hours of operation.
type HoursOfOperationTimeSlice struct {

  // The hours.
  Hours int `json:"Hours"`

  // The minutes.
  Minutes int `json:"Minutes"`
}

// Resource Resource Type definition for AWS::Connect::HoursOfOperation
type Resource struct {

  // Configuration information for the hours of operation: day, start time, and end time.
  Config []*HoursOfOperationConfig `json:"Config"`

  // The description of the hours of operation.
  Description string `json:"Description,omitempty"`

  // The Amazon Resource Name (ARN) for the hours of operation.
  HoursOfOperationArn string `json:"HoursOfOperationArn,omitempty"`

  // The identifier of the Amazon Connect instance.
  InstanceArn string `json:"InstanceArn"`

  // The name of the hours of operation.
  Name string `json:"Name"`

  // One or more tags.
  Tags []*Tag `json:"Tags,omitempty"`

  // The time zone of the hours of operation.
  TimeZone string `json:"TimeZone"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Value string `json:"Value"`
}

func (strct *HoursOfOperationConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Day" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Day" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Day\": ")
	if tmp, err := json.Marshal(strct.Day); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "EndTime" field is required
    if strct.EndTime == nil {
        return nil, errors.New("EndTime is a required field")
    }
    // Marshal the "EndTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EndTime\": ")
	if tmp, err := json.Marshal(strct.EndTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "StartTime" field is required
    if strct.StartTime == nil {
        return nil, errors.New("StartTime is a required field")
    }
    // Marshal the "StartTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StartTime\": ")
	if tmp, err := json.Marshal(strct.StartTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *HoursOfOperationConfig) UnmarshalJSON(b []byte) error {
    DayReceived := false
    EndTimeReceived := false
    StartTimeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Day":
            if err := json.Unmarshal([]byte(v), &strct.Day); err != nil {
                return err
             }
            DayReceived = true
        case "EndTime":
            if err := json.Unmarshal([]byte(v), &strct.EndTime); err != nil {
                return err
             }
            EndTimeReceived = true
        case "StartTime":
            if err := json.Unmarshal([]byte(v), &strct.StartTime); err != nil {
                return err
             }
            StartTimeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Day (a required property) was received
    if !DayReceived {
        return errors.New("\"Day\" is required but was not present")
    }
    // check if EndTime (a required property) was received
    if !EndTimeReceived {
        return errors.New("\"EndTime\" is required but was not present")
    }
    // check if StartTime (a required property) was received
    if !StartTimeReceived {
        return errors.New("\"StartTime\" is required but was not present")
    }
    return nil
}

func (strct *HoursOfOperationTimeSlice) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Hours" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Hours" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Hours\": ")
	if tmp, err := json.Marshal(strct.Hours); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Minutes" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Minutes" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Minutes\": ")
	if tmp, err := json.Marshal(strct.Minutes); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *HoursOfOperationTimeSlice) UnmarshalJSON(b []byte) error {
    HoursReceived := false
    MinutesReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Hours":
            if err := json.Unmarshal([]byte(v), &strct.Hours); err != nil {
                return err
             }
            HoursReceived = true
        case "Minutes":
            if err := json.Unmarshal([]byte(v), &strct.Minutes); err != nil {
                return err
             }
            MinutesReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Hours (a required property) was received
    if !HoursReceived {
        return errors.New("\"Hours\" is required but was not present")
    }
    // check if Minutes (a required property) was received
    if !MinutesReceived {
        return errors.New("\"Minutes\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Config" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Config" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Config\": ")
	if tmp, err := json.Marshal(strct.Config); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HoursOfOperationArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HoursOfOperationArn\": ")
	if tmp, err := json.Marshal(strct.HoursOfOperationArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "InstanceArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "InstanceArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceArn\": ")
	if tmp, err := json.Marshal(strct.InstanceArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TimeZone" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TimeZone" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeZone\": ")
	if tmp, err := json.Marshal(strct.TimeZone); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ConfigReceived := false
    InstanceArnReceived := false
    NameReceived := false
    TimeZoneReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Config":
            if err := json.Unmarshal([]byte(v), &strct.Config); err != nil {
                return err
             }
            ConfigReceived = true
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "HoursOfOperationArn":
            if err := json.Unmarshal([]byte(v), &strct.HoursOfOperationArn); err != nil {
                return err
             }
        case "InstanceArn":
            if err := json.Unmarshal([]byte(v), &strct.InstanceArn); err != nil {
                return err
             }
            InstanceArnReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TimeZone":
            if err := json.Unmarshal([]byte(v), &strct.TimeZone); err != nil {
                return err
             }
            TimeZoneReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Config (a required property) was received
    if !ConfigReceived {
        return errors.New("\"Config\" is required but was not present")
    }
    // check if InstanceArn (a required property) was received
    if !InstanceArnReceived {
        return errors.New("\"InstanceArn\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if TimeZone (a required property) was received
    if !TimeZoneReceived {
        return errors.New("\"TimeZone\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
