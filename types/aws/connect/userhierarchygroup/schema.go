// Code generated by schema-generate. DO NOT EDIT.

package userhierarchygroup

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// Resource Resource Type definition for AWS::Connect::UserHierarchyGroup
type Resource struct {

  // The identifier of the Amazon Connect instance.
  InstanceArn string `json:"InstanceArn"`

  // The name of the user hierarchy group.
  Name string `json:"Name"`

  // The Amazon Resource Name (ARN) for the parent user hierarchy group.
  ParentGroupArn string `json:"ParentGroupArn,omitempty"`

  // The Amazon Resource Name (ARN) for the user hierarchy group.
  UserHierarchyGroupArn string `json:"UserHierarchyGroupArn,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "InstanceArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "InstanceArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceArn\": ")
	if tmp, err := json.Marshal(strct.InstanceArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ParentGroupArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ParentGroupArn\": ")
	if tmp, err := json.Marshal(strct.ParentGroupArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UserHierarchyGroupArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UserHierarchyGroupArn\": ")
	if tmp, err := json.Marshal(strct.UserHierarchyGroupArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    InstanceArnReceived := false
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "InstanceArn":
            if err := json.Unmarshal([]byte(v), &strct.InstanceArn); err != nil {
                return err
             }
            InstanceArnReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "ParentGroupArn":
            if err := json.Unmarshal([]byte(v), &strct.ParentGroupArn); err != nil {
                return err
             }
        case "UserHierarchyGroupArn":
            if err := json.Unmarshal([]byte(v), &strct.UserHierarchyGroupArn); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if InstanceArn (a required property) was received
    if !InstanceArnReceived {
        return errors.New("\"InstanceArn\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}
