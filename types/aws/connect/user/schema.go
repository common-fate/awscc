// Code generated by schema-generate. DO NOT EDIT.

package user

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// Resource Resource Type definition for AWS::Connect::User
type Resource struct {

  // The identifier of the user account in the directory used for identity management.
  DirectoryUserId string `json:"DirectoryUserId,omitempty"`

  // The identifier of the hierarchy group for the user.
  HierarchyGroupArn string `json:"HierarchyGroupArn,omitempty"`

  // The information about the identity of the user.
  IdentityInfo *UserIdentityInfo `json:"IdentityInfo,omitempty"`

  // The identifier of the Amazon Connect instance.
  InstanceArn string `json:"InstanceArn"`

  // The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.
  Password string `json:"Password,omitempty"`

  // The phone settings for the user.
  PhoneConfig *UserPhoneConfig `json:"PhoneConfig"`

  // The identifier of the routing profile for the user.
  RoutingProfileArn string `json:"RoutingProfileArn"`

  // One or more security profile arns for the user
  SecurityProfileArns []string `json:"SecurityProfileArns"`

  // One or more tags.
  Tags []*Tag `json:"Tags,omitempty"`

  // The Amazon Resource Name (ARN) for the user.
  UserArn string `json:"UserArn,omitempty"`

  // The user name for the account.
  Username string `json:"Username"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Value string `json:"Value"`
}

// UserIdentityInfo Contains information about the identity of a user.
type UserIdentityInfo struct {
  Email string `json:"Email,omitempty"`
  FirstName string `json:"FirstName,omitempty"`
  LastName string `json:"LastName,omitempty"`
  Mobile string `json:"Mobile,omitempty"`
  SecondaryEmail string `json:"SecondaryEmail,omitempty"`
}

// UserPhoneConfig Contains information about the phone configuration settings for a user.
type UserPhoneConfig struct {
  AfterContactWorkTimeLimit int `json:"AfterContactWorkTimeLimit,omitempty"`
  AutoAccept bool `json:"AutoAccept,omitempty"`
  DeskPhoneNumber string `json:"DeskPhoneNumber,omitempty"`
  PhoneType string `json:"PhoneType"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DirectoryUserId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DirectoryUserId\": ")
	if tmp, err := json.Marshal(strct.DirectoryUserId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HierarchyGroupArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HierarchyGroupArn\": ")
	if tmp, err := json.Marshal(strct.HierarchyGroupArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IdentityInfo" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IdentityInfo\": ")
	if tmp, err := json.Marshal(strct.IdentityInfo); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "InstanceArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "InstanceArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceArn\": ")
	if tmp, err := json.Marshal(strct.InstanceArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Password" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Password\": ")
	if tmp, err := json.Marshal(strct.Password); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PhoneConfig" field is required
    if strct.PhoneConfig == nil {
        return nil, errors.New("PhoneConfig is a required field")
    }
    // Marshal the "PhoneConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PhoneConfig\": ")
	if tmp, err := json.Marshal(strct.PhoneConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RoutingProfileArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RoutingProfileArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoutingProfileArn\": ")
	if tmp, err := json.Marshal(strct.RoutingProfileArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecurityProfileArns" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SecurityProfileArns" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecurityProfileArns\": ")
	if tmp, err := json.Marshal(strct.SecurityProfileArns); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UserArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UserArn\": ")
	if tmp, err := json.Marshal(strct.UserArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Username" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Username" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Username\": ")
	if tmp, err := json.Marshal(strct.Username); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    InstanceArnReceived := false
    PhoneConfigReceived := false
    RoutingProfileArnReceived := false
    SecurityProfileArnsReceived := false
    UsernameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DirectoryUserId":
            if err := json.Unmarshal([]byte(v), &strct.DirectoryUserId); err != nil {
                return err
             }
        case "HierarchyGroupArn":
            if err := json.Unmarshal([]byte(v), &strct.HierarchyGroupArn); err != nil {
                return err
             }
        case "IdentityInfo":
            if err := json.Unmarshal([]byte(v), &strct.IdentityInfo); err != nil {
                return err
             }
        case "InstanceArn":
            if err := json.Unmarshal([]byte(v), &strct.InstanceArn); err != nil {
                return err
             }
            InstanceArnReceived = true
        case "Password":
            if err := json.Unmarshal([]byte(v), &strct.Password); err != nil {
                return err
             }
        case "PhoneConfig":
            if err := json.Unmarshal([]byte(v), &strct.PhoneConfig); err != nil {
                return err
             }
            PhoneConfigReceived = true
        case "RoutingProfileArn":
            if err := json.Unmarshal([]byte(v), &strct.RoutingProfileArn); err != nil {
                return err
             }
            RoutingProfileArnReceived = true
        case "SecurityProfileArns":
            if err := json.Unmarshal([]byte(v), &strct.SecurityProfileArns); err != nil {
                return err
             }
            SecurityProfileArnsReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "UserArn":
            if err := json.Unmarshal([]byte(v), &strct.UserArn); err != nil {
                return err
             }
        case "Username":
            if err := json.Unmarshal([]byte(v), &strct.Username); err != nil {
                return err
             }
            UsernameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if InstanceArn (a required property) was received
    if !InstanceArnReceived {
        return errors.New("\"InstanceArn\" is required but was not present")
    }
    // check if PhoneConfig (a required property) was received
    if !PhoneConfigReceived {
        return errors.New("\"PhoneConfig\" is required but was not present")
    }
    // check if RoutingProfileArn (a required property) was received
    if !RoutingProfileArnReceived {
        return errors.New("\"RoutingProfileArn\" is required but was not present")
    }
    // check if SecurityProfileArns (a required property) was received
    if !SecurityProfileArnsReceived {
        return errors.New("\"SecurityProfileArns\" is required but was not present")
    }
    // check if Username (a required property) was received
    if !UsernameReceived {
        return errors.New("\"Username\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *UserIdentityInfo) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Email" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Email\": ")
	if tmp, err := json.Marshal(strct.Email); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FirstName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FirstName\": ")
	if tmp, err := json.Marshal(strct.FirstName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LastName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LastName\": ")
	if tmp, err := json.Marshal(strct.LastName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Mobile" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Mobile\": ")
	if tmp, err := json.Marshal(strct.Mobile); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecondaryEmail" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecondaryEmail\": ")
	if tmp, err := json.Marshal(strct.SecondaryEmail); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *UserIdentityInfo) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Email":
            if err := json.Unmarshal([]byte(v), &strct.Email); err != nil {
                return err
             }
        case "FirstName":
            if err := json.Unmarshal([]byte(v), &strct.FirstName); err != nil {
                return err
             }
        case "LastName":
            if err := json.Unmarshal([]byte(v), &strct.LastName); err != nil {
                return err
             }
        case "Mobile":
            if err := json.Unmarshal([]byte(v), &strct.Mobile); err != nil {
                return err
             }
        case "SecondaryEmail":
            if err := json.Unmarshal([]byte(v), &strct.SecondaryEmail); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *UserPhoneConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AfterContactWorkTimeLimit" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AfterContactWorkTimeLimit\": ")
	if tmp, err := json.Marshal(strct.AfterContactWorkTimeLimit); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AutoAccept" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AutoAccept\": ")
	if tmp, err := json.Marshal(strct.AutoAccept); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeskPhoneNumber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeskPhoneNumber\": ")
	if tmp, err := json.Marshal(strct.DeskPhoneNumber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PhoneType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "PhoneType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PhoneType\": ")
	if tmp, err := json.Marshal(strct.PhoneType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *UserPhoneConfig) UnmarshalJSON(b []byte) error {
    PhoneTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AfterContactWorkTimeLimit":
            if err := json.Unmarshal([]byte(v), &strct.AfterContactWorkTimeLimit); err != nil {
                return err
             }
        case "AutoAccept":
            if err := json.Unmarshal([]byte(v), &strct.AutoAccept); err != nil {
                return err
             }
        case "DeskPhoneNumber":
            if err := json.Unmarshal([]byte(v), &strct.DeskPhoneNumber); err != nil {
                return err
             }
        case "PhoneType":
            if err := json.Unmarshal([]byte(v), &strct.PhoneType); err != nil {
                return err
             }
            PhoneTypeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if PhoneType (a required property) was received
    if !PhoneTypeReceived {
        return errors.New("\"PhoneType\" is required but was not present")
    }
    return nil
}
