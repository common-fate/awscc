// Code generated by schema-generate. DO NOT EDIT.

package integrationassociation

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource Type definition for AWS::Connect::IntegrationAssociation
type Resource struct {
  InstanceId string `json:"InstanceId"`
  IntegrationArn string `json:"IntegrationArn"`
  IntegrationAssociationId string `json:"IntegrationAssociationId,omitempty"`
  IntegrationType string `json:"IntegrationType"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "InstanceId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "InstanceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceId\": ")
	if tmp, err := json.Marshal(strct.InstanceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IntegrationArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IntegrationArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IntegrationArn\": ")
	if tmp, err := json.Marshal(strct.IntegrationArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IntegrationAssociationId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IntegrationAssociationId\": ")
	if tmp, err := json.Marshal(strct.IntegrationAssociationId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IntegrationType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IntegrationType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IntegrationType\": ")
	if tmp, err := json.Marshal(strct.IntegrationType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    InstanceIdReceived := false
    IntegrationArnReceived := false
    IntegrationTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "InstanceId":
            if err := json.Unmarshal([]byte(v), &strct.InstanceId); err != nil {
                return err
             }
            InstanceIdReceived = true
        case "IntegrationArn":
            if err := json.Unmarshal([]byte(v), &strct.IntegrationArn); err != nil {
                return err
             }
            IntegrationArnReceived = true
        case "IntegrationAssociationId":
            if err := json.Unmarshal([]byte(v), &strct.IntegrationAssociationId); err != nil {
                return err
             }
        case "IntegrationType":
            if err := json.Unmarshal([]byte(v), &strct.IntegrationType); err != nil {
                return err
             }
            IntegrationTypeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if InstanceId (a required property) was received
    if !InstanceIdReceived {
        return errors.New("\"InstanceId\" is required but was not present")
    }
    // check if IntegrationArn (a required property) was received
    if !IntegrationArnReceived {
        return errors.New("\"IntegrationArn\" is required but was not present")
    }
    // check if IntegrationType (a required property) was received
    if !IntegrationTypeReceived {
        return errors.New("\"IntegrationType\" is required but was not present")
    }
    return nil
}
