// Code generated by schema-generate. DO NOT EDIT.

package resourcedatasync

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// AwsOrganizationsSource 
type AwsOrganizationsSource struct {
  OrganizationSourceType string `json:"OrganizationSourceType"`
  OrganizationalUnits []string `json:"OrganizationalUnits,omitempty"`
}

// Resource Resource Type definition for AWS::SSM::ResourceDataSync
type Resource struct {
  BucketName string `json:"BucketName,omitempty"`
  BucketPrefix string `json:"BucketPrefix,omitempty"`
  BucketRegion string `json:"BucketRegion,omitempty"`
  KMSKeyArn string `json:"KMSKeyArn,omitempty"`
  S3Destination *S3Destination `json:"S3Destination,omitempty"`
  SyncFormat string `json:"SyncFormat,omitempty"`
  SyncName string `json:"SyncName"`
  SyncSource *SyncSource `json:"SyncSource,omitempty"`
  SyncType string `json:"SyncType,omitempty"`
}

// S3Destination 
type S3Destination struct {
  BucketName string `json:"BucketName"`
  BucketPrefix string `json:"BucketPrefix,omitempty"`
  BucketRegion string `json:"BucketRegion"`
  KMSKeyArn string `json:"KMSKeyArn,omitempty"`
  SyncFormat string `json:"SyncFormat"`
}

// SyncSource 
type SyncSource struct {
  AwsOrganizationsSource *AwsOrganizationsSource `json:"AwsOrganizationsSource,omitempty"`
  IncludeFutureRegions bool `json:"IncludeFutureRegions,omitempty"`
  SourceRegions []string `json:"SourceRegions"`
  SourceType string `json:"SourceType"`
}

func (strct *AwsOrganizationsSource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "OrganizationSourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "OrganizationSourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OrganizationSourceType\": ")
	if tmp, err := json.Marshal(strct.OrganizationSourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OrganizationalUnits" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OrganizationalUnits\": ")
	if tmp, err := json.Marshal(strct.OrganizationalUnits); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AwsOrganizationsSource) UnmarshalJSON(b []byte) error {
    OrganizationSourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "OrganizationSourceType":
            if err := json.Unmarshal([]byte(v), &strct.OrganizationSourceType); err != nil {
                return err
             }
            OrganizationSourceTypeReceived = true
        case "OrganizationalUnits":
            if err := json.Unmarshal([]byte(v), &strct.OrganizationalUnits); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if OrganizationSourceType (a required property) was received
    if !OrganizationSourceTypeReceived {
        return errors.New("\"OrganizationSourceType\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "BucketName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BucketName\": ")
	if tmp, err := json.Marshal(strct.BucketName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BucketPrefix" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BucketPrefix\": ")
	if tmp, err := json.Marshal(strct.BucketPrefix); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BucketRegion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BucketRegion\": ")
	if tmp, err := json.Marshal(strct.BucketRegion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "KMSKeyArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KMSKeyArn\": ")
	if tmp, err := json.Marshal(strct.KMSKeyArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "S3Destination" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3Destination\": ")
	if tmp, err := json.Marshal(strct.S3Destination); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SyncFormat" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SyncFormat\": ")
	if tmp, err := json.Marshal(strct.SyncFormat); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SyncName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SyncName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SyncName\": ")
	if tmp, err := json.Marshal(strct.SyncName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SyncSource" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SyncSource\": ")
	if tmp, err := json.Marshal(strct.SyncSource); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SyncType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SyncType\": ")
	if tmp, err := json.Marshal(strct.SyncType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    SyncNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "BucketName":
            if err := json.Unmarshal([]byte(v), &strct.BucketName); err != nil {
                return err
             }
        case "BucketPrefix":
            if err := json.Unmarshal([]byte(v), &strct.BucketPrefix); err != nil {
                return err
             }
        case "BucketRegion":
            if err := json.Unmarshal([]byte(v), &strct.BucketRegion); err != nil {
                return err
             }
        case "KMSKeyArn":
            if err := json.Unmarshal([]byte(v), &strct.KMSKeyArn); err != nil {
                return err
             }
        case "S3Destination":
            if err := json.Unmarshal([]byte(v), &strct.S3Destination); err != nil {
                return err
             }
        case "SyncFormat":
            if err := json.Unmarshal([]byte(v), &strct.SyncFormat); err != nil {
                return err
             }
        case "SyncName":
            if err := json.Unmarshal([]byte(v), &strct.SyncName); err != nil {
                return err
             }
            SyncNameReceived = true
        case "SyncSource":
            if err := json.Unmarshal([]byte(v), &strct.SyncSource); err != nil {
                return err
             }
        case "SyncType":
            if err := json.Unmarshal([]byte(v), &strct.SyncType); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SyncName (a required property) was received
    if !SyncNameReceived {
        return errors.New("\"SyncName\" is required but was not present")
    }
    return nil
}

func (strct *S3Destination) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "BucketName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "BucketName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BucketName\": ")
	if tmp, err := json.Marshal(strct.BucketName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BucketPrefix" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BucketPrefix\": ")
	if tmp, err := json.Marshal(strct.BucketPrefix); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "BucketRegion" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "BucketRegion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BucketRegion\": ")
	if tmp, err := json.Marshal(strct.BucketRegion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "KMSKeyArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KMSKeyArn\": ")
	if tmp, err := json.Marshal(strct.KMSKeyArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SyncFormat" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SyncFormat" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SyncFormat\": ")
	if tmp, err := json.Marshal(strct.SyncFormat); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *S3Destination) UnmarshalJSON(b []byte) error {
    BucketNameReceived := false
    BucketRegionReceived := false
    SyncFormatReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "BucketName":
            if err := json.Unmarshal([]byte(v), &strct.BucketName); err != nil {
                return err
             }
            BucketNameReceived = true
        case "BucketPrefix":
            if err := json.Unmarshal([]byte(v), &strct.BucketPrefix); err != nil {
                return err
             }
        case "BucketRegion":
            if err := json.Unmarshal([]byte(v), &strct.BucketRegion); err != nil {
                return err
             }
            BucketRegionReceived = true
        case "KMSKeyArn":
            if err := json.Unmarshal([]byte(v), &strct.KMSKeyArn); err != nil {
                return err
             }
        case "SyncFormat":
            if err := json.Unmarshal([]byte(v), &strct.SyncFormat); err != nil {
                return err
             }
            SyncFormatReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if BucketName (a required property) was received
    if !BucketNameReceived {
        return errors.New("\"BucketName\" is required but was not present")
    }
    // check if BucketRegion (a required property) was received
    if !BucketRegionReceived {
        return errors.New("\"BucketRegion\" is required but was not present")
    }
    // check if SyncFormat (a required property) was received
    if !SyncFormatReceived {
        return errors.New("\"SyncFormat\" is required but was not present")
    }
    return nil
}

func (strct *SyncSource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AwsOrganizationsSource" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AwsOrganizationsSource\": ")
	if tmp, err := json.Marshal(strct.AwsOrganizationsSource); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IncludeFutureRegions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IncludeFutureRegions\": ")
	if tmp, err := json.Marshal(strct.IncludeFutureRegions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SourceRegions" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SourceRegions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceRegions\": ")
	if tmp, err := json.Marshal(strct.SourceRegions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceType\": ")
	if tmp, err := json.Marshal(strct.SourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SyncSource) UnmarshalJSON(b []byte) error {
    SourceRegionsReceived := false
    SourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AwsOrganizationsSource":
            if err := json.Unmarshal([]byte(v), &strct.AwsOrganizationsSource); err != nil {
                return err
             }
        case "IncludeFutureRegions":
            if err := json.Unmarshal([]byte(v), &strct.IncludeFutureRegions); err != nil {
                return err
             }
        case "SourceRegions":
            if err := json.Unmarshal([]byte(v), &strct.SourceRegions); err != nil {
                return err
             }
            SourceRegionsReceived = true
        case "SourceType":
            if err := json.Unmarshal([]byte(v), &strct.SourceType); err != nil {
                return err
             }
            SourceTypeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SourceRegions (a required property) was received
    if !SourceRegionsReceived {
        return errors.New("\"SourceRegions\" is required but was not present")
    }
    // check if SourceType (a required property) was received
    if !SourceTypeReceived {
        return errors.New("\"SourceType\" is required but was not present")
    }
    return nil
}
