// Code generated by schema-generate. DO NOT EDIT.

package deployment

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// ComponentConfigurationUpdate 
type ComponentConfigurationUpdate struct {
  Merge string `json:"Merge,omitempty"`
  Reset []string `json:"Reset,omitempty"`
}

// ComponentDeploymentSpecification 
type ComponentDeploymentSpecification struct {
  ComponentVersion string `json:"ComponentVersion,omitempty"`
  ConfigurationUpdate *ComponentConfigurationUpdate `json:"ConfigurationUpdate,omitempty"`
  RunWith *ComponentRunWith `json:"RunWith,omitempty"`
}

// ComponentRunWith 
type ComponentRunWith struct {
  PosixUser string `json:"PosixUser,omitempty"`
  SystemResourceLimits *SystemResourceLimits `json:"SystemResourceLimits,omitempty"`
  WindowsUser string `json:"WindowsUser,omitempty"`
}

// Components 
type Components struct {
}

// DeploymentComponentUpdatePolicy 
type DeploymentComponentUpdatePolicy struct {
  Action string `json:"Action,omitempty"`
  TimeoutInSeconds int `json:"TimeoutInSeconds,omitempty"`
}

// DeploymentConfigurationValidationPolicy 
type DeploymentConfigurationValidationPolicy struct {
  TimeoutInSeconds int `json:"TimeoutInSeconds,omitempty"`
}

// DeploymentIoTJobConfiguration 
type DeploymentIoTJobConfiguration struct {
  AbortConfig *IoTJobAbortConfig `json:"AbortConfig,omitempty"`
  JobExecutionsRolloutConfig *IoTJobExecutionsRolloutConfig `json:"JobExecutionsRolloutConfig,omitempty"`
  TimeoutConfig *IoTJobTimeoutConfig `json:"TimeoutConfig,omitempty"`
}

// DeploymentPolicies 
type DeploymentPolicies struct {
  ComponentUpdatePolicy *DeploymentComponentUpdatePolicy `json:"ComponentUpdatePolicy,omitempty"`
  ConfigurationValidationPolicy *DeploymentConfigurationValidationPolicy `json:"ConfigurationValidationPolicy,omitempty"`
  FailureHandlingPolicy string `json:"FailureHandlingPolicy,omitempty"`
}

// IoTJobAbortConfig 
type IoTJobAbortConfig struct {
  CriteriaList []*IoTJobAbortCriteria `json:"CriteriaList"`
}

// IoTJobAbortCriteria 
type IoTJobAbortCriteria struct {
  Action string `json:"Action"`
  FailureType string `json:"FailureType"`
  MinNumberOfExecutedThings int `json:"MinNumberOfExecutedThings"`
  ThresholdPercentage float64 `json:"ThresholdPercentage"`
}

// IoTJobExecutionsRolloutConfig 
type IoTJobExecutionsRolloutConfig struct {
  ExponentialRate *IoTJobExponentialRolloutRate `json:"ExponentialRate,omitempty"`
  MaximumPerMinute int `json:"MaximumPerMinute,omitempty"`
}

// IoTJobExponentialRolloutRate 
type IoTJobExponentialRolloutRate struct {
  BaseRatePerMinute int `json:"BaseRatePerMinute"`
  IncrementFactor float64 `json:"IncrementFactor"`
  RateIncreaseCriteria *IoTJobRateIncreaseCriteria `json:"RateIncreaseCriteria"`
}

// IoTJobRateIncreaseCriteria 
type IoTJobRateIncreaseCriteria struct {
}

// IoTJobTimeoutConfig 
type IoTJobTimeoutConfig struct {
  InProgressTimeoutInMinutes int `json:"InProgressTimeoutInMinutes,omitempty"`
}

// Resource Resource for Greengrass V2 deployment.
type Resource struct {
  Components *Components `json:"Components,omitempty"`
  DeploymentId string `json:"DeploymentId,omitempty"`
  DeploymentName string `json:"DeploymentName,omitempty"`
  DeploymentPolicies *DeploymentPolicies `json:"DeploymentPolicies,omitempty"`
  IotJobConfiguration *DeploymentIoTJobConfiguration `json:"IotJobConfiguration,omitempty"`
  Tags *Tags `json:"Tags,omitempty"`
  TargetArn string `json:"TargetArn"`
}

// SystemResourceLimits 
type SystemResourceLimits struct {
  Cpus float64 `json:"Cpus,omitempty"`
  Memory int `json:"Memory,omitempty"`
}

// Tags 
type Tags struct {
}

func (strct *ComponentConfigurationUpdate) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Merge" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Merge\": ")
	if tmp, err := json.Marshal(strct.Merge); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Reset" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Reset\": ")
	if tmp, err := json.Marshal(strct.Reset); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ComponentConfigurationUpdate) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Merge":
            if err := json.Unmarshal([]byte(v), &strct.Merge); err != nil {
                return err
             }
        case "Reset":
            if err := json.Unmarshal([]byte(v), &strct.Reset); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ComponentDeploymentSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ComponentVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ComponentVersion\": ")
	if tmp, err := json.Marshal(strct.ComponentVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ConfigurationUpdate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConfigurationUpdate\": ")
	if tmp, err := json.Marshal(strct.ConfigurationUpdate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RunWith" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RunWith\": ")
	if tmp, err := json.Marshal(strct.RunWith); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ComponentDeploymentSpecification) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ComponentVersion":
            if err := json.Unmarshal([]byte(v), &strct.ComponentVersion); err != nil {
                return err
             }
        case "ConfigurationUpdate":
            if err := json.Unmarshal([]byte(v), &strct.ConfigurationUpdate); err != nil {
                return err
             }
        case "RunWith":
            if err := json.Unmarshal([]byte(v), &strct.RunWith); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ComponentRunWith) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "PosixUser" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PosixUser\": ")
	if tmp, err := json.Marshal(strct.PosixUser); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SystemResourceLimits" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SystemResourceLimits\": ")
	if tmp, err := json.Marshal(strct.SystemResourceLimits); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "WindowsUser" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WindowsUser\": ")
	if tmp, err := json.Marshal(strct.WindowsUser); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ComponentRunWith) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "PosixUser":
            if err := json.Unmarshal([]byte(v), &strct.PosixUser); err != nil {
                return err
             }
        case "SystemResourceLimits":
            if err := json.Unmarshal([]byte(v), &strct.SystemResourceLimits); err != nil {
                return err
             }
        case "WindowsUser":
            if err := json.Unmarshal([]byte(v), &strct.WindowsUser); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Components) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Components) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *DeploymentComponentUpdatePolicy) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Action" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Action\": ")
	if tmp, err := json.Marshal(strct.Action); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TimeoutInSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeoutInSeconds\": ")
	if tmp, err := json.Marshal(strct.TimeoutInSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DeploymentComponentUpdatePolicy) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Action":
            if err := json.Unmarshal([]byte(v), &strct.Action); err != nil {
                return err
             }
        case "TimeoutInSeconds":
            if err := json.Unmarshal([]byte(v), &strct.TimeoutInSeconds); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *DeploymentConfigurationValidationPolicy) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "TimeoutInSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeoutInSeconds\": ")
	if tmp, err := json.Marshal(strct.TimeoutInSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DeploymentConfigurationValidationPolicy) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "TimeoutInSeconds":
            if err := json.Unmarshal([]byte(v), &strct.TimeoutInSeconds); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *DeploymentIoTJobConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AbortConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AbortConfig\": ")
	if tmp, err := json.Marshal(strct.AbortConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "JobExecutionsRolloutConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"JobExecutionsRolloutConfig\": ")
	if tmp, err := json.Marshal(strct.JobExecutionsRolloutConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TimeoutConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeoutConfig\": ")
	if tmp, err := json.Marshal(strct.TimeoutConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DeploymentIoTJobConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AbortConfig":
            if err := json.Unmarshal([]byte(v), &strct.AbortConfig); err != nil {
                return err
             }
        case "JobExecutionsRolloutConfig":
            if err := json.Unmarshal([]byte(v), &strct.JobExecutionsRolloutConfig); err != nil {
                return err
             }
        case "TimeoutConfig":
            if err := json.Unmarshal([]byte(v), &strct.TimeoutConfig); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *DeploymentPolicies) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ComponentUpdatePolicy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ComponentUpdatePolicy\": ")
	if tmp, err := json.Marshal(strct.ComponentUpdatePolicy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ConfigurationValidationPolicy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConfigurationValidationPolicy\": ")
	if tmp, err := json.Marshal(strct.ConfigurationValidationPolicy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FailureHandlingPolicy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FailureHandlingPolicy\": ")
	if tmp, err := json.Marshal(strct.FailureHandlingPolicy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DeploymentPolicies) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ComponentUpdatePolicy":
            if err := json.Unmarshal([]byte(v), &strct.ComponentUpdatePolicy); err != nil {
                return err
             }
        case "ConfigurationValidationPolicy":
            if err := json.Unmarshal([]byte(v), &strct.ConfigurationValidationPolicy); err != nil {
                return err
             }
        case "FailureHandlingPolicy":
            if err := json.Unmarshal([]byte(v), &strct.FailureHandlingPolicy); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *IoTJobAbortConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "CriteriaList" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CriteriaList" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CriteriaList\": ")
	if tmp, err := json.Marshal(strct.CriteriaList); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *IoTJobAbortConfig) UnmarshalJSON(b []byte) error {
    CriteriaListReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CriteriaList":
            if err := json.Unmarshal([]byte(v), &strct.CriteriaList); err != nil {
                return err
             }
            CriteriaListReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CriteriaList (a required property) was received
    if !CriteriaListReceived {
        return errors.New("\"CriteriaList\" is required but was not present")
    }
    return nil
}

func (strct *IoTJobAbortCriteria) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Action" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Action" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Action\": ")
	if tmp, err := json.Marshal(strct.Action); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "FailureType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "FailureType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FailureType\": ")
	if tmp, err := json.Marshal(strct.FailureType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MinNumberOfExecutedThings" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MinNumberOfExecutedThings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MinNumberOfExecutedThings\": ")
	if tmp, err := json.Marshal(strct.MinNumberOfExecutedThings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ThresholdPercentage" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ThresholdPercentage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ThresholdPercentage\": ")
	if tmp, err := json.Marshal(strct.ThresholdPercentage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *IoTJobAbortCriteria) UnmarshalJSON(b []byte) error {
    ActionReceived := false
    FailureTypeReceived := false
    MinNumberOfExecutedThingsReceived := false
    ThresholdPercentageReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Action":
            if err := json.Unmarshal([]byte(v), &strct.Action); err != nil {
                return err
             }
            ActionReceived = true
        case "FailureType":
            if err := json.Unmarshal([]byte(v), &strct.FailureType); err != nil {
                return err
             }
            FailureTypeReceived = true
        case "MinNumberOfExecutedThings":
            if err := json.Unmarshal([]byte(v), &strct.MinNumberOfExecutedThings); err != nil {
                return err
             }
            MinNumberOfExecutedThingsReceived = true
        case "ThresholdPercentage":
            if err := json.Unmarshal([]byte(v), &strct.ThresholdPercentage); err != nil {
                return err
             }
            ThresholdPercentageReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Action (a required property) was received
    if !ActionReceived {
        return errors.New("\"Action\" is required but was not present")
    }
    // check if FailureType (a required property) was received
    if !FailureTypeReceived {
        return errors.New("\"FailureType\" is required but was not present")
    }
    // check if MinNumberOfExecutedThings (a required property) was received
    if !MinNumberOfExecutedThingsReceived {
        return errors.New("\"MinNumberOfExecutedThings\" is required but was not present")
    }
    // check if ThresholdPercentage (a required property) was received
    if !ThresholdPercentageReceived {
        return errors.New("\"ThresholdPercentage\" is required but was not present")
    }
    return nil
}

func (strct *IoTJobExecutionsRolloutConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ExponentialRate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ExponentialRate\": ")
	if tmp, err := json.Marshal(strct.ExponentialRate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaximumPerMinute" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaximumPerMinute\": ")
	if tmp, err := json.Marshal(strct.MaximumPerMinute); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *IoTJobExecutionsRolloutConfig) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ExponentialRate":
            if err := json.Unmarshal([]byte(v), &strct.ExponentialRate); err != nil {
                return err
             }
        case "MaximumPerMinute":
            if err := json.Unmarshal([]byte(v), &strct.MaximumPerMinute); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *IoTJobExponentialRolloutRate) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "BaseRatePerMinute" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "BaseRatePerMinute" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BaseRatePerMinute\": ")
	if tmp, err := json.Marshal(strct.BaseRatePerMinute); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IncrementFactor" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IncrementFactor" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IncrementFactor\": ")
	if tmp, err := json.Marshal(strct.IncrementFactor); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RateIncreaseCriteria" field is required
    if strct.RateIncreaseCriteria == nil {
        return nil, errors.New("RateIncreaseCriteria is a required field")
    }
    // Marshal the "RateIncreaseCriteria" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RateIncreaseCriteria\": ")
	if tmp, err := json.Marshal(strct.RateIncreaseCriteria); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *IoTJobExponentialRolloutRate) UnmarshalJSON(b []byte) error {
    BaseRatePerMinuteReceived := false
    IncrementFactorReceived := false
    RateIncreaseCriteriaReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "BaseRatePerMinute":
            if err := json.Unmarshal([]byte(v), &strct.BaseRatePerMinute); err != nil {
                return err
             }
            BaseRatePerMinuteReceived = true
        case "IncrementFactor":
            if err := json.Unmarshal([]byte(v), &strct.IncrementFactor); err != nil {
                return err
             }
            IncrementFactorReceived = true
        case "RateIncreaseCriteria":
            if err := json.Unmarshal([]byte(v), &strct.RateIncreaseCriteria); err != nil {
                return err
             }
            RateIncreaseCriteriaReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if BaseRatePerMinute (a required property) was received
    if !BaseRatePerMinuteReceived {
        return errors.New("\"BaseRatePerMinute\" is required but was not present")
    }
    // check if IncrementFactor (a required property) was received
    if !IncrementFactorReceived {
        return errors.New("\"IncrementFactor\" is required but was not present")
    }
    // check if RateIncreaseCriteria (a required property) was received
    if !RateIncreaseCriteriaReceived {
        return errors.New("\"RateIncreaseCriteria\" is required but was not present")
    }
    return nil
}

func (strct *IoTJobTimeoutConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "InProgressTimeoutInMinutes" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InProgressTimeoutInMinutes\": ")
	if tmp, err := json.Marshal(strct.InProgressTimeoutInMinutes); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *IoTJobTimeoutConfig) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "InProgressTimeoutInMinutes":
            if err := json.Unmarshal([]byte(v), &strct.InProgressTimeoutInMinutes); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Components" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Components\": ")
	if tmp, err := json.Marshal(strct.Components); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeploymentId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeploymentId\": ")
	if tmp, err := json.Marshal(strct.DeploymentId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeploymentName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeploymentName\": ")
	if tmp, err := json.Marshal(strct.DeploymentName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeploymentPolicies" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeploymentPolicies\": ")
	if tmp, err := json.Marshal(strct.DeploymentPolicies); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IotJobConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IotJobConfiguration\": ")
	if tmp, err := json.Marshal(strct.IotJobConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TargetArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TargetArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TargetArn\": ")
	if tmp, err := json.Marshal(strct.TargetArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    TargetArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Components":
            if err := json.Unmarshal([]byte(v), &strct.Components); err != nil {
                return err
             }
        case "DeploymentId":
            if err := json.Unmarshal([]byte(v), &strct.DeploymentId); err != nil {
                return err
             }
        case "DeploymentName":
            if err := json.Unmarshal([]byte(v), &strct.DeploymentName); err != nil {
                return err
             }
        case "DeploymentPolicies":
            if err := json.Unmarshal([]byte(v), &strct.DeploymentPolicies); err != nil {
                return err
             }
        case "IotJobConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.IotJobConfiguration); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TargetArn":
            if err := json.Unmarshal([]byte(v), &strct.TargetArn); err != nil {
                return err
             }
            TargetArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if TargetArn (a required property) was received
    if !TargetArnReceived {
        return errors.New("\"TargetArn\" is required but was not present")
    }
    return nil
}

func (strct *SystemResourceLimits) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Cpus" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Cpus\": ")
	if tmp, err := json.Marshal(strct.Cpus); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Memory" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Memory\": ")
	if tmp, err := json.Marshal(strct.Memory); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SystemResourceLimits) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Cpus":
            if err := json.Unmarshal([]byte(v), &strct.Cpus); err != nil {
                return err
             }
        case "Memory":
            if err := json.Unmarshal([]byte(v), &strct.Memory); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tags) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tags) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
