// Code generated by schema-generate. DO NOT EDIT.

package monitor

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// Resource Represents a monitor, which defines the monitoring boundaries for measurements that Internet Monitor publishes information about for an application
type Resource struct {
  CreatedAt string `json:"CreatedAt,omitempty"`
  ModifiedAt string `json:"ModifiedAt,omitempty"`
  MonitorArn string `json:"MonitorArn,omitempty"`
  MonitorName string `json:"MonitorName,omitempty"`
  ProcessingStatus string `json:"ProcessingStatus,omitempty"`
  ProcessingStatusInfo string `json:"ProcessingStatusInfo,omitempty"`
  Resources []string `json:"Resources,omitempty"`
  ResourcesToAdd []string `json:"ResourcesToAdd,omitempty"`
  ResourcesToRemove []string `json:"ResourcesToRemove,omitempty"`
  Status string `json:"Status,omitempty"`
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.
type Tag struct {
  Key string `json:"Key,omitempty"`
  Value string `json:"Value,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CreatedAt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreatedAt\": ")
	if tmp, err := json.Marshal(strct.CreatedAt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ModifiedAt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ModifiedAt\": ")
	if tmp, err := json.Marshal(strct.ModifiedAt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MonitorArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MonitorArn\": ")
	if tmp, err := json.Marshal(strct.MonitorArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MonitorName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MonitorName\": ")
	if tmp, err := json.Marshal(strct.MonitorName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProcessingStatus" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProcessingStatus\": ")
	if tmp, err := json.Marshal(strct.ProcessingStatus); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProcessingStatusInfo" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProcessingStatusInfo\": ")
	if tmp, err := json.Marshal(strct.ProcessingStatusInfo); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Resources" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Resources\": ")
	if tmp, err := json.Marshal(strct.Resources); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ResourcesToAdd" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourcesToAdd\": ")
	if tmp, err := json.Marshal(strct.ResourcesToAdd); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ResourcesToRemove" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourcesToRemove\": ")
	if tmp, err := json.Marshal(strct.ResourcesToRemove); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CreatedAt":
            if err := json.Unmarshal([]byte(v), &strct.CreatedAt); err != nil {
                return err
             }
        case "ModifiedAt":
            if err := json.Unmarshal([]byte(v), &strct.ModifiedAt); err != nil {
                return err
             }
        case "MonitorArn":
            if err := json.Unmarshal([]byte(v), &strct.MonitorArn); err != nil {
                return err
             }
        case "MonitorName":
            if err := json.Unmarshal([]byte(v), &strct.MonitorName); err != nil {
                return err
             }
        case "ProcessingStatus":
            if err := json.Unmarshal([]byte(v), &strct.ProcessingStatus); err != nil {
                return err
             }
        case "ProcessingStatusInfo":
            if err := json.Unmarshal([]byte(v), &strct.ProcessingStatusInfo); err != nil {
                return err
             }
        case "Resources":
            if err := json.Unmarshal([]byte(v), &strct.Resources); err != nil {
                return err
             }
        case "ResourcesToAdd":
            if err := json.Unmarshal([]byte(v), &strct.ResourcesToAdd); err != nil {
                return err
             }
        case "ResourcesToRemove":
            if err := json.Unmarshal([]byte(v), &strct.ResourcesToRemove); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
