// Code generated by schema-generate. DO NOT EDIT.

package primarytaskset

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource A pseudo-resource that manages which of your ECS task sets is primary.
type Resource struct {

  // The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
  Cluster string `json:"Cluster"`

  // The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
  Service string `json:"Service"`

  // The ID or full Amazon Resource Name (ARN) of the task set.
  TaskSetId string `json:"TaskSetId"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Cluster" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Cluster" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Cluster\": ")
	if tmp, err := json.Marshal(strct.Cluster); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Service" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Service" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Service\": ")
	if tmp, err := json.Marshal(strct.Service); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TaskSetId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TaskSetId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TaskSetId\": ")
	if tmp, err := json.Marshal(strct.TaskSetId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ClusterReceived := false
    ServiceReceived := false
    TaskSetIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Cluster":
            if err := json.Unmarshal([]byte(v), &strct.Cluster); err != nil {
                return err
             }
            ClusterReceived = true
        case "Service":
            if err := json.Unmarshal([]byte(v), &strct.Service); err != nil {
                return err
             }
            ServiceReceived = true
        case "TaskSetId":
            if err := json.Unmarshal([]byte(v), &strct.TaskSetId); err != nil {
                return err
             }
            TaskSetIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Cluster (a required property) was received
    if !ClusterReceived {
        return errors.New("\"Cluster\" is required but was not present")
    }
    // check if Service (a required property) was received
    if !ServiceReceived {
        return errors.New("\"Service\" is required but was not present")
    }
    // check if TaskSetId (a required property) was received
    if !TaskSetIdReceived {
        return errors.New("\"TaskSetId\" is required but was not present")
    }
    return nil
}
