// Code generated by schema-generate. DO NOT EDIT.

package clustercapacityproviderassociations

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// CapacityProviderStrategy 
type CapacityProviderStrategy struct {
  Base int `json:"Base,omitempty"`
  CapacityProvider string `json:"CapacityProvider"`
  Weight int `json:"Weight,omitempty"`
}

// Resource Associate a set of ECS Capacity Providers with a specified ECS Cluster
type Resource struct {
  CapacityProviders []string `json:"CapacityProviders"`
  Cluster string `json:"Cluster"`
  DefaultCapacityProviderStrategy []*CapacityProviderStrategy `json:"DefaultCapacityProviderStrategy"`
}

func (strct *CapacityProviderStrategy) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Base" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Base\": ")
	if tmp, err := json.Marshal(strct.Base); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "CapacityProvider" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CapacityProvider" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CapacityProvider\": ")
	if tmp, err := json.Marshal(strct.CapacityProvider); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Weight" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Weight\": ")
	if tmp, err := json.Marshal(strct.Weight); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CapacityProviderStrategy) UnmarshalJSON(b []byte) error {
    CapacityProviderReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Base":
            if err := json.Unmarshal([]byte(v), &strct.Base); err != nil {
                return err
             }
        case "CapacityProvider":
            if err := json.Unmarshal([]byte(v), &strct.CapacityProvider); err != nil {
                return err
             }
            CapacityProviderReceived = true
        case "Weight":
            if err := json.Unmarshal([]byte(v), &strct.Weight); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CapacityProvider (a required property) was received
    if !CapacityProviderReceived {
        return errors.New("\"CapacityProvider\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "CapacityProviders" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CapacityProviders" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CapacityProviders\": ")
	if tmp, err := json.Marshal(strct.CapacityProviders); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Cluster" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Cluster" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Cluster\": ")
	if tmp, err := json.Marshal(strct.Cluster); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DefaultCapacityProviderStrategy" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DefaultCapacityProviderStrategy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultCapacityProviderStrategy\": ")
	if tmp, err := json.Marshal(strct.DefaultCapacityProviderStrategy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    CapacityProvidersReceived := false
    ClusterReceived := false
    DefaultCapacityProviderStrategyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CapacityProviders":
            if err := json.Unmarshal([]byte(v), &strct.CapacityProviders); err != nil {
                return err
             }
            CapacityProvidersReceived = true
        case "Cluster":
            if err := json.Unmarshal([]byte(v), &strct.Cluster); err != nil {
                return err
             }
            ClusterReceived = true
        case "DefaultCapacityProviderStrategy":
            if err := json.Unmarshal([]byte(v), &strct.DefaultCapacityProviderStrategy); err != nil {
                return err
             }
            DefaultCapacityProviderStrategyReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CapacityProviders (a required property) was received
    if !CapacityProvidersReceived {
        return errors.New("\"CapacityProviders\" is required but was not present")
    }
    // check if Cluster (a required property) was received
    if !ClusterReceived {
        return errors.New("\"Cluster\" is required but was not present")
    }
    // check if DefaultCapacityProviderStrategy (a required property) was received
    if !DefaultCapacityProviderStrategyReceived {
        return errors.New("\"DefaultCapacityProviderStrategy\" is required but was not present")
    }
    return nil
}
