// Code generated by schema-generate. DO NOT EDIT.

package capacityprovider

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// AutoScalingGroupProvider 
type AutoScalingGroupProvider struct {
  AutoScalingGroupArn string `json:"AutoScalingGroupArn"`
  ManagedScaling *ManagedScaling `json:"ManagedScaling,omitempty"`
  ManagedTerminationProtection string `json:"ManagedTerminationProtection,omitempty"`
}

// ManagedScaling The managed scaling settings for the Auto Scaling group capacity provider.
type ManagedScaling struct {
  InstanceWarmupPeriod int `json:"InstanceWarmupPeriod,omitempty"`
  MaximumScalingStepSize int `json:"MaximumScalingStepSize,omitempty"`
  MinimumScalingStepSize int `json:"MinimumScalingStepSize,omitempty"`
  Status string `json:"Status,omitempty"`
  TargetCapacity int `json:"TargetCapacity,omitempty"`
}

// Resource Resource Type definition for AWS::ECS::CapacityProvider.
type Resource struct {
  AutoScalingGroupProvider *AutoScalingGroupProvider `json:"AutoScalingGroupProvider"`
  Name string `json:"Name,omitempty"`
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key,omitempty"`
  Value string `json:"Value,omitempty"`
}

func (strct *AutoScalingGroupProvider) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AutoScalingGroupArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AutoScalingGroupArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AutoScalingGroupArn\": ")
	if tmp, err := json.Marshal(strct.AutoScalingGroupArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ManagedScaling" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ManagedScaling\": ")
	if tmp, err := json.Marshal(strct.ManagedScaling); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ManagedTerminationProtection" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ManagedTerminationProtection\": ")
	if tmp, err := json.Marshal(strct.ManagedTerminationProtection); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AutoScalingGroupProvider) UnmarshalJSON(b []byte) error {
    AutoScalingGroupArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AutoScalingGroupArn":
            if err := json.Unmarshal([]byte(v), &strct.AutoScalingGroupArn); err != nil {
                return err
             }
            AutoScalingGroupArnReceived = true
        case "ManagedScaling":
            if err := json.Unmarshal([]byte(v), &strct.ManagedScaling); err != nil {
                return err
             }
        case "ManagedTerminationProtection":
            if err := json.Unmarshal([]byte(v), &strct.ManagedTerminationProtection); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AutoScalingGroupArn (a required property) was received
    if !AutoScalingGroupArnReceived {
        return errors.New("\"AutoScalingGroupArn\" is required but was not present")
    }
    return nil
}

func (strct *ManagedScaling) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "InstanceWarmupPeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceWarmupPeriod\": ")
	if tmp, err := json.Marshal(strct.InstanceWarmupPeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaximumScalingStepSize" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaximumScalingStepSize\": ")
	if tmp, err := json.Marshal(strct.MaximumScalingStepSize); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MinimumScalingStepSize" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MinimumScalingStepSize\": ")
	if tmp, err := json.Marshal(strct.MinimumScalingStepSize); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TargetCapacity" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TargetCapacity\": ")
	if tmp, err := json.Marshal(strct.TargetCapacity); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ManagedScaling) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "InstanceWarmupPeriod":
            if err := json.Unmarshal([]byte(v), &strct.InstanceWarmupPeriod); err != nil {
                return err
             }
        case "MaximumScalingStepSize":
            if err := json.Unmarshal([]byte(v), &strct.MaximumScalingStepSize); err != nil {
                return err
             }
        case "MinimumScalingStepSize":
            if err := json.Unmarshal([]byte(v), &strct.MinimumScalingStepSize); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "TargetCapacity":
            if err := json.Unmarshal([]byte(v), &strct.TargetCapacity); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AutoScalingGroupProvider" field is required
    if strct.AutoScalingGroupProvider == nil {
        return nil, errors.New("AutoScalingGroupProvider is a required field")
    }
    // Marshal the "AutoScalingGroupProvider" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AutoScalingGroupProvider\": ")
	if tmp, err := json.Marshal(strct.AutoScalingGroupProvider); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AutoScalingGroupProviderReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AutoScalingGroupProvider":
            if err := json.Unmarshal([]byte(v), &strct.AutoScalingGroupProvider); err != nil {
                return err
             }
            AutoScalingGroupProviderReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AutoScalingGroupProvider (a required property) was received
    if !AutoScalingGroupProviderReceived {
        return errors.New("\"AutoScalingGroupProvider\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
