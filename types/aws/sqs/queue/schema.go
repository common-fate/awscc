// Code generated by schema-generate. DO NOT EDIT.

package queue

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// RedriveAllowPolicy_object The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object.
type RedriveAllowPolicy_object struct {
}

// RedrivePolicy_object A string that includes the parameters for the dead-letter queue functionality (redrive policy) of the source queue.
type RedrivePolicy_object struct {
}

// Resource Resource Type definition for AWS::SQS::Queue
type Resource struct {

  // Amazon Resource Name (ARN) of the queue.
  Arn string `json:"Arn,omitempty"`

  // For first-in-first-out (FIFO) queues, specifies whether to enable content-based deduplication. During the deduplication interval, Amazon SQS treats messages that are sent with identical content as duplicates and delivers only one copy of the message.
  ContentBasedDeduplication bool `json:"ContentBasedDeduplication,omitempty"`

  // Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.
  DeduplicationScope string `json:"DeduplicationScope,omitempty"`

  // The time in seconds for which the delivery of all messages in the queue is delayed. You can specify an integer value of 0 to 900 (15 minutes). The default value is 0.
  DelaySeconds int `json:"DelaySeconds,omitempty"`

  // If set to true, creates a FIFO queue. If you don't specify this property, Amazon SQS creates a standard queue.
  FifoQueue bool `json:"FifoQueue,omitempty"`

  // Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.
  FifoThroughputLimit string `json:"FifoThroughputLimit,omitempty"`

  // The length of time in seconds for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling AWS KMS again. The value must be an integer between 60 (1 minute) and 86,400 (24 hours). The default is 300 (5 minutes).
  KmsDataKeyReusePeriodSeconds int `json:"KmsDataKeyReusePeriodSeconds,omitempty"`

  // The ID of an AWS managed customer master key (CMK) for Amazon SQS or a custom CMK. To use the AWS managed CMK for Amazon SQS, specify the (default) alias alias/aws/sqs.
  KmsMasterKeyId string `json:"KmsMasterKeyId,omitempty"`

  // The limit of how many bytes that a message can contain before Amazon SQS rejects it. You can specify an integer value from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). The default value is 262,144 (256 KiB).
  MaximumMessageSize int `json:"MaximumMessageSize,omitempty"`

  // The number of seconds that Amazon SQS retains a message. You can specify an integer value from 60 seconds (1 minute) to 1,209,600 seconds (14 days). The default value is 345,600 seconds (4 days).
  MessageRetentionPeriod int `json:"MessageRetentionPeriod,omitempty"`

  // A name for the queue. To create a FIFO queue, the name of your FIFO queue must end with the .fifo suffix.
  QueueName string `json:"QueueName,omitempty"`

  // URL of the source queue.
  QueueUrl string `json:"QueueUrl,omitempty"`

  // Specifies the duration, in seconds, that the ReceiveMessage action call waits until a message is in the queue in order to include it in the response, rather than returning an empty response if a message isn't yet available. You can specify an integer from 1 to 20. Short polling is used as the default or when you specify 0 for this property.
  ReceiveMessageWaitTimeSeconds int `json:"ReceiveMessageWaitTimeSeconds,omitempty"`

  // The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object.
  RedriveAllowPolicy interface{} `json:"RedriveAllowPolicy,omitempty"`

  // A string that includes the parameters for the dead-letter queue functionality (redrive policy) of the source queue.
  RedrivePolicy interface{} `json:"RedrivePolicy,omitempty"`

  // Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (e.g. SSE-KMS or SSE-SQS ).
  SqsManagedSseEnabled bool `json:"SqsManagedSseEnabled,omitempty"`

  // The tags that you attach to this queue.
  Tags []*Tag `json:"Tags,omitempty"`

  // The length of time during which a message will be unavailable after a message is delivered from the queue. This blocks other components from receiving the same message and gives the initial component time to process and delete the message from the queue. Values must be from 0 to 43,200 seconds (12 hours). If you don't specify a value, AWS CloudFormation uses the default value of 30 seconds.
  VisibilityTimeout int `json:"VisibilityTimeout,omitempty"`
}

// Tag 
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ContentBasedDeduplication" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ContentBasedDeduplication\": ")
	if tmp, err := json.Marshal(strct.ContentBasedDeduplication); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeduplicationScope" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeduplicationScope\": ")
	if tmp, err := json.Marshal(strct.DeduplicationScope); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DelaySeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DelaySeconds\": ")
	if tmp, err := json.Marshal(strct.DelaySeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FifoQueue" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FifoQueue\": ")
	if tmp, err := json.Marshal(strct.FifoQueue); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FifoThroughputLimit" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FifoThroughputLimit\": ")
	if tmp, err := json.Marshal(strct.FifoThroughputLimit); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "KmsDataKeyReusePeriodSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KmsDataKeyReusePeriodSeconds\": ")
	if tmp, err := json.Marshal(strct.KmsDataKeyReusePeriodSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "KmsMasterKeyId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KmsMasterKeyId\": ")
	if tmp, err := json.Marshal(strct.KmsMasterKeyId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaximumMessageSize" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaximumMessageSize\": ")
	if tmp, err := json.Marshal(strct.MaximumMessageSize); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MessageRetentionPeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MessageRetentionPeriod\": ")
	if tmp, err := json.Marshal(strct.MessageRetentionPeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "QueueName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"QueueName\": ")
	if tmp, err := json.Marshal(strct.QueueName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "QueueUrl" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"QueueUrl\": ")
	if tmp, err := json.Marshal(strct.QueueUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ReceiveMessageWaitTimeSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ReceiveMessageWaitTimeSeconds\": ")
	if tmp, err := json.Marshal(strct.ReceiveMessageWaitTimeSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RedriveAllowPolicy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RedriveAllowPolicy\": ")
	if tmp, err := json.Marshal(strct.RedriveAllowPolicy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RedrivePolicy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RedrivePolicy\": ")
	if tmp, err := json.Marshal(strct.RedrivePolicy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SqsManagedSseEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SqsManagedSseEnabled\": ")
	if tmp, err := json.Marshal(strct.SqsManagedSseEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VisibilityTimeout" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VisibilityTimeout\": ")
	if tmp, err := json.Marshal(strct.VisibilityTimeout); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "ContentBasedDeduplication":
            if err := json.Unmarshal([]byte(v), &strct.ContentBasedDeduplication); err != nil {
                return err
             }
        case "DeduplicationScope":
            if err := json.Unmarshal([]byte(v), &strct.DeduplicationScope); err != nil {
                return err
             }
        case "DelaySeconds":
            if err := json.Unmarshal([]byte(v), &strct.DelaySeconds); err != nil {
                return err
             }
        case "FifoQueue":
            if err := json.Unmarshal([]byte(v), &strct.FifoQueue); err != nil {
                return err
             }
        case "FifoThroughputLimit":
            if err := json.Unmarshal([]byte(v), &strct.FifoThroughputLimit); err != nil {
                return err
             }
        case "KmsDataKeyReusePeriodSeconds":
            if err := json.Unmarshal([]byte(v), &strct.KmsDataKeyReusePeriodSeconds); err != nil {
                return err
             }
        case "KmsMasterKeyId":
            if err := json.Unmarshal([]byte(v), &strct.KmsMasterKeyId); err != nil {
                return err
             }
        case "MaximumMessageSize":
            if err := json.Unmarshal([]byte(v), &strct.MaximumMessageSize); err != nil {
                return err
             }
        case "MessageRetentionPeriod":
            if err := json.Unmarshal([]byte(v), &strct.MessageRetentionPeriod); err != nil {
                return err
             }
        case "QueueName":
            if err := json.Unmarshal([]byte(v), &strct.QueueName); err != nil {
                return err
             }
        case "QueueUrl":
            if err := json.Unmarshal([]byte(v), &strct.QueueUrl); err != nil {
                return err
             }
        case "ReceiveMessageWaitTimeSeconds":
            if err := json.Unmarshal([]byte(v), &strct.ReceiveMessageWaitTimeSeconds); err != nil {
                return err
             }
        case "RedriveAllowPolicy":
            if err := json.Unmarshal([]byte(v), &strct.RedriveAllowPolicy); err != nil {
                return err
             }
        case "RedrivePolicy":
            if err := json.Unmarshal([]byte(v), &strct.RedrivePolicy); err != nil {
                return err
             }
        case "SqsManagedSseEnabled":
            if err := json.Unmarshal([]byte(v), &strct.SqsManagedSseEnabled); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "VisibilityTimeout":
            if err := json.Unmarshal([]byte(v), &strct.VisibilityTimeout); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
