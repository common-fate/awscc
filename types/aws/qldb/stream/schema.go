// Code generated by schema-generate. DO NOT EDIT.

package stream

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// KinesisConfiguration 
type KinesisConfiguration struct {
  AggregationEnabled bool `json:"AggregationEnabled,omitempty"`
  StreamArn *StreamArn `json:"StreamArn,omitempty"`
}

// Resource Resource schema for AWS::QLDB::Stream.
type Resource struct {
  Arn string `json:"Arn,omitempty"`
  ExclusiveEndTime string `json:"ExclusiveEndTime,omitempty"`
  Id string `json:"Id,omitempty"`
  InclusiveStartTime string `json:"InclusiveStartTime"`
  KinesisConfiguration *KinesisConfiguration `json:"KinesisConfiguration"`
  LedgerName string `json:"LedgerName"`
  RoleArn string `json:"RoleArn"`
  StreamName string `json:"StreamName"`

  // An array of key-value pairs to apply to this resource.
  Tags []*Tag `json:"Tags,omitempty"`
}

// StreamArn 
type StreamArn struct {
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Value string `json:"Value"`
}

func (strct *KinesisConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AggregationEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AggregationEnabled\": ")
	if tmp, err := json.Marshal(strct.AggregationEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StreamArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StreamArn\": ")
	if tmp, err := json.Marshal(strct.StreamArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *KinesisConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AggregationEnabled":
            if err := json.Unmarshal([]byte(v), &strct.AggregationEnabled); err != nil {
                return err
             }
        case "StreamArn":
            if err := json.Unmarshal([]byte(v), &strct.StreamArn); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ExclusiveEndTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ExclusiveEndTime\": ")
	if tmp, err := json.Marshal(strct.ExclusiveEndTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "InclusiveStartTime" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "InclusiveStartTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InclusiveStartTime\": ")
	if tmp, err := json.Marshal(strct.InclusiveStartTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "KinesisConfiguration" field is required
    if strct.KinesisConfiguration == nil {
        return nil, errors.New("KinesisConfiguration is a required field")
    }
    // Marshal the "KinesisConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KinesisConfiguration\": ")
	if tmp, err := json.Marshal(strct.KinesisConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "LedgerName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LedgerName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LedgerName\": ")
	if tmp, err := json.Marshal(strct.LedgerName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "StreamName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "StreamName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StreamName\": ")
	if tmp, err := json.Marshal(strct.StreamName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    InclusiveStartTimeReceived := false
    KinesisConfigurationReceived := false
    LedgerNameReceived := false
    RoleArnReceived := false
    StreamNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "ExclusiveEndTime":
            if err := json.Unmarshal([]byte(v), &strct.ExclusiveEndTime); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "InclusiveStartTime":
            if err := json.Unmarshal([]byte(v), &strct.InclusiveStartTime); err != nil {
                return err
             }
            InclusiveStartTimeReceived = true
        case "KinesisConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.KinesisConfiguration); err != nil {
                return err
             }
            KinesisConfigurationReceived = true
        case "LedgerName":
            if err := json.Unmarshal([]byte(v), &strct.LedgerName); err != nil {
                return err
             }
            LedgerNameReceived = true
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
            RoleArnReceived = true
        case "StreamName":
            if err := json.Unmarshal([]byte(v), &strct.StreamName); err != nil {
                return err
             }
            StreamNameReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if InclusiveStartTime (a required property) was received
    if !InclusiveStartTimeReceived {
        return errors.New("\"InclusiveStartTime\" is required but was not present")
    }
    // check if KinesisConfiguration (a required property) was received
    if !KinesisConfigurationReceived {
        return errors.New("\"KinesisConfiguration\" is required but was not present")
    }
    // check if LedgerName (a required property) was received
    if !LedgerNameReceived {
        return errors.New("\"LedgerName\" is required but was not present")
    }
    // check if RoleArn (a required property) was received
    if !RoleArnReceived {
        return errors.New("\"RoleArn\" is required but was not present")
    }
    // check if StreamName (a required property) was received
    if !StreamNameReceived {
        return errors.New("\"StreamName\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
