// Code generated by schema-generate. DO NOT EDIT.

package session

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// Resource The AWS::Macie::Session resource specifies a new Amazon Macie session. A session is an object that represents the Amazon Macie service. A session is required for Amazon Macie to become operational.
type Resource struct {

  // AWS account ID of customer
  AwsAccountId string `json:"AwsAccountId,omitempty"`

  // A enumeration value that specifies how frequently finding updates are published.
  FindingPublishingFrequency string `json:"FindingPublishingFrequency,omitempty"`

  // Service role used by Macie
  ServiceRole string `json:"ServiceRole,omitempty"`

  // A enumeration value that specifies the status of the Macie Session.
  Status string `json:"Status,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AwsAccountId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AwsAccountId\": ")
	if tmp, err := json.Marshal(strct.AwsAccountId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FindingPublishingFrequency" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FindingPublishingFrequency\": ")
	if tmp, err := json.Marshal(strct.FindingPublishingFrequency); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ServiceRole" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServiceRole\": ")
	if tmp, err := json.Marshal(strct.ServiceRole); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AwsAccountId":
            if err := json.Unmarshal([]byte(v), &strct.AwsAccountId); err != nil {
                return err
             }
        case "FindingPublishingFrequency":
            if err := json.Unmarshal([]byte(v), &strct.FindingPublishingFrequency); err != nil {
                return err
             }
        case "ServiceRole":
            if err := json.Unmarshal([]byte(v), &strct.ServiceRole); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
