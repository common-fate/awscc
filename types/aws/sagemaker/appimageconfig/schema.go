// Code generated by schema-generate. DO NOT EDIT.

package appimageconfig

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// FileSystemConfig The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
type FileSystemConfig struct {

  // The default POSIX group ID (GID). If not specified, defaults to 100.
  DefaultGid int `json:"DefaultGid,omitempty"`

  // The default POSIX user ID (UID). If not specified, defaults to 1000.
  DefaultUid int `json:"DefaultUid,omitempty"`

  // The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
  MountPath string `json:"MountPath,omitempty"`
}

// KernelGatewayImageConfig The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app.
type KernelGatewayImageConfig struct {

  // The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
  FileSystemConfig *FileSystemConfig `json:"FileSystemConfig,omitempty"`

  // The specification of the Jupyter kernels in the image.
  KernelSpecs []*KernelSpec `json:"KernelSpecs"`
}

// KernelSpec 
type KernelSpec struct {

  // The display name of the kernel.
  DisplayName string `json:"DisplayName,omitempty"`

  // The name of the kernel.
  Name string `json:"Name"`
}

// Resource Resource Type definition for AWS::SageMaker::AppImageConfig
type Resource struct {

  // The Amazon Resource Name (ARN) of the AppImageConfig.
  AppImageConfigArn string `json:"AppImageConfigArn,omitempty"`

  // The Name of the AppImageConfig.
  AppImageConfigName string `json:"AppImageConfigName"`

  // The KernelGatewayImageConfig.
  KernelGatewayImageConfig *KernelGatewayImageConfig `json:"KernelGatewayImageConfig,omitempty"`

  // A list of tags to apply to the AppImageConfig.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *FileSystemConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DefaultGid" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultGid\": ")
	if tmp, err := json.Marshal(strct.DefaultGid); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DefaultUid" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultUid\": ")
	if tmp, err := json.Marshal(strct.DefaultUid); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MountPath" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MountPath\": ")
	if tmp, err := json.Marshal(strct.MountPath); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *FileSystemConfig) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DefaultGid":
            if err := json.Unmarshal([]byte(v), &strct.DefaultGid); err != nil {
                return err
             }
        case "DefaultUid":
            if err := json.Unmarshal([]byte(v), &strct.DefaultUid); err != nil {
                return err
             }
        case "MountPath":
            if err := json.Unmarshal([]byte(v), &strct.MountPath); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *KernelGatewayImageConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "FileSystemConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FileSystemConfig\": ")
	if tmp, err := json.Marshal(strct.FileSystemConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "KernelSpecs" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "KernelSpecs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KernelSpecs\": ")
	if tmp, err := json.Marshal(strct.KernelSpecs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *KernelGatewayImageConfig) UnmarshalJSON(b []byte) error {
    KernelSpecsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "FileSystemConfig":
            if err := json.Unmarshal([]byte(v), &strct.FileSystemConfig); err != nil {
                return err
             }
        case "KernelSpecs":
            if err := json.Unmarshal([]byte(v), &strct.KernelSpecs); err != nil {
                return err
             }
            KernelSpecsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if KernelSpecs (a required property) was received
    if !KernelSpecsReceived {
        return errors.New("\"KernelSpecs\" is required but was not present")
    }
    return nil
}

func (strct *KernelSpec) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DisplayName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DisplayName\": ")
	if tmp, err := json.Marshal(strct.DisplayName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *KernelSpec) UnmarshalJSON(b []byte) error {
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DisplayName":
            if err := json.Unmarshal([]byte(v), &strct.DisplayName); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AppImageConfigArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AppImageConfigArn\": ")
	if tmp, err := json.Marshal(strct.AppImageConfigArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "AppImageConfigName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AppImageConfigName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AppImageConfigName\": ")
	if tmp, err := json.Marshal(strct.AppImageConfigName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "KernelGatewayImageConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KernelGatewayImageConfig\": ")
	if tmp, err := json.Marshal(strct.KernelGatewayImageConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AppImageConfigNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AppImageConfigArn":
            if err := json.Unmarshal([]byte(v), &strct.AppImageConfigArn); err != nil {
                return err
             }
        case "AppImageConfigName":
            if err := json.Unmarshal([]byte(v), &strct.AppImageConfigName); err != nil {
                return err
             }
            AppImageConfigNameReceived = true
        case "KernelGatewayImageConfig":
            if err := json.Unmarshal([]byte(v), &strct.KernelGatewayImageConfig); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AppImageConfigName (a required property) was received
    if !AppImageConfigNameReceived {
        return errors.New("\"AppImageConfigName\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
