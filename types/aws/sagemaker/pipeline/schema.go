// Code generated by schema-generate. DO NOT EDIT.

package pipeline

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// ParallelismConfiguration 
type ParallelismConfiguration struct {

  // Maximum parallel execution steps
  MaxParallelExecutionSteps int `json:"MaxParallelExecutionSteps"`
}

// PipelineDefinition 
type PipelineDefinition struct {
}

// Resource Resource Type definition for AWS::SageMaker::Pipeline
type Resource struct {
  ParallelismConfiguration *ParallelismConfiguration `json:"ParallelismConfiguration,omitempty"`
  PipelineDefinition *PipelineDefinition `json:"PipelineDefinition"`

  // The description of the Pipeline.
  PipelineDescription string `json:"PipelineDescription,omitempty"`

  // The display name of the Pipeline.
  PipelineDisplayName string `json:"PipelineDisplayName,omitempty"`

  // The name of the Pipeline.
  PipelineName string `json:"PipelineName"`

  // Role Arn
  RoleArn string `json:"RoleArn"`
  Tags []*Tag `json:"Tags,omitempty"`
}

// S3Location 
type S3Location struct {

  // The name of the S3 bucket where the PipelineDefinition file is stored.
  Bucket string `json:"Bucket"`

  // The Amazon S3 ETag (a file checksum) of the PipelineDefinition file. If you don't specify a value, SageMaker skips ETag validation of your PipelineDefinition file.
  ETag string `json:"ETag,omitempty"`

  // The file name of the PipelineDefinition file (Amazon S3 object name).
  Key string `json:"Key"`

  // For versioning-enabled buckets, a specific version of the PipelineDefinition file.
  Version string `json:"Version,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *ParallelismConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "MaxParallelExecutionSteps" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MaxParallelExecutionSteps" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxParallelExecutionSteps\": ")
	if tmp, err := json.Marshal(strct.MaxParallelExecutionSteps); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ParallelismConfiguration) UnmarshalJSON(b []byte) error {
    MaxParallelExecutionStepsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "MaxParallelExecutionSteps":
            if err := json.Unmarshal([]byte(v), &strct.MaxParallelExecutionSteps); err != nil {
                return err
             }
            MaxParallelExecutionStepsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if MaxParallelExecutionSteps (a required property) was received
    if !MaxParallelExecutionStepsReceived {
        return errors.New("\"MaxParallelExecutionSteps\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ParallelismConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ParallelismConfiguration\": ")
	if tmp, err := json.Marshal(strct.ParallelismConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PipelineDefinition" field is required
    if strct.PipelineDefinition == nil {
        return nil, errors.New("PipelineDefinition is a required field")
    }
    // Marshal the "PipelineDefinition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PipelineDefinition\": ")
	if tmp, err := json.Marshal(strct.PipelineDefinition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PipelineDescription" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PipelineDescription\": ")
	if tmp, err := json.Marshal(strct.PipelineDescription); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PipelineDisplayName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PipelineDisplayName\": ")
	if tmp, err := json.Marshal(strct.PipelineDisplayName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PipelineName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "PipelineName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PipelineName\": ")
	if tmp, err := json.Marshal(strct.PipelineName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    PipelineDefinitionReceived := false
    PipelineNameReceived := false
    RoleArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ParallelismConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.ParallelismConfiguration); err != nil {
                return err
             }
        case "PipelineDefinition":
            if err := json.Unmarshal([]byte(v), &strct.PipelineDefinition); err != nil {
                return err
             }
            PipelineDefinitionReceived = true
        case "PipelineDescription":
            if err := json.Unmarshal([]byte(v), &strct.PipelineDescription); err != nil {
                return err
             }
        case "PipelineDisplayName":
            if err := json.Unmarshal([]byte(v), &strct.PipelineDisplayName); err != nil {
                return err
             }
        case "PipelineName":
            if err := json.Unmarshal([]byte(v), &strct.PipelineName); err != nil {
                return err
             }
            PipelineNameReceived = true
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
            RoleArnReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if PipelineDefinition (a required property) was received
    if !PipelineDefinitionReceived {
        return errors.New("\"PipelineDefinition\" is required but was not present")
    }
    // check if PipelineName (a required property) was received
    if !PipelineNameReceived {
        return errors.New("\"PipelineName\" is required but was not present")
    }
    // check if RoleArn (a required property) was received
    if !RoleArnReceived {
        return errors.New("\"RoleArn\" is required but was not present")
    }
    return nil
}

func (strct *S3Location) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Bucket" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Bucket" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Bucket\": ")
	if tmp, err := json.Marshal(strct.Bucket); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ETag" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ETag\": ")
	if tmp, err := json.Marshal(strct.ETag); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Version" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Version\": ")
	if tmp, err := json.Marshal(strct.Version); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *S3Location) UnmarshalJSON(b []byte) error {
    BucketReceived := false
    KeyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Bucket":
            if err := json.Unmarshal([]byte(v), &strct.Bucket); err != nil {
                return err
             }
            BucketReceived = true
        case "ETag":
            if err := json.Unmarshal([]byte(v), &strct.ETag); err != nil {
                return err
             }
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Version":
            if err := json.Unmarshal([]byte(v), &strct.Version); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Bucket (a required property) was received
    if !BucketReceived {
        return errors.New("\"Bucket\" is required but was not present")
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
