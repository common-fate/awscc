// Code generated by schema-generate. DO NOT EDIT.

package project

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// ProvisioningParameter Information about a parameter used to provision a product.
type ProvisioningParameter struct {

  // The parameter key.
  Key string `json:"Key"`

  // The parameter value.
  Value string `json:"Value"`
}

// Resource Resource Type definition for AWS::SageMaker::Project
type Resource struct {

  // The time at which the project was created.
  CreationTime string `json:"CreationTime,omitempty"`
  ProjectArn string `json:"ProjectArn,omitempty"`
  ProjectDescription string `json:"ProjectDescription,omitempty"`
  ProjectId string `json:"ProjectId,omitempty"`
  ProjectName string `json:"ProjectName"`

  // The status of a project.
  ProjectStatus string `json:"ProjectStatus,omitempty"`

  // Provisioned ServiceCatalog  Details
  ServiceCatalogProvisionedProductDetails *ServiceCatalogProvisionedProductDetails `json:"ServiceCatalogProvisionedProductDetails,omitempty"`

  // Input ServiceCatalog Provisioning Details
  ServiceCatalogProvisioningDetails *ServiceCatalogProvisioningDetails `json:"ServiceCatalogProvisioningDetails"`

  // An array of key-value pairs to apply to this resource.
  Tags []*Tag `json:"Tags,omitempty"`
}

// ServiceCatalogProvisionedProductDetails Provisioned ServiceCatalog  Details
type ServiceCatalogProvisionedProductDetails struct {
  ProvisionedProductId string `json:"ProvisionedProductId,omitempty"`
  ProvisionedProductStatusMessage string `json:"ProvisionedProductStatusMessage,omitempty"`
}

// ServiceCatalogProvisioningDetails Input ServiceCatalog Provisioning Details
type ServiceCatalogProvisioningDetails struct {
  PathId string `json:"PathId,omitempty"`
  ProductId string `json:"ProductId"`
  ProvisioningArtifactId string `json:"ProvisioningArtifactId,omitempty"`

  // Parameters specified by the administrator that are required for provisioning the product.
  ProvisioningParameters []*ProvisioningParameter `json:"ProvisioningParameters,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Value string `json:"Value"`
}

func (strct *ProvisioningParameter) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ProvisioningParameter) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CreationTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreationTime\": ")
	if tmp, err := json.Marshal(strct.CreationTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProjectArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProjectArn\": ")
	if tmp, err := json.Marshal(strct.ProjectArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProjectDescription" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProjectDescription\": ")
	if tmp, err := json.Marshal(strct.ProjectDescription); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProjectId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProjectId\": ")
	if tmp, err := json.Marshal(strct.ProjectId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ProjectName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ProjectName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProjectName\": ")
	if tmp, err := json.Marshal(strct.ProjectName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProjectStatus" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProjectStatus\": ")
	if tmp, err := json.Marshal(strct.ProjectStatus); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ServiceCatalogProvisionedProductDetails" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServiceCatalogProvisionedProductDetails\": ")
	if tmp, err := json.Marshal(strct.ServiceCatalogProvisionedProductDetails); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ServiceCatalogProvisioningDetails" field is required
    if strct.ServiceCatalogProvisioningDetails == nil {
        return nil, errors.New("ServiceCatalogProvisioningDetails is a required field")
    }
    // Marshal the "ServiceCatalogProvisioningDetails" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServiceCatalogProvisioningDetails\": ")
	if tmp, err := json.Marshal(strct.ServiceCatalogProvisioningDetails); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ProjectNameReceived := false
    ServiceCatalogProvisioningDetailsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CreationTime":
            if err := json.Unmarshal([]byte(v), &strct.CreationTime); err != nil {
                return err
             }
        case "ProjectArn":
            if err := json.Unmarshal([]byte(v), &strct.ProjectArn); err != nil {
                return err
             }
        case "ProjectDescription":
            if err := json.Unmarshal([]byte(v), &strct.ProjectDescription); err != nil {
                return err
             }
        case "ProjectId":
            if err := json.Unmarshal([]byte(v), &strct.ProjectId); err != nil {
                return err
             }
        case "ProjectName":
            if err := json.Unmarshal([]byte(v), &strct.ProjectName); err != nil {
                return err
             }
            ProjectNameReceived = true
        case "ProjectStatus":
            if err := json.Unmarshal([]byte(v), &strct.ProjectStatus); err != nil {
                return err
             }
        case "ServiceCatalogProvisionedProductDetails":
            if err := json.Unmarshal([]byte(v), &strct.ServiceCatalogProvisionedProductDetails); err != nil {
                return err
             }
        case "ServiceCatalogProvisioningDetails":
            if err := json.Unmarshal([]byte(v), &strct.ServiceCatalogProvisioningDetails); err != nil {
                return err
             }
            ServiceCatalogProvisioningDetailsReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ProjectName (a required property) was received
    if !ProjectNameReceived {
        return errors.New("\"ProjectName\" is required but was not present")
    }
    // check if ServiceCatalogProvisioningDetails (a required property) was received
    if !ServiceCatalogProvisioningDetailsReceived {
        return errors.New("\"ServiceCatalogProvisioningDetails\" is required but was not present")
    }
    return nil
}

func (strct *ServiceCatalogProvisionedProductDetails) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ProvisionedProductId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProvisionedProductId\": ")
	if tmp, err := json.Marshal(strct.ProvisionedProductId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProvisionedProductStatusMessage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProvisionedProductStatusMessage\": ")
	if tmp, err := json.Marshal(strct.ProvisionedProductStatusMessage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ServiceCatalogProvisionedProductDetails) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ProvisionedProductId":
            if err := json.Unmarshal([]byte(v), &strct.ProvisionedProductId); err != nil {
                return err
             }
        case "ProvisionedProductStatusMessage":
            if err := json.Unmarshal([]byte(v), &strct.ProvisionedProductStatusMessage); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ServiceCatalogProvisioningDetails) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "PathId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PathId\": ")
	if tmp, err := json.Marshal(strct.PathId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ProductId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ProductId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProductId\": ")
	if tmp, err := json.Marshal(strct.ProductId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProvisioningArtifactId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProvisioningArtifactId\": ")
	if tmp, err := json.Marshal(strct.ProvisioningArtifactId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProvisioningParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProvisioningParameters\": ")
	if tmp, err := json.Marshal(strct.ProvisioningParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ServiceCatalogProvisioningDetails) UnmarshalJSON(b []byte) error {
    ProductIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "PathId":
            if err := json.Unmarshal([]byte(v), &strct.PathId); err != nil {
                return err
             }
        case "ProductId":
            if err := json.Unmarshal([]byte(v), &strct.ProductId); err != nil {
                return err
             }
            ProductIdReceived = true
        case "ProvisioningArtifactId":
            if err := json.Unmarshal([]byte(v), &strct.ProvisioningArtifactId); err != nil {
                return err
             }
        case "ProvisioningParameters":
            if err := json.Unmarshal([]byte(v), &strct.ProvisioningParameters); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ProductId (a required property) was received
    if !ProductIdReceived {
        return errors.New("\"ProductId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
