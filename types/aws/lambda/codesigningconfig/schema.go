// Code generated by schema-generate. DO NOT EDIT.

package codesigningconfig

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// AllowedPublishers When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
type AllowedPublishers struct {

  // List of Signing profile version Arns
  SigningProfileVersionArns []string `json:"SigningProfileVersionArns"`
}

// CodeSigningPolicies Policies to control how to act if a signature is invalid
type CodeSigningPolicies struct {

  // Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
  UntrustedArtifactOnDeployment string `json:"UntrustedArtifactOnDeployment"`
}

// Resource Resource Type definition for AWS::Lambda::CodeSigningConfig.
type Resource struct {

  // When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
  AllowedPublishers *AllowedPublishers `json:"AllowedPublishers"`

  // A unique Arn for CodeSigningConfig resource
  CodeSigningConfigArn string `json:"CodeSigningConfigArn,omitempty"`

  // A unique identifier for CodeSigningConfig resource
  CodeSigningConfigId string `json:"CodeSigningConfigId,omitempty"`

  // Policies to control how to act if a signature is invalid
  CodeSigningPolicies *CodeSigningPolicies `json:"CodeSigningPolicies,omitempty"`

  // A description of the CodeSigningConfig
  Description string `json:"Description,omitempty"`
}

func (strct *AllowedPublishers) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "SigningProfileVersionArns" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SigningProfileVersionArns" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SigningProfileVersionArns\": ")
	if tmp, err := json.Marshal(strct.SigningProfileVersionArns); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AllowedPublishers) UnmarshalJSON(b []byte) error {
    SigningProfileVersionArnsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "SigningProfileVersionArns":
            if err := json.Unmarshal([]byte(v), &strct.SigningProfileVersionArns); err != nil {
                return err
             }
            SigningProfileVersionArnsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SigningProfileVersionArns (a required property) was received
    if !SigningProfileVersionArnsReceived {
        return errors.New("\"SigningProfileVersionArns\" is required but was not present")
    }
    return nil
}

func (strct *CodeSigningPolicies) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "UntrustedArtifactOnDeployment" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "UntrustedArtifactOnDeployment" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UntrustedArtifactOnDeployment\": ")
	if tmp, err := json.Marshal(strct.UntrustedArtifactOnDeployment); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CodeSigningPolicies) UnmarshalJSON(b []byte) error {
    UntrustedArtifactOnDeploymentReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "UntrustedArtifactOnDeployment":
            if err := json.Unmarshal([]byte(v), &strct.UntrustedArtifactOnDeployment); err != nil {
                return err
             }
            UntrustedArtifactOnDeploymentReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if UntrustedArtifactOnDeployment (a required property) was received
    if !UntrustedArtifactOnDeploymentReceived {
        return errors.New("\"UntrustedArtifactOnDeployment\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AllowedPublishers" field is required
    if strct.AllowedPublishers == nil {
        return nil, errors.New("AllowedPublishers is a required field")
    }
    // Marshal the "AllowedPublishers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowedPublishers\": ")
	if tmp, err := json.Marshal(strct.AllowedPublishers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CodeSigningConfigArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CodeSigningConfigArn\": ")
	if tmp, err := json.Marshal(strct.CodeSigningConfigArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CodeSigningConfigId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CodeSigningConfigId\": ")
	if tmp, err := json.Marshal(strct.CodeSigningConfigId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CodeSigningPolicies" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CodeSigningPolicies\": ")
	if tmp, err := json.Marshal(strct.CodeSigningPolicies); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AllowedPublishersReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllowedPublishers":
            if err := json.Unmarshal([]byte(v), &strct.AllowedPublishers); err != nil {
                return err
             }
            AllowedPublishersReceived = true
        case "CodeSigningConfigArn":
            if err := json.Unmarshal([]byte(v), &strct.CodeSigningConfigArn); err != nil {
                return err
             }
        case "CodeSigningConfigId":
            if err := json.Unmarshal([]byte(v), &strct.CodeSigningConfigId); err != nil {
                return err
             }
        case "CodeSigningPolicies":
            if err := json.Unmarshal([]byte(v), &strct.CodeSigningPolicies); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AllowedPublishers (a required property) was received
    if !AllowedPublishersReceived {
        return errors.New("\"AllowedPublishers\" is required but was not present")
    }
    return nil
}
