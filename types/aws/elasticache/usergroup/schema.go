// Code generated by schema-generate. DO NOT EDIT.

package usergroup

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource Type definition for AWS::ElastiCache::UserGroup
type Resource struct {

  // The Amazon Resource Name (ARN) of the user account.
  Arn string `json:"Arn,omitempty"`

  // Must be redis.
  Engine string `json:"Engine"`

  // Indicates user group status. Can be "creating", "active", "modifying", "deleting".
  Status string `json:"Status,omitempty"`

  // The ID of the user group.
  UserGroupId string `json:"UserGroupId"`

  // List of users associated to this user group.
  UserIds []string `json:"UserIds,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Engine" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Engine" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Engine\": ")
	if tmp, err := json.Marshal(strct.Engine); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "UserGroupId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "UserGroupId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UserGroupId\": ")
	if tmp, err := json.Marshal(strct.UserGroupId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UserIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UserIds\": ")
	if tmp, err := json.Marshal(strct.UserIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    EngineReceived := false
    UserGroupIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Engine":
            if err := json.Unmarshal([]byte(v), &strct.Engine); err != nil {
                return err
             }
            EngineReceived = true
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "UserGroupId":
            if err := json.Unmarshal([]byte(v), &strct.UserGroupId); err != nil {
                return err
             }
            UserGroupIdReceived = true
        case "UserIds":
            if err := json.Unmarshal([]byte(v), &strct.UserIds); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Engine (a required property) was received
    if !EngineReceived {
        return errors.New("\"Engine\" is required but was not present")
    }
    // check if UserGroupId (a required property) was received
    if !UserGroupIdReceived {
        return errors.New("\"UserGroupId\" is required but was not present")
    }
    return nil
}
