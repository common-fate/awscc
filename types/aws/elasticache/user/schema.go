// Code generated by schema-generate. DO NOT EDIT.

package user

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// AuthenticationMode 
type AuthenticationMode struct {

  // Passwords used for this user account. You can create up to two passwords for each user.
  Passwords []string `json:"Passwords,omitempty"`

  // Authentication Type
  Type string `json:"Type"`
}

// Resource Resource Type definition for AWS::ElastiCache::User
type Resource struct {

  // Access permissions string used for this user account.
  AccessString string `json:"AccessString,omitempty"`

  // The Amazon Resource Name (ARN) of the user account.
  Arn string `json:"Arn,omitempty"`
  AuthenticationMode *AuthenticationMode `json:"AuthenticationMode,omitempty"`

  // Must be redis.
  Engine string `json:"Engine"`

  // Indicates a password is not required for this user account.
  NoPasswordRequired bool `json:"NoPasswordRequired,omitempty"`

  // Passwords used for this user account. You can create up to two passwords for each user.
  Passwords []string `json:"Passwords,omitempty"`

  // Indicates the user status. Can be "active", "modifying" or "deleting".
  Status string `json:"Status,omitempty"`

  // The ID of the user.
  UserId string `json:"UserId"`

  // The username of the user.
  UserName string `json:"UserName"`
}

func (strct *AuthenticationMode) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Passwords" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Passwords\": ")
	if tmp, err := json.Marshal(strct.Passwords); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AuthenticationMode) UnmarshalJSON(b []byte) error {
    TypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Passwords":
            if err := json.Unmarshal([]byte(v), &strct.Passwords); err != nil {
                return err
             }
        case "Type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            TypeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Type (a required property) was received
    if !TypeReceived {
        return errors.New("\"Type\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AccessString" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AccessString\": ")
	if tmp, err := json.Marshal(strct.AccessString); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AuthenticationMode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AuthenticationMode\": ")
	if tmp, err := json.Marshal(strct.AuthenticationMode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Engine" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Engine" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Engine\": ")
	if tmp, err := json.Marshal(strct.Engine); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NoPasswordRequired" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NoPasswordRequired\": ")
	if tmp, err := json.Marshal(strct.NoPasswordRequired); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Passwords" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Passwords\": ")
	if tmp, err := json.Marshal(strct.Passwords); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "UserId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "UserId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UserId\": ")
	if tmp, err := json.Marshal(strct.UserId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "UserName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "UserName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UserName\": ")
	if tmp, err := json.Marshal(strct.UserName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    EngineReceived := false
    UserIdReceived := false
    UserNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AccessString":
            if err := json.Unmarshal([]byte(v), &strct.AccessString); err != nil {
                return err
             }
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "AuthenticationMode":
            if err := json.Unmarshal([]byte(v), &strct.AuthenticationMode); err != nil {
                return err
             }
        case "Engine":
            if err := json.Unmarshal([]byte(v), &strct.Engine); err != nil {
                return err
             }
            EngineReceived = true
        case "NoPasswordRequired":
            if err := json.Unmarshal([]byte(v), &strct.NoPasswordRequired); err != nil {
                return err
             }
        case "Passwords":
            if err := json.Unmarshal([]byte(v), &strct.Passwords); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "UserId":
            if err := json.Unmarshal([]byte(v), &strct.UserId); err != nil {
                return err
             }
            UserIdReceived = true
        case "UserName":
            if err := json.Unmarshal([]byte(v), &strct.UserName); err != nil {
                return err
             }
            UserNameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Engine (a required property) was received
    if !EngineReceived {
        return errors.New("\"Engine\" is required but was not present")
    }
    // check if UserId (a required property) was received
    if !UserIdReceived {
        return errors.New("\"UserId\" is required but was not present")
    }
    // check if UserName (a required property) was received
    if !UserNameReceived {
        return errors.New("\"UserName\" is required but was not present")
    }
    return nil
}
