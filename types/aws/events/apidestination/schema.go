// Code generated by schema-generate. DO NOT EDIT.

package apidestination

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource Type definition for AWS::Events::ApiDestination.
type Resource struct {

  // The arn of the api destination.
  Arn string `json:"Arn,omitempty"`

  // The arn of the connection.
  ConnectionArn string `json:"ConnectionArn"`
  Description string `json:"Description,omitempty"`
  HttpMethod string `json:"HttpMethod"`

  // Url endpoint to invoke.
  InvocationEndpoint string `json:"InvocationEndpoint"`
  InvocationRateLimitPerSecond int `json:"InvocationRateLimitPerSecond,omitempty"`

  // Name of the apiDestination.
  Name string `json:"Name,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ConnectionArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ConnectionArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConnectionArn\": ")
	if tmp, err := json.Marshal(strct.ConnectionArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "HttpMethod" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "HttpMethod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HttpMethod\": ")
	if tmp, err := json.Marshal(strct.HttpMethod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "InvocationEndpoint" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "InvocationEndpoint" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InvocationEndpoint\": ")
	if tmp, err := json.Marshal(strct.InvocationEndpoint); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InvocationRateLimitPerSecond" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InvocationRateLimitPerSecond\": ")
	if tmp, err := json.Marshal(strct.InvocationRateLimitPerSecond); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ConnectionArnReceived := false
    HttpMethodReceived := false
    InvocationEndpointReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "ConnectionArn":
            if err := json.Unmarshal([]byte(v), &strct.ConnectionArn); err != nil {
                return err
             }
            ConnectionArnReceived = true
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "HttpMethod":
            if err := json.Unmarshal([]byte(v), &strct.HttpMethod); err != nil {
                return err
             }
            HttpMethodReceived = true
        case "InvocationEndpoint":
            if err := json.Unmarshal([]byte(v), &strct.InvocationEndpoint); err != nil {
                return err
             }
            InvocationEndpointReceived = true
        case "InvocationRateLimitPerSecond":
            if err := json.Unmarshal([]byte(v), &strct.InvocationRateLimitPerSecond); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ConnectionArn (a required property) was received
    if !ConnectionArnReceived {
        return errors.New("\"ConnectionArn\" is required but was not present")
    }
    // check if HttpMethod (a required property) was received
    if !HttpMethodReceived {
        return errors.New("\"HttpMethod\" is required but was not present")
    }
    // check if InvocationEndpoint (a required property) was received
    if !InvocationEndpointReceived {
        return errors.New("\"InvocationEndpoint\" is required but was not present")
    }
    return nil
}
