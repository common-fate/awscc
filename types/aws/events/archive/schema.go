// Code generated by schema-generate. DO NOT EDIT.

package archive

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// EventPattern 
type EventPattern struct {
}

// Resource Resource Type definition for AWS::Events::Archive
type Resource struct {
  ArchiveName string `json:"ArchiveName,omitempty"`
  Arn string `json:"Arn,omitempty"`
  Description string `json:"Description,omitempty"`
  EventPattern *EventPattern `json:"EventPattern,omitempty"`
  RetentionDays int `json:"RetentionDays,omitempty"`
  SourceArn string `json:"SourceArn"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ArchiveName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ArchiveName\": ")
	if tmp, err := json.Marshal(strct.ArchiveName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EventPattern" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EventPattern\": ")
	if tmp, err := json.Marshal(strct.EventPattern); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RetentionDays" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RetentionDays\": ")
	if tmp, err := json.Marshal(strct.RetentionDays); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SourceArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SourceArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceArn\": ")
	if tmp, err := json.Marshal(strct.SourceArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    SourceArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ArchiveName":
            if err := json.Unmarshal([]byte(v), &strct.ArchiveName); err != nil {
                return err
             }
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "EventPattern":
            if err := json.Unmarshal([]byte(v), &strct.EventPattern); err != nil {
                return err
             }
        case "RetentionDays":
            if err := json.Unmarshal([]byte(v), &strct.RetentionDays); err != nil {
                return err
             }
        case "SourceArn":
            if err := json.Unmarshal([]byte(v), &strct.SourceArn); err != nil {
                return err
             }
            SourceArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SourceArn (a required property) was received
    if !SourceArnReceived {
        return errors.New("\"SourceArn\" is required but was not present")
    }
    return nil
}
