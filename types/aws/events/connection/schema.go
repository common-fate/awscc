// Code generated by schema-generate. DO NOT EDIT.

package connection

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// ApiKeyAuthParameters 
type ApiKeyAuthParameters struct {
  ApiKeyName string `json:"ApiKeyName"`
  ApiKeyValue string `json:"ApiKeyValue"`
}

// AuthParameters 
type AuthParameters struct {
  ApiKeyAuthParameters *ApiKeyAuthParameters `json:"ApiKeyAuthParameters,omitempty"`
  BasicAuthParameters *BasicAuthParameters `json:"BasicAuthParameters,omitempty"`
  InvocationHttpParameters *ConnectionHttpParameters `json:"InvocationHttpParameters,omitempty"`
  OAuthParameters *OAuthParameters `json:"OAuthParameters,omitempty"`
}

// BasicAuthParameters 
type BasicAuthParameters struct {
  Password string `json:"Password"`
  Username string `json:"Username"`
}

// ClientParameters 
type ClientParameters struct {
  ClientID string `json:"ClientID"`
  ClientSecret string `json:"ClientSecret"`
}

// ConnectionHttpParameters 
type ConnectionHttpParameters struct {
  BodyParameters []*Parameter `json:"BodyParameters,omitempty"`
  HeaderParameters []*Parameter `json:"HeaderParameters,omitempty"`
  QueryStringParameters []*Parameter `json:"QueryStringParameters,omitempty"`
}

// OAuthParameters 
type OAuthParameters struct {
  AuthorizationEndpoint string `json:"AuthorizationEndpoint"`
  ClientParameters *ClientParameters `json:"ClientParameters"`
  HttpMethod string `json:"HttpMethod"`
  OAuthHttpParameters *ConnectionHttpParameters `json:"OAuthHttpParameters,omitempty"`
}

// Parameter 
type Parameter struct {
  IsValueSecret bool `json:"IsValueSecret,omitempty"`
  Key string `json:"Key"`
  Value string `json:"Value"`
}

// Resource Resource Type definition for AWS::Events::Connection.
type Resource struct {

  // The arn of the connection resource.
  Arn string `json:"Arn,omitempty"`
  AuthParameters *AuthParameters `json:"AuthParameters"`
  AuthorizationType string `json:"AuthorizationType"`

  // Description of the connection.
  Description string `json:"Description,omitempty"`

  // Name of the connection.
  Name string `json:"Name,omitempty"`

  // The arn of the secrets manager secret created in the customer account.
  SecretArn string `json:"SecretArn,omitempty"`
}

func (strct *ApiKeyAuthParameters) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ApiKeyName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ApiKeyName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApiKeyName\": ")
	if tmp, err := json.Marshal(strct.ApiKeyName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ApiKeyValue" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ApiKeyValue" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApiKeyValue\": ")
	if tmp, err := json.Marshal(strct.ApiKeyValue); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ApiKeyAuthParameters) UnmarshalJSON(b []byte) error {
    ApiKeyNameReceived := false
    ApiKeyValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ApiKeyName":
            if err := json.Unmarshal([]byte(v), &strct.ApiKeyName); err != nil {
                return err
             }
            ApiKeyNameReceived = true
        case "ApiKeyValue":
            if err := json.Unmarshal([]byte(v), &strct.ApiKeyValue); err != nil {
                return err
             }
            ApiKeyValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ApiKeyName (a required property) was received
    if !ApiKeyNameReceived {
        return errors.New("\"ApiKeyName\" is required but was not present")
    }
    // check if ApiKeyValue (a required property) was received
    if !ApiKeyValueReceived {
        return errors.New("\"ApiKeyValue\" is required but was not present")
    }
    return nil
}

func (strct *AuthParameters) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ApiKeyAuthParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApiKeyAuthParameters\": ")
	if tmp, err := json.Marshal(strct.ApiKeyAuthParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BasicAuthParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BasicAuthParameters\": ")
	if tmp, err := json.Marshal(strct.BasicAuthParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InvocationHttpParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InvocationHttpParameters\": ")
	if tmp, err := json.Marshal(strct.InvocationHttpParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OAuthParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OAuthParameters\": ")
	if tmp, err := json.Marshal(strct.OAuthParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AuthParameters) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ApiKeyAuthParameters":
            if err := json.Unmarshal([]byte(v), &strct.ApiKeyAuthParameters); err != nil {
                return err
             }
        case "BasicAuthParameters":
            if err := json.Unmarshal([]byte(v), &strct.BasicAuthParameters); err != nil {
                return err
             }
        case "InvocationHttpParameters":
            if err := json.Unmarshal([]byte(v), &strct.InvocationHttpParameters); err != nil {
                return err
             }
        case "OAuthParameters":
            if err := json.Unmarshal([]byte(v), &strct.OAuthParameters); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *BasicAuthParameters) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Password" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Password" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Password\": ")
	if tmp, err := json.Marshal(strct.Password); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Username" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Username" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Username\": ")
	if tmp, err := json.Marshal(strct.Username); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *BasicAuthParameters) UnmarshalJSON(b []byte) error {
    PasswordReceived := false
    UsernameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Password":
            if err := json.Unmarshal([]byte(v), &strct.Password); err != nil {
                return err
             }
            PasswordReceived = true
        case "Username":
            if err := json.Unmarshal([]byte(v), &strct.Username); err != nil {
                return err
             }
            UsernameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Password (a required property) was received
    if !PasswordReceived {
        return errors.New("\"Password\" is required but was not present")
    }
    // check if Username (a required property) was received
    if !UsernameReceived {
        return errors.New("\"Username\" is required but was not present")
    }
    return nil
}

func (strct *ClientParameters) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ClientID" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ClientID" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ClientID\": ")
	if tmp, err := json.Marshal(strct.ClientID); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ClientSecret" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ClientSecret" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ClientSecret\": ")
	if tmp, err := json.Marshal(strct.ClientSecret); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ClientParameters) UnmarshalJSON(b []byte) error {
    ClientIDReceived := false
    ClientSecretReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ClientID":
            if err := json.Unmarshal([]byte(v), &strct.ClientID); err != nil {
                return err
             }
            ClientIDReceived = true
        case "ClientSecret":
            if err := json.Unmarshal([]byte(v), &strct.ClientSecret); err != nil {
                return err
             }
            ClientSecretReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ClientID (a required property) was received
    if !ClientIDReceived {
        return errors.New("\"ClientID\" is required but was not present")
    }
    // check if ClientSecret (a required property) was received
    if !ClientSecretReceived {
        return errors.New("\"ClientSecret\" is required but was not present")
    }
    return nil
}

func (strct *ConnectionHttpParameters) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "BodyParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BodyParameters\": ")
	if tmp, err := json.Marshal(strct.BodyParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HeaderParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HeaderParameters\": ")
	if tmp, err := json.Marshal(strct.HeaderParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "QueryStringParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"QueryStringParameters\": ")
	if tmp, err := json.Marshal(strct.QueryStringParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ConnectionHttpParameters) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "BodyParameters":
            if err := json.Unmarshal([]byte(v), &strct.BodyParameters); err != nil {
                return err
             }
        case "HeaderParameters":
            if err := json.Unmarshal([]byte(v), &strct.HeaderParameters); err != nil {
                return err
             }
        case "QueryStringParameters":
            if err := json.Unmarshal([]byte(v), &strct.QueryStringParameters); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *OAuthParameters) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AuthorizationEndpoint" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AuthorizationEndpoint" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AuthorizationEndpoint\": ")
	if tmp, err := json.Marshal(strct.AuthorizationEndpoint); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ClientParameters" field is required
    if strct.ClientParameters == nil {
        return nil, errors.New("ClientParameters is a required field")
    }
    // Marshal the "ClientParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ClientParameters\": ")
	if tmp, err := json.Marshal(strct.ClientParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "HttpMethod" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "HttpMethod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HttpMethod\": ")
	if tmp, err := json.Marshal(strct.HttpMethod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OAuthHttpParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OAuthHttpParameters\": ")
	if tmp, err := json.Marshal(strct.OAuthHttpParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OAuthParameters) UnmarshalJSON(b []byte) error {
    AuthorizationEndpointReceived := false
    ClientParametersReceived := false
    HttpMethodReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AuthorizationEndpoint":
            if err := json.Unmarshal([]byte(v), &strct.AuthorizationEndpoint); err != nil {
                return err
             }
            AuthorizationEndpointReceived = true
        case "ClientParameters":
            if err := json.Unmarshal([]byte(v), &strct.ClientParameters); err != nil {
                return err
             }
            ClientParametersReceived = true
        case "HttpMethod":
            if err := json.Unmarshal([]byte(v), &strct.HttpMethod); err != nil {
                return err
             }
            HttpMethodReceived = true
        case "OAuthHttpParameters":
            if err := json.Unmarshal([]byte(v), &strct.OAuthHttpParameters); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AuthorizationEndpoint (a required property) was received
    if !AuthorizationEndpointReceived {
        return errors.New("\"AuthorizationEndpoint\" is required but was not present")
    }
    // check if ClientParameters (a required property) was received
    if !ClientParametersReceived {
        return errors.New("\"ClientParameters\" is required but was not present")
    }
    // check if HttpMethod (a required property) was received
    if !HttpMethodReceived {
        return errors.New("\"HttpMethod\" is required but was not present")
    }
    return nil
}

func (strct *Parameter) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "IsValueSecret" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsValueSecret\": ")
	if tmp, err := json.Marshal(strct.IsValueSecret); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Parameter) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "IsValueSecret":
            if err := json.Unmarshal([]byte(v), &strct.IsValueSecret); err != nil {
                return err
             }
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "AuthParameters" field is required
    if strct.AuthParameters == nil {
        return nil, errors.New("AuthParameters is a required field")
    }
    // Marshal the "AuthParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AuthParameters\": ")
	if tmp, err := json.Marshal(strct.AuthParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "AuthorizationType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AuthorizationType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AuthorizationType\": ")
	if tmp, err := json.Marshal(strct.AuthorizationType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecretArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecretArn\": ")
	if tmp, err := json.Marshal(strct.SecretArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AuthParametersReceived := false
    AuthorizationTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "AuthParameters":
            if err := json.Unmarshal([]byte(v), &strct.AuthParameters); err != nil {
                return err
             }
            AuthParametersReceived = true
        case "AuthorizationType":
            if err := json.Unmarshal([]byte(v), &strct.AuthorizationType); err != nil {
                return err
             }
            AuthorizationTypeReceived = true
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "SecretArn":
            if err := json.Unmarshal([]byte(v), &strct.SecretArn); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AuthParameters (a required property) was received
    if !AuthParametersReceived {
        return errors.New("\"AuthParameters\" is required but was not present")
    }
    // check if AuthorizationType (a required property) was received
    if !AuthorizationTypeReceived {
        return errors.New("\"AuthorizationType\" is required but was not present")
    }
    return nil
}
