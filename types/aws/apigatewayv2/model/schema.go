// Code generated by schema-generate. DO NOT EDIT.

package model

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// Resource Resource Type definition for AWS::ApiGatewayV2::Model
type Resource struct {
  ApiId string `json:"ApiId"`
  ContentType string `json:"ContentType,omitempty"`
  Description string `json:"Description,omitempty"`
  ModelId string `json:"ModelId,omitempty"`
  Name string `json:"Name"`
  Schema *Schema `json:"Schema"`
}

// Schema 
type Schema struct {
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ApiId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ApiId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApiId\": ")
	if tmp, err := json.Marshal(strct.ApiId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ContentType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ContentType\": ")
	if tmp, err := json.Marshal(strct.ContentType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ModelId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ModelId\": ")
	if tmp, err := json.Marshal(strct.ModelId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Schema" field is required
    if strct.Schema == nil {
        return nil, errors.New("Schema is a required field")
    }
    // Marshal the "Schema" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Schema\": ")
	if tmp, err := json.Marshal(strct.Schema); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ApiIdReceived := false
    NameReceived := false
    SchemaReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ApiId":
            if err := json.Unmarshal([]byte(v), &strct.ApiId); err != nil {
                return err
             }
            ApiIdReceived = true
        case "ContentType":
            if err := json.Unmarshal([]byte(v), &strct.ContentType); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "ModelId":
            if err := json.Unmarshal([]byte(v), &strct.ModelId); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Schema":
            if err := json.Unmarshal([]byte(v), &strct.Schema); err != nil {
                return err
             }
            SchemaReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ApiId (a required property) was received
    if !ApiIdReceived {
        return errors.New("\"ApiId\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if Schema (a required property) was received
    if !SchemaReceived {
        return errors.New("\"Schema\" is required but was not present")
    }
    return nil
}
