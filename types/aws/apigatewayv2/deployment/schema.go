// Code generated by schema-generate. DO NOT EDIT.

package deployment

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Resource Resource Type definition for AWS::ApiGatewayV2::Deployment
type Resource struct {
  ApiId string `json:"ApiId"`
  DeploymentId string `json:"DeploymentId,omitempty"`
  Description string `json:"Description,omitempty"`
  StageName string `json:"StageName,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ApiId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ApiId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApiId\": ")
	if tmp, err := json.Marshal(strct.ApiId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeploymentId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeploymentId\": ")
	if tmp, err := json.Marshal(strct.DeploymentId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StageName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StageName\": ")
	if tmp, err := json.Marshal(strct.StageName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ApiIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ApiId":
            if err := json.Unmarshal([]byte(v), &strct.ApiId); err != nil {
                return err
             }
            ApiIdReceived = true
        case "DeploymentId":
            if err := json.Unmarshal([]byte(v), &strct.DeploymentId); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "StageName":
            if err := json.Unmarshal([]byte(v), &strct.StageName); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ApiId (a required property) was received
    if !ApiIdReceived {
        return errors.New("\"ApiId\" is required but was not present")
    }
    return nil
}
