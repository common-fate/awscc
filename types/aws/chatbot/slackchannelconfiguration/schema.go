// Code generated by schema-generate. DO NOT EDIT.

package slackchannelconfiguration

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Resource Resource schema for AWS::Chatbot::SlackChannelConfiguration.
type Resource struct {

  // Amazon Resource Name (ARN) of the configuration
  Arn string `json:"Arn,omitempty"`

  // The name of the configuration
  ConfigurationName string `json:"ConfigurationName"`

  // The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed 'AdministratorAccess' policy is applied as a default if this is not set.
  GuardrailPolicies []string `json:"GuardrailPolicies,omitempty"`

  // The ARN of the IAM role that defines the permissions for AWS Chatbot
  IamRoleArn string `json:"IamRoleArn"`

  // Specifies the logging level for this configuration:ERROR,INFO or NONE. This property affects the log entries pushed to Amazon CloudWatch logs
  LoggingLevel string `json:"LoggingLevel,omitempty"`

  // The id of the Slack channel
  SlackChannelId string `json:"SlackChannelId"`

  // The id of the Slack workspace
  SlackWorkspaceId string `json:"SlackWorkspaceId"`

  // ARNs of SNS topics which delivers notifications to AWS Chatbot, for example CloudWatch alarm notifications.
  SnsTopicArns []string `json:"SnsTopicArns,omitempty"`

  // Enables use of a user role requirement in your chat configuration
  UserRoleRequired bool `json:"UserRoleRequired,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ConfigurationName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ConfigurationName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConfigurationName\": ")
	if tmp, err := json.Marshal(strct.ConfigurationName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "GuardrailPolicies" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"GuardrailPolicies\": ")
	if tmp, err := json.Marshal(strct.GuardrailPolicies); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IamRoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IamRoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IamRoleArn\": ")
	if tmp, err := json.Marshal(strct.IamRoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoggingLevel" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoggingLevel\": ")
	if tmp, err := json.Marshal(strct.LoggingLevel); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SlackChannelId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SlackChannelId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SlackChannelId\": ")
	if tmp, err := json.Marshal(strct.SlackChannelId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SlackWorkspaceId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SlackWorkspaceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SlackWorkspaceId\": ")
	if tmp, err := json.Marshal(strct.SlackWorkspaceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SnsTopicArns" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SnsTopicArns\": ")
	if tmp, err := json.Marshal(strct.SnsTopicArns); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UserRoleRequired" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UserRoleRequired\": ")
	if tmp, err := json.Marshal(strct.UserRoleRequired); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ConfigurationNameReceived := false
    IamRoleArnReceived := false
    SlackChannelIdReceived := false
    SlackWorkspaceIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "ConfigurationName":
            if err := json.Unmarshal([]byte(v), &strct.ConfigurationName); err != nil {
                return err
             }
            ConfigurationNameReceived = true
        case "GuardrailPolicies":
            if err := json.Unmarshal([]byte(v), &strct.GuardrailPolicies); err != nil {
                return err
             }
        case "IamRoleArn":
            if err := json.Unmarshal([]byte(v), &strct.IamRoleArn); err != nil {
                return err
             }
            IamRoleArnReceived = true
        case "LoggingLevel":
            if err := json.Unmarshal([]byte(v), &strct.LoggingLevel); err != nil {
                return err
             }
        case "SlackChannelId":
            if err := json.Unmarshal([]byte(v), &strct.SlackChannelId); err != nil {
                return err
             }
            SlackChannelIdReceived = true
        case "SlackWorkspaceId":
            if err := json.Unmarshal([]byte(v), &strct.SlackWorkspaceId); err != nil {
                return err
             }
            SlackWorkspaceIdReceived = true
        case "SnsTopicArns":
            if err := json.Unmarshal([]byte(v), &strct.SnsTopicArns); err != nil {
                return err
             }
        case "UserRoleRequired":
            if err := json.Unmarshal([]byte(v), &strct.UserRoleRequired); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ConfigurationName (a required property) was received
    if !ConfigurationNameReceived {
        return errors.New("\"ConfigurationName\" is required but was not present")
    }
    // check if IamRoleArn (a required property) was received
    if !IamRoleArnReceived {
        return errors.New("\"IamRoleArn\" is required but was not present")
    }
    // check if SlackChannelId (a required property) was received
    if !SlackChannelIdReceived {
        return errors.New("\"SlackChannelId\" is required but was not present")
    }
    // check if SlackWorkspaceId (a required property) was received
    if !SlackWorkspaceIdReceived {
        return errors.New("\"SlackWorkspaceId\" is required but was not present")
    }
    return nil
}
