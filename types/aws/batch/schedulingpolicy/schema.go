// Code generated by schema-generate. DO NOT EDIT.

package schedulingpolicy

import (
    "fmt"
    "bytes"
    "encoding/json"
)

// FairsharePolicy Fair Share Policy for the Job Queue.
type FairsharePolicy struct {
  ComputeReservation float64 `json:"ComputeReservation,omitempty"`
  ShareDecaySeconds float64 `json:"ShareDecaySeconds,omitempty"`

  // List of Share Attributes
  ShareDistribution []*ShareAttributes `json:"ShareDistribution,omitempty"`
}

// Resource Resource Type schema for AWS::Batch::SchedulingPolicy
type Resource struct {
  Arn string `json:"Arn,omitempty"`
  FairsharePolicy *FairsharePolicy `json:"FairsharePolicy,omitempty"`

  // Name of Scheduling Policy.
  Name string `json:"Name,omitempty"`

  // A key-value pair to associate with a resource.
  Tags *Tags `json:"Tags,omitempty"`
}

// ShareAttributes 
type ShareAttributes struct {
  ShareIdentifier string `json:"ShareIdentifier,omitempty"`
  WeightFactor float64 `json:"WeightFactor,omitempty"`
}

// Tags A key-value pair to associate with a resource.
type Tags struct {
}

func (strct *FairsharePolicy) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ComputeReservation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ComputeReservation\": ")
	if tmp, err := json.Marshal(strct.ComputeReservation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ShareDecaySeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ShareDecaySeconds\": ")
	if tmp, err := json.Marshal(strct.ShareDecaySeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ShareDistribution" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ShareDistribution\": ")
	if tmp, err := json.Marshal(strct.ShareDistribution); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *FairsharePolicy) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ComputeReservation":
            if err := json.Unmarshal([]byte(v), &strct.ComputeReservation); err != nil {
                return err
             }
        case "ShareDecaySeconds":
            if err := json.Unmarshal([]byte(v), &strct.ShareDecaySeconds); err != nil {
                return err
             }
        case "ShareDistribution":
            if err := json.Unmarshal([]byte(v), &strct.ShareDistribution); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FairsharePolicy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FairsharePolicy\": ")
	if tmp, err := json.Marshal(strct.FairsharePolicy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "FairsharePolicy":
            if err := json.Unmarshal([]byte(v), &strct.FairsharePolicy); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ShareAttributes) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ShareIdentifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ShareIdentifier\": ")
	if tmp, err := json.Marshal(strct.ShareIdentifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "WeightFactor" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WeightFactor\": ")
	if tmp, err := json.Marshal(strct.WeightFactor); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ShareAttributes) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ShareIdentifier":
            if err := json.Unmarshal([]byte(v), &strct.ShareIdentifier); err != nil {
                return err
             }
        case "WeightFactor":
            if err := json.Unmarshal([]byte(v), &strct.WeightFactor); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tags) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tags) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
