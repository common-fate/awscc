// Code generated by schema-generate. DO NOT EDIT.

package jobqueue

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// ComputeEnvironmentOrder 
type ComputeEnvironmentOrder struct {
  ComputeEnvironment string `json:"ComputeEnvironment"`
  Order int `json:"Order"`
}

// Resource Resource Type definition for AWS::Batch::JobQueue
type Resource struct {
  ComputeEnvironmentOrder []*ComputeEnvironmentOrder `json:"ComputeEnvironmentOrder"`
  JobQueueArn string `json:"JobQueueArn,omitempty"`
  JobQueueName string `json:"JobQueueName,omitempty"`
  Priority int `json:"Priority"`
  SchedulingPolicyArn string `json:"SchedulingPolicyArn,omitempty"`
  State string `json:"State,omitempty"`

  // A key-value pair to associate with a resource.
  Tags *Tags `json:"Tags,omitempty"`
}

// Tags A key-value pair to associate with a resource.
type Tags struct {
}

func (strct *ComputeEnvironmentOrder) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ComputeEnvironment" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ComputeEnvironment" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ComputeEnvironment\": ")
	if tmp, err := json.Marshal(strct.ComputeEnvironment); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Order" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Order" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Order\": ")
	if tmp, err := json.Marshal(strct.Order); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ComputeEnvironmentOrder) UnmarshalJSON(b []byte) error {
    ComputeEnvironmentReceived := false
    OrderReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ComputeEnvironment":
            if err := json.Unmarshal([]byte(v), &strct.ComputeEnvironment); err != nil {
                return err
             }
            ComputeEnvironmentReceived = true
        case "Order":
            if err := json.Unmarshal([]byte(v), &strct.Order); err != nil {
                return err
             }
            OrderReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ComputeEnvironment (a required property) was received
    if !ComputeEnvironmentReceived {
        return errors.New("\"ComputeEnvironment\" is required but was not present")
    }
    // check if Order (a required property) was received
    if !OrderReceived {
        return errors.New("\"Order\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ComputeEnvironmentOrder" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ComputeEnvironmentOrder" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ComputeEnvironmentOrder\": ")
	if tmp, err := json.Marshal(strct.ComputeEnvironmentOrder); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "JobQueueArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"JobQueueArn\": ")
	if tmp, err := json.Marshal(strct.JobQueueArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "JobQueueName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"JobQueueName\": ")
	if tmp, err := json.Marshal(strct.JobQueueName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Priority" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Priority" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Priority\": ")
	if tmp, err := json.Marshal(strct.Priority); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SchedulingPolicyArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SchedulingPolicyArn\": ")
	if tmp, err := json.Marshal(strct.SchedulingPolicyArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "State" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"State\": ")
	if tmp, err := json.Marshal(strct.State); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ComputeEnvironmentOrderReceived := false
    PriorityReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ComputeEnvironmentOrder":
            if err := json.Unmarshal([]byte(v), &strct.ComputeEnvironmentOrder); err != nil {
                return err
             }
            ComputeEnvironmentOrderReceived = true
        case "JobQueueArn":
            if err := json.Unmarshal([]byte(v), &strct.JobQueueArn); err != nil {
                return err
             }
        case "JobQueueName":
            if err := json.Unmarshal([]byte(v), &strct.JobQueueName); err != nil {
                return err
             }
        case "Priority":
            if err := json.Unmarshal([]byte(v), &strct.Priority); err != nil {
                return err
             }
            PriorityReceived = true
        case "SchedulingPolicyArn":
            if err := json.Unmarshal([]byte(v), &strct.SchedulingPolicyArn); err != nil {
                return err
             }
        case "State":
            if err := json.Unmarshal([]byte(v), &strct.State); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ComputeEnvironmentOrder (a required property) was received
    if !ComputeEnvironmentOrderReceived {
        return errors.New("\"ComputeEnvironmentOrder\" is required but was not present")
    }
    // check if Priority (a required property) was received
    if !PriorityReceived {
        return errors.New("\"Priority\" is required but was not present")
    }
    return nil
}

func (strct *Tags) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tags) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
