// Code generated by schema-generate. DO NOT EDIT.

package bot

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// AdvancedRecognitionSetting Provides settings that enable advanced recognition settings for slot values.
type AdvancedRecognitionSetting struct {
  AudioRecognitionStrategy string `json:"AudioRecognitionStrategy,omitempty"`
}

// AllowedInputTypes Specifies the allowed input types.
type AllowedInputTypes struct {

  // Indicates whether audio input is allowed.
  AllowAudioInput bool `json:"AllowAudioInput"`

  // Indicates whether DTMF input is allowed.
  AllowDTMFInput bool `json:"AllowDTMFInput"`
}

// AudioAndDTMFInputSpecification Specifies the audio and DTMF input specification.
type AudioAndDTMFInputSpecification struct {
  AudioSpecification *AudioSpecification `json:"AudioSpecification,omitempty"`
  DTMFSpecification *DTMFSpecification `json:"DTMFSpecification,omitempty"`

  // Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.
  StartTimeoutMs int `json:"StartTimeoutMs"`
}

// AudioLogDestination The location of audio log files collected when conversation logging is enabled for a bot.
type AudioLogDestination struct {
  S3Bucket *S3BucketLogDestination `json:"S3Bucket"`
}

// AudioLogSetting Settings for logging audio of conversations between Amazon Lex and a user. You specify whether to log audio and the Amazon S3 bucket where the audio file is stored.
type AudioLogSetting struct {
  Destination *AudioLogDestination `json:"Destination"`
  Enabled bool `json:"Enabled"`
}

// AudioSpecification Specifies the audio input specifications.
type AudioSpecification struct {

  // Time for which a bot waits after the customer stops speaking to assume the utterance is finished.
  EndTimeoutMs int `json:"EndTimeoutMs"`

  // Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application.
  MaxLengthMs int `json:"MaxLengthMs"`
}

// BotAliasLocaleSettings You can use this parameter to specify a specific Lambda function to run different functions in different locales.
type BotAliasLocaleSettings struct {
  CodeHookSpecification *CodeHookSpecification `json:"CodeHookSpecification,omitempty"`

  // Whether the Lambda code hook is enabled
  Enabled bool `json:"Enabled"`
}

// BotAliasLocaleSettingsItem A locale setting in alias
type BotAliasLocaleSettingsItem struct {
  BotAliasLocaleSetting *BotAliasLocaleSettings `json:"BotAliasLocaleSetting"`

  // A string used to identify the locale
  LocaleId string `json:"LocaleId"`
}

// BotLocale A locale in the bot, which contains the intents and slot types that the bot uses in conversations with users in the specified language and locale.
type BotLocale struct {
  CustomVocabulary *CustomVocabulary `json:"CustomVocabulary,omitempty"`
  Description string `json:"Description,omitempty"`

  // List of intents
  Intents []*Intent `json:"Intents,omitempty"`
  LocaleId string `json:"LocaleId"`
  NluConfidenceThreshold float64 `json:"NluConfidenceThreshold"`

  // List of SlotTypes
  SlotTypes []*SlotType `json:"SlotTypes,omitempty"`
  VoiceSettings *VoiceSettings `json:"VoiceSettings,omitempty"`
}

// Button A button to use on a response card used to gather slot values from a user.
type Button struct {

  // The text that appears on the button.
  Text string `json:"Text"`

  // The value returned to Amazon Lex when the user chooses this button.
  Value string `json:"Value"`
}

// CloudWatchLogGroupLogDestination 
type CloudWatchLogGroupLogDestination struct {

  // A string used to identify the groupArn for the Cloudwatch Log Group
  CloudWatchLogGroupArn string `json:"CloudWatchLogGroupArn"`

  // A string containing the value for the Log Prefix
  LogPrefix string `json:"LogPrefix"`
}

// CodeHookSpecification Contains information about code hooks that Amazon Lex calls during a conversation.
type CodeHookSpecification struct {
  LambdaCodeHook *LambdaCodeHook `json:"LambdaCodeHook"`
}

// Condition Provides an expression that evaluates to true or false.
type Condition struct {

  // The expression string that is evaluated.
  ExpressionString string `json:"ExpressionString"`
}

// Conditional Contains conditional branches to fork the conversation flow.
type Conditional struct {
  ConditionalBranches []*ConditionalBranch `json:"ConditionalBranches"`
  IsActive bool `json:"IsActive"`
}

// ConditionalBranch A set of actions that Amazon Lex should run if the condition is matched.
type ConditionalBranch struct {

  // Contains the expression to evaluate. If the condition is true, the branch's actions are taken.
  Condition *Condition `json:"Condition"`

  // The name of the branch.
  Name string `json:"Name"`

  // The next step in the conversation.
  NextStep *DialogState `json:"NextStep"`

  // Specifies a list of message groups that Amazon Lex uses to respond the user input.
  Response *ResponseSpecification `json:"Response,omitempty"`
}

// ConditionalSpecification Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
type ConditionalSpecification struct {

  // A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true.
  ConditionalBranches []*ConditionalBranch `json:"ConditionalBranches"`

  // The conditional branch that should be followed when the conditions for other branches are not satisfied. A conditional branch is made up of a condition, a response and a next step.
  DefaultBranch *DefaultConditionalBranch `json:"DefaultBranch"`

  // Determines whether a conditional branch is active. When active is false, the conditions are not evaluated.
  IsActive bool `json:"IsActive"`
}

// ConversationLogSettings Contains information about code hooks that Amazon Lex calls during a conversation.
type ConversationLogSettings struct {
  AudioLogSettings []*AudioLogSetting `json:"AudioLogSettings,omitempty"`
  TextLogSettings []*TextLogSetting `json:"TextLogSettings,omitempty"`
}

// CustomPayload A message in a custom format defined by the client application.
type CustomPayload struct {

  // The string that is sent to your application.
  Value string `json:"Value"`
}

// CustomVocabulary A custom vocabulary is a list of specific phrases that you want Amazon Lex V2 to recognize in the audio input.
type CustomVocabulary struct {
  CustomVocabularyItems []*CustomVocabularyItem `json:"CustomVocabularyItems"`
}

// CustomVocabularyItem A custom vocabulary item that contains the phrase to recognize and a weight to give the boost.
type CustomVocabularyItem struct {

  // Phrase that should be recognized.
  Phrase string `json:"Phrase"`

  // The degree to which the phrase recognition is boosted.
  Weight int `json:"Weight,omitempty"`
}

// DTMFSpecification Specifies the settings on DTMF input.
type DTMFSpecification struct {

  // The DTMF character that clears the accumulated DTMF digits and immediately ends the input.
  DeletionCharacter string `json:"DeletionCharacter"`

  // The DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout.
  EndCharacter string `json:"EndCharacter"`

  // How long the bot should wait after the last DTMF character input before assuming that the input has concluded.
  EndTimeoutMs int `json:"EndTimeoutMs"`

  // The maximum number of DTMF digits allowed in an utterance.
  MaxLength int `json:"MaxLength"`
}

// DataPrivacy Data privacy setting of the Bot.
type DataPrivacy struct {
  ChildDirected bool `json:"ChildDirected"`
}

// DefaultConditionalBranch A set of actions that Amazon Lex should run if none of the other conditions are met.
type DefaultConditionalBranch struct {

  // The next step in the conversation.
  NextStep *DialogState `json:"NextStep,omitempty"`

  // Specifies a list of message groups that Amazon Lex uses to respond the user input.
  Response *ResponseSpecification `json:"Response,omitempty"`
}

// DialogAction Defines the action that the bot executes at runtime when the conversation reaches this step.
type DialogAction struct {

  // If the dialog action is ElicitSlot, defines the slot to elicit from the user.
  SlotToElicit string `json:"SlotToElicit,omitempty"`

  // When true the next message for the intent is not used.
  SuppressNextMessage bool `json:"SuppressNextMessage,omitempty"`

  // The action that the bot should execute.
  Type string `json:"Type"`
}

// DialogCodeHookInvocationSetting Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.
type DialogCodeHookInvocationSetting struct {

  // Indicates whether a Lambda function should be invoked for the dialog.
  EnableCodeHookInvocation bool `json:"EnableCodeHookInvocation"`

  // A label that indicates the dialog step from which the dialog code hook is happening.
  InvocationLabel string `json:"InvocationLabel,omitempty"`

  // Determines whether a dialog code hook is used when the intent is activated.
  IsActive bool `json:"IsActive"`

  // Contains the responses and actions that Amazon Lex takes after the Lambda function is complete.
  PostCodeHookSpecification *PostDialogCodeHookInvocationSpecification `json:"PostCodeHookSpecification"`
}

// DialogCodeHookSetting Settings that determine the Lambda function that Amazon Lex uses for processing user responses.
type DialogCodeHookSetting struct {
  Enabled bool `json:"Enabled"`
}

// DialogState The current state of the conversation with the user.
type DialogState struct {

  // Defines the action that the bot executes at runtime when the conversation reaches this step.
  DialogAction *DialogAction `json:"DialogAction,omitempty"`

  // Override settings to configure the intent state.
  Intent *IntentOverride `json:"Intent,omitempty"`

  // List of session attributes to be applied when the conversation reaches this step.
  SessionAttributes []*SessionAttribute `json:"SessionAttributes,omitempty"`
}

// ElicitationCodeHookInvocationSetting Settings that specify the dialog code hook that is called by Amazon Lex between eliciting slot values.
type ElicitationCodeHookInvocationSetting struct {

  // Indicates whether a Lambda function should be invoked for the dialog.
  EnableCodeHookInvocation bool `json:"EnableCodeHookInvocation"`

  // A label that indicates the dialog step from which the dialog code hook is happening.
  InvocationLabel string `json:"InvocationLabel,omitempty"`
}

// ExternalSourceSetting Provides information about the external source of the slot type's definition.
type ExternalSourceSetting struct {
  GrammarSlotTypeSetting *GrammarSlotTypeSetting `json:"GrammarSlotTypeSetting,omitempty"`
}

// FulfillmentCodeHookSetting Settings that determine if a Lambda function should be invoked to fulfill a specific intent.
type FulfillmentCodeHookSetting struct {
  Enabled bool `json:"Enabled"`
  FulfillmentUpdatesSpecification *FulfillmentUpdatesSpecification `json:"FulfillmentUpdatesSpecification,omitempty"`

  // Determines whether the fulfillment code hook is used. When active is false, the code hook doesn't run.
  IsActive bool `json:"IsActive,omitempty"`
  PostFulfillmentStatusSpecification *PostFulfillmentStatusSpecification `json:"PostFulfillmentStatusSpecification,omitempty"`
}

// FulfillmentStartResponseSpecification Provides settings for a message that is sent to the user when a fulfillment Lambda function starts running.
type FulfillmentStartResponseSpecification struct {

  // Determines whether the user can interrupt the start message while it is playing.
  AllowInterrupt bool `json:"AllowInterrupt,omitempty"`

  // The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.
  DelayInSeconds int `json:"DelayInSeconds"`
  MessageGroups []*MessageGroup `json:"MessageGroups"`
}

// FulfillmentUpdateResponseSpecification Provides settings for a message that is sent periodically to the user while a fulfillment Lambda function is running.
type FulfillmentUpdateResponseSpecification struct {

  // Determines whether the user can interrupt an update message while it is playing.
  AllowInterrupt bool `json:"AllowInterrupt,omitempty"`

  // The frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
  FrequencyInSeconds int `json:"FrequencyInSeconds"`
  MessageGroups []*MessageGroup `json:"MessageGroups"`
}

// FulfillmentUpdatesSpecification Provides information for updating the user on the progress of fulfilling an intent.
type FulfillmentUpdatesSpecification struct {

  // Determines whether fulfillment updates are sent to the user. When this field is true, updates are sent.
  Active bool `json:"Active"`
  StartResponse *FulfillmentStartResponseSpecification `json:"StartResponse,omitempty"`

  // The length of time that the fulfillment Lambda function should run before it times out.
  TimeoutInSeconds int `json:"TimeoutInSeconds,omitempty"`
  UpdateResponse *FulfillmentUpdateResponseSpecification `json:"UpdateResponse,omitempty"`
}

// GrammarSlotTypeSetting Settings required for a slot type based on a grammar that you provide.
type GrammarSlotTypeSetting struct {
  Source *GrammarSlotTypeSource `json:"Source,omitempty"`
}

// GrammarSlotTypeSource Describes the Amazon S3 bucket name and location for the grammar that is the source for the slot type.
type GrammarSlotTypeSource struct {

  // The Amazon KMS key required to decrypt the contents of the grammar, if any.
  KmsKeyArn string `json:"KmsKeyArn,omitempty"`

  // The name of the S3 bucket that contains the grammar source.
  S3BucketName string `json:"S3BucketName"`

  // The path to the grammar in the S3 bucket.
  S3ObjectKey string `json:"S3ObjectKey"`
}

// ImageResponseCard A message that defines a response card that the client application can show to the user.
type ImageResponseCard struct {

  // A list of buttons that should be displayed on the response card.
  Buttons []*Button `json:"Buttons,omitempty"`

  // The URL of an image to display on the response card.
  ImageUrl string `json:"ImageUrl,omitempty"`

  // The subtitle to display on the response card.
  Subtitle string `json:"Subtitle,omitempty"`

  // The title to display on the response card.
  Title string `json:"Title"`
}

// InitialResponseSetting Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
type InitialResponseSetting struct {

  // Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.
  CodeHook *DialogCodeHookInvocationSetting `json:"CodeHook,omitempty"`

  // Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
  Conditional *ConditionalSpecification `json:"Conditional,omitempty"`

  // Specifies a list of message groups that Amazon Lex uses to respond the user input.
  InitialResponse *ResponseSpecification `json:"InitialResponse,omitempty"`

  // The next step in the conversation.
  NextStep *DialogState `json:"NextStep,omitempty"`
}

// InputContext InputContext specified for the intent.
type InputContext struct {

  // The name of the context.
  Name string `json:"Name"`
}

// Intent Represents an action that the user wants to perform.
type Intent struct {

  // Description of thr intent.
  Description string `json:"Description,omitempty"`
  DialogCodeHook *DialogCodeHookSetting `json:"DialogCodeHook,omitempty"`
  FulfillmentCodeHook *FulfillmentCodeHookSetting `json:"FulfillmentCodeHook,omitempty"`

  // Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
  InitialResponseSetting *InitialResponseSetting `json:"InitialResponseSetting,omitempty"`
  InputContexts []*InputContext `json:"InputContexts,omitempty"`
  IntentClosingSetting *IntentClosingSetting `json:"IntentClosingSetting,omitempty"`
  IntentConfirmationSetting *IntentConfirmationSetting `json:"IntentConfirmationSetting,omitempty"`
  KendraConfiguration *KendraConfiguration `json:"KendraConfiguration,omitempty"`

  // The name of the intent.
  Name string `json:"Name"`
  OutputContexts []*OutputContext `json:"OutputContexts,omitempty"`
  ParentIntentSignature string `json:"ParentIntentSignature,omitempty"`

  // A sample utterance that invokes an intent or respond to a slot elicitation prompt.
  SampleUtterances []*SampleUtterance `json:"SampleUtterances,omitempty"`
  SlotPriorities []*SlotPriority `json:"SlotPriorities,omitempty"`

  // List of slots
  Slots []*Slot `json:"Slots,omitempty"`
}

// IntentClosingSetting Provides a statement the Amazon Lex conveys to the user when the intent is successfully fulfilled.
type IntentClosingSetting struct {

  // The response that Amazon Lex sends to the user when the intent is complete.
  ClosingResponse *ResponseSpecification `json:"ClosingResponse,omitempty"`

  // A list of conditional branches associated with the intent's closing response. These branches are executed when the nextStep attribute is set to EvalutateConditional.
  Conditional *ConditionalSpecification `json:"Conditional,omitempty"`

  // Specifies whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the active field isn't specified, the default is true.
  IsActive bool `json:"IsActive,omitempty"`

  // Specifies the next step that the bot executes after playing the intent's closing response.
  NextStep *DialogState `json:"NextStep,omitempty"`
}

// IntentConfirmationSetting Provides a prompt for making sure that the user is ready for the intent to be fulfilled.
type IntentConfirmationSetting struct {

  // The DialogCodeHookInvocationSetting object associated with intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is InvokeDialogCodeHook.
  CodeHook *DialogCodeHookInvocationSetting `json:"CodeHook,omitempty"`

  // A list of conditional branches to evaluate after the intent is closed.
  ConfirmationConditional *ConditionalSpecification `json:"ConfirmationConditional,omitempty"`

  // Specifies the next step that the bot executes when the customer confirms the intent.
  ConfirmationNextStep *DialogState `json:"ConfirmationNextStep,omitempty"`

  // Specifies a list of message groups that Amazon Lex uses to respond the user input.
  ConfirmationResponse *ResponseSpecification `json:"ConfirmationResponse,omitempty"`

  // A list of conditional branches to evaluate after the intent is declined.
  DeclinationConditional *ConditionalSpecification `json:"DeclinationConditional,omitempty"`

  // Specifies the next step that the bot executes when the customer declines the intent.
  DeclinationNextStep *DialogState `json:"DeclinationNextStep,omitempty"`

  // When the user answers "no" to the question defined in promptSpecification, Amazon Lex responds with this response to acknowledge that the intent was canceled.
  DeclinationResponse *ResponseSpecification `json:"DeclinationResponse,omitempty"`

  // The DialogCodeHookInvocationSetting used when the code hook is invoked during confirmation prompt retries.
  ElicitationCodeHook *ElicitationCodeHookInvocationSetting `json:"ElicitationCodeHook,omitempty"`

  // Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
  FailureConditional *ConditionalSpecification `json:"FailureConditional,omitempty"`

  // The next step to take in the conversation if the confirmation step fails.
  FailureNextStep *DialogState `json:"FailureNextStep,omitempty"`

  // Specifies a list of message groups that Amazon Lex uses to respond the user input.
  FailureResponse *ResponseSpecification `json:"FailureResponse,omitempty"`

  // Specifies whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the active field isn't specified, the default is true.
  IsActive bool `json:"IsActive,omitempty"`

  // Prompts the user to confirm the intent. This question should have a yes or no answer.
  PromptSpecification *PromptSpecification `json:"PromptSpecification"`
}

// IntentOverride Override settings to configure the intent state.
type IntentOverride struct {

  // The name of the intent. Only required when you're switching intents.
  Name string `json:"Name,omitempty"`

  // A map of all of the slot value overrides for the intent.
  Slots []*SlotValueOverrideMap `json:"Slots,omitempty"`
}

// KendraConfiguration Configuration for searching a Amazon Kendra index specified for the intent.
type KendraConfiguration struct {
  KendraIndex string `json:"KendraIndex"`
  QueryFilterString string `json:"QueryFilterString,omitempty"`

  // Determines whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index.
  QueryFilterStringEnabled bool `json:"QueryFilterStringEnabled,omitempty"`
}

// LambdaCodeHook Contains information about code hooks that Amazon Lex calls during a conversation.
type LambdaCodeHook struct {

  // The version of the request-response that you want Amazon Lex to use to invoke your Lambda function.
  CodeHookInterfaceVersion string `json:"CodeHookInterfaceVersion"`

  // The Amazon Resource Name (ARN) of the Lambda function.
  LambdaArn string `json:"LambdaArn"`
}

// Message The primary message that Amazon Lex should send to the user.
type Message struct {
  CustomPayload *CustomPayload `json:"CustomPayload,omitempty"`
  ImageResponseCard *ImageResponseCard `json:"ImageResponseCard,omitempty"`
  PlainTextMessage *PlainTextMessage `json:"PlainTextMessage,omitempty"`
  SSMLMessage *SSMLMessage `json:"SSMLMessage,omitempty"`
}

// MessageGroup One or more messages that Amazon Lex can send to the user.
type MessageGroup struct {
  Message *Message `json:"Message"`

  // Message variations to send to the user.
  Variations []*Message `json:"Variations,omitempty"`
}

// MultipleValuesSetting Indicates whether a slot can return multiple values.
type MultipleValuesSetting struct {
  AllowMultipleValues bool `json:"AllowMultipleValues,omitempty"`
}

// ObfuscationSetting Determines whether Amazon Lex obscures slot values in conversation logs.
type ObfuscationSetting struct {

  // Value that determines whether Amazon Lex obscures slot values in conversation logs. The default is to obscure the values.
  ObfuscationSettingType string `json:"ObfuscationSettingType"`
}

// OutputContext A session context that is activated when an intent is fulfilled.
type OutputContext struct {
  Name string `json:"Name"`
  TimeToLiveInSeconds int `json:"TimeToLiveInSeconds"`
  TurnsToLive int `json:"TurnsToLive"`
}

// PlainTextMessage A message in plain text format.
type PlainTextMessage struct {

  // The message to send to the user.
  Value string `json:"Value"`
}

// PostDialogCodeHookInvocationSpecification Specifies next steps to run after the dialog code hook finishes.
type PostDialogCodeHookInvocationSpecification struct {

  // A list of conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
  FailureConditional *ConditionalSpecification `json:"FailureConditional,omitempty"`

  // Specifies the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
  FailureNextStep *DialogState `json:"FailureNextStep,omitempty"`

  // Specifies a list of message groups that Amazon Lex uses to respond the user input.
  FailureResponse *ResponseSpecification `json:"FailureResponse,omitempty"`

  // A list of conditional branches to evaluate after the dialog code hook finishes successfully.
  SuccessConditional *ConditionalSpecification `json:"SuccessConditional,omitempty"`

  // Specifics the next step the bot runs after the dialog code hook finishes successfully.
  SuccessNextStep *DialogState `json:"SuccessNextStep,omitempty"`

  // Specifies a list of message groups that Amazon Lex uses to respond the user input.
  SuccessResponse *ResponseSpecification `json:"SuccessResponse,omitempty"`

  // A list of conditional branches to evaluate if the code hook times out.
  TimeoutConditional *ConditionalSpecification `json:"TimeoutConditional,omitempty"`

  // Specifies the next step that the bot runs when the code hook times out.
  TimeoutNextStep *DialogState `json:"TimeoutNextStep,omitempty"`

  // Specifies a list of message groups that Amazon Lex uses to respond the user input.
  TimeoutResponse *ResponseSpecification `json:"TimeoutResponse,omitempty"`
}

// PostFulfillmentStatusSpecification Provides a setting that determines whether the post-fulfillment response is sent to the user.
type PostFulfillmentStatusSpecification struct {

  // A list of conditional branches to evaluate after the fulfillment code hook throws an exception or returns with the State field of the Intent object set to Failed.
  FailureConditional *ConditionalSpecification `json:"FailureConditional,omitempty"`

  // Specifies the next step the bot runs after the fulfillment code hook throws an exception or returns with the State field of the Intent object set to Failed.
  FailureNextStep *DialogState `json:"FailureNextStep,omitempty"`

  // Specifies a list of message groups that Amazon Lex uses to respond the user input.
  FailureResponse *ResponseSpecification `json:"FailureResponse,omitempty"`

  // A list of conditional branches to evaluate after the fulfillment code hook finishes successfully.
  SuccessConditional *ConditionalSpecification `json:"SuccessConditional,omitempty"`

  // Specifies the next step in the conversation that Amazon Lex invokes when the fulfillment code hook completes successfully.
  SuccessNextStep *DialogState `json:"SuccessNextStep,omitempty"`

  // Specifies a list of message groups that Amazon Lex uses to respond the user input.
  SuccessResponse *ResponseSpecification `json:"SuccessResponse,omitempty"`

  // A list of conditional branches to evaluate if the fulfillment code hook times out.
  TimeoutConditional *ConditionalSpecification `json:"TimeoutConditional,omitempty"`

  // Specifies the next step that the bot runs when the fulfillment code hook times out.
  TimeoutNextStep *DialogState `json:"TimeoutNextStep,omitempty"`

  // Specifies a list of message groups that Amazon Lex uses to respond the user input.
  TimeoutResponse *ResponseSpecification `json:"TimeoutResponse,omitempty"`
}

// PromptAttemptSpecification Specifies the settings on a prompt attempt.
type PromptAttemptSpecification struct {

  // Indicates whether the user can interrupt a speech prompt attempt from the bot.
  AllowInterrupt bool `json:"AllowInterrupt,omitempty"`
  AllowedInputTypes *AllowedInputTypes `json:"AllowedInputTypes"`
  AudioAndDTMFInputSpecification *AudioAndDTMFInputSpecification `json:"AudioAndDTMFInputSpecification,omitempty"`
  TextInputSpecification *TextInputSpecification `json:"TextInputSpecification,omitempty"`
}

// PromptAttemptsSpecification Specifies the advanced settings on each attempt of the prompt.
type PromptAttemptsSpecification struct {
}

// PromptSpecification Prompts the user to confirm the intent.
type PromptSpecification struct {

  // Indicates whether the user can interrupt a speech prompt from the bot.
  AllowInterrupt bool `json:"AllowInterrupt,omitempty"`
  MaxRetries int `json:"MaxRetries"`
  MessageGroupsList []*MessageGroup `json:"MessageGroupsList"`
  MessageSelectionStrategy string `json:"MessageSelectionStrategy,omitempty"`

  // Specifies the advanced settings on each attempt of the prompt.
  PromptAttemptsSpecification *PromptAttemptsSpecification `json:"PromptAttemptsSpecification,omitempty"`
}

// Resource Amazon Lex conversational bot performing automated tasks such as ordering a pizza, booking a hotel, and so on.
type Resource struct {
  Arn string `json:"Arn,omitempty"`

  // Specifies whether to build the bot locales after bot creation completes.
  AutoBuildBotLocales bool `json:"AutoBuildBotLocales,omitempty"`
  BotFileS3Location *S3Location `json:"BotFileS3Location,omitempty"`

  // List of bot locales
  BotLocales []*BotLocale `json:"BotLocales,omitempty"`

  // A list of tags to add to the bot, which can only be added at bot creation.
  BotTags []*Tag `json:"BotTags,omitempty"`

  // Data privacy setting of the Bot.
  DataPrivacy *DataPrivacy `json:"DataPrivacy"`
  Description string `json:"Description,omitempty"`
  Id string `json:"Id,omitempty"`

  // IdleSessionTTLInSeconds of the resource
  IdleSessionTTLInSeconds int `json:"IdleSessionTTLInSeconds"`
  Name string `json:"Name"`
  RoleArn string `json:"RoleArn"`
  TestBotAliasSettings *TestBotAliasSettings `json:"TestBotAliasSettings,omitempty"`

  // A list of tags to add to the test alias for a bot, , which can only be added at bot/bot alias creation.
  TestBotAliasTags []*Tag `json:"TestBotAliasTags,omitempty"`
}

// ResponseSpecification A list of message groups that Amazon Lex uses to respond the user input.
type ResponseSpecification struct {

  // Indicates whether the user can interrupt a speech prompt from the bot.
  AllowInterrupt bool `json:"AllowInterrupt,omitempty"`
  MessageGroupsList []*MessageGroup `json:"MessageGroupsList"`
}

// S3BucketLogDestination Specifies an Amazon S3 bucket for logging audio conversations
type S3BucketLogDestination struct {

  // The Amazon Resource Name (ARN) of an AWS Key Management Service (KMS) key for encrypting audio log files stored in an S3 bucket.
  KmsKeyArn string `json:"KmsKeyArn,omitempty"`

  // The Amazon S3 key of the deployment package.
  LogPrefix string `json:"LogPrefix"`

  // The Amazon Resource Name (ARN) of an Amazon S3 bucket where audio log files are stored.
  S3BucketArn string `json:"S3BucketArn"`
}

// S3Location S3 location of bot definitions zip file, if it's not defined inline in CloudFormation.
type S3Location struct {

  // An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
  S3Bucket string `json:"S3Bucket"`

  // The Amazon S3 key of the deployment package.
  S3ObjectKey string `json:"S3ObjectKey"`

  // For versioned objects, the version of the deployment package object to use. If not specified, the current object version will be used.
  S3ObjectVersion string `json:"S3ObjectVersion,omitempty"`
}

// SSMLMessage A message in Speech Synthesis Markup Language (SSML).
type SSMLMessage struct {

  // The SSML text that defines the prompt.
  Value string `json:"Value"`
}

// SampleUtterance A sample utterance that invokes an intent or respond to a slot elicitation prompt.
type SampleUtterance struct {
  Utterance string `json:"Utterance"`
}

// SampleValue Defines one of the values for a slot type.
type SampleValue struct {

  // The value that can be used for a slot type.
  Value string `json:"Value"`
}

// SentimentAnalysisSettings Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
type SentimentAnalysisSettings struct {

  // Enable to call Amazon Comprehend for Sentiment natively within Lex
  DetectSentiment bool `json:"DetectSentiment"`
}

// SessionAttribute Key/value pair representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
type SessionAttribute struct {
  Key string `json:"Key"`
  Value string `json:"Value,omitempty"`
}

// Slot A slot is a variable needed to fulfill an intent, where an intent can require zero or more slots.
type Slot struct {
  Description string `json:"Description,omitempty"`
  MultipleValuesSetting *MultipleValuesSetting `json:"MultipleValuesSetting,omitempty"`
  Name string `json:"Name"`
  ObfuscationSetting *ObfuscationSetting `json:"ObfuscationSetting,omitempty"`
  SlotTypeName string `json:"SlotTypeName"`
  ValueElicitationSetting *SlotValueElicitationSetting `json:"ValueElicitationSetting"`
}

// SlotCaptureSetting Settings used when Amazon Lex successfully captures a slot value from a user.
type SlotCaptureSetting struct {

  // A list of conditional branches to evaluate after the slot value is captured.
  CaptureConditional *ConditionalSpecification `json:"CaptureConditional,omitempty"`

  // Specifies the next step that the bot runs when the slot value is captured before the code hook times out.
  CaptureNextStep *DialogState `json:"CaptureNextStep,omitempty"`

  // Specifies a list of message groups that Amazon Lex uses to respond the user input.
  CaptureResponse *ResponseSpecification `json:"CaptureResponse,omitempty"`

  // Code hook called after Amazon Lex successfully captures a slot value.
  CodeHook *DialogCodeHookInvocationSetting `json:"CodeHook,omitempty"`

  // Code hook called when Amazon Lex doesn't capture a slot value.
  ElicitationCodeHook *ElicitationCodeHookInvocationSetting `json:"ElicitationCodeHook,omitempty"`

  // A list of conditional branches to evaluate when the slot value isn't captured.
  FailureConditional *ConditionalSpecification `json:"FailureConditional,omitempty"`

  // Specifies the next step that the bot runs when the slot value code is not recognized.
  FailureNextStep *DialogState `json:"FailureNextStep,omitempty"`

  // Specifies a list of message groups that Amazon Lex uses to respond the user input.
  FailureResponse *ResponseSpecification `json:"FailureResponse,omitempty"`
}

// SlotDefaultValue The default value to use when a user doesn't provide a value for a slot.
type SlotDefaultValue struct {

  // The default value to use when a user doesn't provide a value for a slot.
  DefaultValue string `json:"DefaultValue"`
}

// SlotDefaultValueSpecification A list of values that Amazon Lex should use as the default value for a slot.
type SlotDefaultValueSpecification struct {

  // A list of slot default values
  DefaultValueList []*SlotDefaultValue `json:"DefaultValueList"`
}

// SlotPriority The priority that Amazon Lex should use when eliciting slot values from a user.
type SlotPriority struct {
  Priority int `json:"Priority"`

  // The name of the slot.
  SlotName string `json:"SlotName"`
}

// SlotType A custom, extended built-in or a grammar slot type.
type SlotType struct {
  Description string `json:"Description,omitempty"`
  ExternalSourceSetting *ExternalSourceSetting `json:"ExternalSourceSetting,omitempty"`
  Name string `json:"Name"`
  ParentSlotTypeSignature string `json:"ParentSlotTypeSignature,omitempty"`
  SlotTypeValues []*SlotTypeValue `json:"SlotTypeValues,omitempty"`
  ValueSelectionSetting *SlotValueSelectionSetting `json:"ValueSelectionSetting,omitempty"`
}

// SlotTypeValue Value that the slot type can take.
type SlotTypeValue struct {
  SampleValue *SampleValue `json:"SampleValue"`
  Synonyms []*SampleValue `json:"Synonyms,omitempty"`
}

// SlotValue The value to set in a slot.
type SlotValue struct {

  // The value that Amazon Lex determines for the slot.
  InterpretedValue string `json:"InterpretedValue,omitempty"`
}

// SlotValueElicitationSetting Settings that you can use for eliciting a slot value.
type SlotValueElicitationSetting struct {

  // A list of default values for a slot.
  DefaultValueSpecification *SlotDefaultValueSpecification `json:"DefaultValueSpecification,omitempty"`

  // The prompt that Amazon Lex uses to elicit the slot value from the user.
  PromptSpecification *PromptSpecification `json:"PromptSpecification,omitempty"`

  // If you know a specific pattern that users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy.
  SampleUtterances []*SampleUtterance `json:"SampleUtterances,omitempty"`

  // Specifies the next stage in the conversation after capturing the slot.
  SlotCaptureSetting *SlotCaptureSetting `json:"SlotCaptureSetting,omitempty"`

  // Specifies whether the slot is required or optional.
  SlotConstraint string `json:"SlotConstraint"`

  // Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
  WaitAndContinueSpecification *WaitAndContinueSpecification `json:"WaitAndContinueSpecification,omitempty"`
}

// SlotValueOverride The slot values that Amazon Lex uses when it sets slot values in a dialog step.
type SlotValueOverride struct {

  // When the shape value is List, it indicates that the values field contains a list of slot values. When the value is Scalar, it indicates that the value field contains a single value.
  Shape string `json:"Shape,omitempty"`

  // The current value of the slot.
  Value *SlotValue `json:"Value,omitempty"`

  // A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."
  Values []*SlotValueOverride `json:"Values,omitempty"`
}

// SlotValueOverrideMap A map of slot names and their overridden values.
type SlotValueOverrideMap struct {
  SlotName string `json:"SlotName,omitempty"`
  SlotValueOverride *SlotValueOverride `json:"SlotValueOverride,omitempty"`
}

// SlotValueRegexFilter A regular expression used to validate the value of a slot.
type SlotValueRegexFilter struct {

  // Regex pattern
  Pattern string `json:"Pattern"`
}

// SlotValueSelectionSetting Contains settings used by Amazon Lex to select a slot value.
type SlotValueSelectionSetting struct {
  AdvancedRecognitionSetting *AdvancedRecognitionSetting `json:"AdvancedRecognitionSetting,omitempty"`
  RegexFilter *SlotValueRegexFilter `json:"RegexFilter,omitempty"`
  ResolutionStrategy string `json:"ResolutionStrategy"`
}

// StillWaitingResponseSpecification StillWaitingResponseSpecification.
type StillWaitingResponseSpecification struct {

  // Indicates whether the user can interrupt a speech prompt from the bot.
  AllowInterrupt bool `json:"AllowInterrupt,omitempty"`
  FrequencyInSeconds int `json:"FrequencyInSeconds"`
  MessageGroupsList []*MessageGroup `json:"MessageGroupsList"`
  TimeoutInSeconds int `json:"TimeoutInSeconds"`
}

// Tag A key-value pair for tagging Lex resources
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Value string `json:"Value"`
}

// TestBotAliasSettings Configuring the test bot alias settings for a given bot
type TestBotAliasSettings struct {
  BotAliasLocaleSettings []*BotAliasLocaleSettingsItem `json:"BotAliasLocaleSettings,omitempty"`
  ConversationLogSettings *ConversationLogSettings `json:"ConversationLogSettings,omitempty"`
  Description string `json:"Description,omitempty"`

  // Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
  SentimentAnalysisSettings *SentimentAnalysisSettings `json:"SentimentAnalysisSettings,omitempty"`
}

// TextInputSpecification Specifies the text input specifications.
type TextInputSpecification struct {

  // Time for which a bot waits before re-prompting a customer for text input.
  StartTimeoutMs int `json:"StartTimeoutMs"`
}

// TextLogDestination Defines the Amazon CloudWatch Logs destination log group for conversation text logs.
type TextLogDestination struct {
  CloudWatch *CloudWatchLogGroupLogDestination `json:"CloudWatch"`
}

// TextLogSetting Contains information about code hooks that Amazon Lex calls during a conversation.
type TextLogSetting struct {
  Destination *TextLogDestination `json:"Destination"`
  Enabled bool `json:"Enabled"`
}

// VoiceSettings Settings for using an Amazon Polly voice to communicate with a user.
type VoiceSettings struct {

  // Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. For more information, see the engine parameter of the SynthesizeSpeech operation in the Amazon Polly developer guide.
  Engine string `json:"Engine,omitempty"`

  // The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user.
  VoiceId string `json:"VoiceId"`
}

// WaitAndContinueSpecification The prompts that Amazon Lex uses while a bot is waiting for customer input.
type WaitAndContinueSpecification struct {

  // The response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
  ContinueResponse *ResponseSpecification `json:"ContinueResponse"`

  // Specifies whether the bot will wait for a user to respond.
  IsActive bool `json:"IsActive,omitempty"`

  // The response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
  StillWaitingResponse *StillWaitingResponseSpecification `json:"StillWaitingResponse,omitempty"`

  // The response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
  WaitingResponse *ResponseSpecification `json:"WaitingResponse"`
}

func (strct *AdvancedRecognitionSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AudioRecognitionStrategy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AudioRecognitionStrategy\": ")
	if tmp, err := json.Marshal(strct.AudioRecognitionStrategy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AdvancedRecognitionSetting) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AudioRecognitionStrategy":
            if err := json.Unmarshal([]byte(v), &strct.AudioRecognitionStrategy); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *AllowedInputTypes) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AllowAudioInput" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AllowAudioInput" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowAudioInput\": ")
	if tmp, err := json.Marshal(strct.AllowAudioInput); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "AllowDTMFInput" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AllowDTMFInput" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowDTMFInput\": ")
	if tmp, err := json.Marshal(strct.AllowDTMFInput); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AllowedInputTypes) UnmarshalJSON(b []byte) error {
    AllowAudioInputReceived := false
    AllowDTMFInputReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllowAudioInput":
            if err := json.Unmarshal([]byte(v), &strct.AllowAudioInput); err != nil {
                return err
             }
            AllowAudioInputReceived = true
        case "AllowDTMFInput":
            if err := json.Unmarshal([]byte(v), &strct.AllowDTMFInput); err != nil {
                return err
             }
            AllowDTMFInputReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AllowAudioInput (a required property) was received
    if !AllowAudioInputReceived {
        return errors.New("\"AllowAudioInput\" is required but was not present")
    }
    // check if AllowDTMFInput (a required property) was received
    if !AllowDTMFInputReceived {
        return errors.New("\"AllowDTMFInput\" is required but was not present")
    }
    return nil
}

func (strct *AudioAndDTMFInputSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AudioSpecification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AudioSpecification\": ")
	if tmp, err := json.Marshal(strct.AudioSpecification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DTMFSpecification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DTMFSpecification\": ")
	if tmp, err := json.Marshal(strct.DTMFSpecification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "StartTimeoutMs" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "StartTimeoutMs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StartTimeoutMs\": ")
	if tmp, err := json.Marshal(strct.StartTimeoutMs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AudioAndDTMFInputSpecification) UnmarshalJSON(b []byte) error {
    StartTimeoutMsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AudioSpecification":
            if err := json.Unmarshal([]byte(v), &strct.AudioSpecification); err != nil {
                return err
             }
        case "DTMFSpecification":
            if err := json.Unmarshal([]byte(v), &strct.DTMFSpecification); err != nil {
                return err
             }
        case "StartTimeoutMs":
            if err := json.Unmarshal([]byte(v), &strct.StartTimeoutMs); err != nil {
                return err
             }
            StartTimeoutMsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if StartTimeoutMs (a required property) was received
    if !StartTimeoutMsReceived {
        return errors.New("\"StartTimeoutMs\" is required but was not present")
    }
    return nil
}

func (strct *AudioLogDestination) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "S3Bucket" field is required
    if strct.S3Bucket == nil {
        return nil, errors.New("S3Bucket is a required field")
    }
    // Marshal the "S3Bucket" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3Bucket\": ")
	if tmp, err := json.Marshal(strct.S3Bucket); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AudioLogDestination) UnmarshalJSON(b []byte) error {
    S3BucketReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "S3Bucket":
            if err := json.Unmarshal([]byte(v), &strct.S3Bucket); err != nil {
                return err
             }
            S3BucketReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if S3Bucket (a required property) was received
    if !S3BucketReceived {
        return errors.New("\"S3Bucket\" is required but was not present")
    }
    return nil
}

func (strct *AudioLogSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Destination" field is required
    if strct.Destination == nil {
        return nil, errors.New("Destination is a required field")
    }
    // Marshal the "Destination" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Destination\": ")
	if tmp, err := json.Marshal(strct.Destination); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Enabled" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Enabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enabled\": ")
	if tmp, err := json.Marshal(strct.Enabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AudioLogSetting) UnmarshalJSON(b []byte) error {
    DestinationReceived := false
    EnabledReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Destination":
            if err := json.Unmarshal([]byte(v), &strct.Destination); err != nil {
                return err
             }
            DestinationReceived = true
        case "Enabled":
            if err := json.Unmarshal([]byte(v), &strct.Enabled); err != nil {
                return err
             }
            EnabledReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Destination (a required property) was received
    if !DestinationReceived {
        return errors.New("\"Destination\" is required but was not present")
    }
    // check if Enabled (a required property) was received
    if !EnabledReceived {
        return errors.New("\"Enabled\" is required but was not present")
    }
    return nil
}

func (strct *AudioSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "EndTimeoutMs" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "EndTimeoutMs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EndTimeoutMs\": ")
	if tmp, err := json.Marshal(strct.EndTimeoutMs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MaxLengthMs" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MaxLengthMs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxLengthMs\": ")
	if tmp, err := json.Marshal(strct.MaxLengthMs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AudioSpecification) UnmarshalJSON(b []byte) error {
    EndTimeoutMsReceived := false
    MaxLengthMsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "EndTimeoutMs":
            if err := json.Unmarshal([]byte(v), &strct.EndTimeoutMs); err != nil {
                return err
             }
            EndTimeoutMsReceived = true
        case "MaxLengthMs":
            if err := json.Unmarshal([]byte(v), &strct.MaxLengthMs); err != nil {
                return err
             }
            MaxLengthMsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if EndTimeoutMs (a required property) was received
    if !EndTimeoutMsReceived {
        return errors.New("\"EndTimeoutMs\" is required but was not present")
    }
    // check if MaxLengthMs (a required property) was received
    if !MaxLengthMsReceived {
        return errors.New("\"MaxLengthMs\" is required but was not present")
    }
    return nil
}

func (strct *BotAliasLocaleSettings) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CodeHookSpecification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CodeHookSpecification\": ")
	if tmp, err := json.Marshal(strct.CodeHookSpecification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Enabled" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Enabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enabled\": ")
	if tmp, err := json.Marshal(strct.Enabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *BotAliasLocaleSettings) UnmarshalJSON(b []byte) error {
    EnabledReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CodeHookSpecification":
            if err := json.Unmarshal([]byte(v), &strct.CodeHookSpecification); err != nil {
                return err
             }
        case "Enabled":
            if err := json.Unmarshal([]byte(v), &strct.Enabled); err != nil {
                return err
             }
            EnabledReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Enabled (a required property) was received
    if !EnabledReceived {
        return errors.New("\"Enabled\" is required but was not present")
    }
    return nil
}

func (strct *BotAliasLocaleSettingsItem) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "BotAliasLocaleSetting" field is required
    if strct.BotAliasLocaleSetting == nil {
        return nil, errors.New("BotAliasLocaleSetting is a required field")
    }
    // Marshal the "BotAliasLocaleSetting" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BotAliasLocaleSetting\": ")
	if tmp, err := json.Marshal(strct.BotAliasLocaleSetting); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "LocaleId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LocaleId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocaleId\": ")
	if tmp, err := json.Marshal(strct.LocaleId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *BotAliasLocaleSettingsItem) UnmarshalJSON(b []byte) error {
    BotAliasLocaleSettingReceived := false
    LocaleIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "BotAliasLocaleSetting":
            if err := json.Unmarshal([]byte(v), &strct.BotAliasLocaleSetting); err != nil {
                return err
             }
            BotAliasLocaleSettingReceived = true
        case "LocaleId":
            if err := json.Unmarshal([]byte(v), &strct.LocaleId); err != nil {
                return err
             }
            LocaleIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if BotAliasLocaleSetting (a required property) was received
    if !BotAliasLocaleSettingReceived {
        return errors.New("\"BotAliasLocaleSetting\" is required but was not present")
    }
    // check if LocaleId (a required property) was received
    if !LocaleIdReceived {
        return errors.New("\"LocaleId\" is required but was not present")
    }
    return nil
}

func (strct *BotLocale) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CustomVocabulary" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CustomVocabulary\": ")
	if tmp, err := json.Marshal(strct.CustomVocabulary); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Intents" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Intents\": ")
	if tmp, err := json.Marshal(strct.Intents); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "LocaleId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LocaleId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocaleId\": ")
	if tmp, err := json.Marshal(strct.LocaleId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "NluConfidenceThreshold" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "NluConfidenceThreshold" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NluConfidenceThreshold\": ")
	if tmp, err := json.Marshal(strct.NluConfidenceThreshold); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SlotTypes" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SlotTypes\": ")
	if tmp, err := json.Marshal(strct.SlotTypes); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VoiceSettings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VoiceSettings\": ")
	if tmp, err := json.Marshal(strct.VoiceSettings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *BotLocale) UnmarshalJSON(b []byte) error {
    LocaleIdReceived := false
    NluConfidenceThresholdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CustomVocabulary":
            if err := json.Unmarshal([]byte(v), &strct.CustomVocabulary); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Intents":
            if err := json.Unmarshal([]byte(v), &strct.Intents); err != nil {
                return err
             }
        case "LocaleId":
            if err := json.Unmarshal([]byte(v), &strct.LocaleId); err != nil {
                return err
             }
            LocaleIdReceived = true
        case "NluConfidenceThreshold":
            if err := json.Unmarshal([]byte(v), &strct.NluConfidenceThreshold); err != nil {
                return err
             }
            NluConfidenceThresholdReceived = true
        case "SlotTypes":
            if err := json.Unmarshal([]byte(v), &strct.SlotTypes); err != nil {
                return err
             }
        case "VoiceSettings":
            if err := json.Unmarshal([]byte(v), &strct.VoiceSettings); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if LocaleId (a required property) was received
    if !LocaleIdReceived {
        return errors.New("\"LocaleId\" is required but was not present")
    }
    // check if NluConfidenceThreshold (a required property) was received
    if !NluConfidenceThresholdReceived {
        return errors.New("\"NluConfidenceThreshold\" is required but was not present")
    }
    return nil
}

func (strct *Button) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Text" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Button) UnmarshalJSON(b []byte) error {
    TextReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
            TextReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Text (a required property) was received
    if !TextReceived {
        return errors.New("\"Text\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *CloudWatchLogGroupLogDestination) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "CloudWatchLogGroupArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CloudWatchLogGroupArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CloudWatchLogGroupArn\": ")
	if tmp, err := json.Marshal(strct.CloudWatchLogGroupArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "LogPrefix" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LogPrefix" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LogPrefix\": ")
	if tmp, err := json.Marshal(strct.LogPrefix); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CloudWatchLogGroupLogDestination) UnmarshalJSON(b []byte) error {
    CloudWatchLogGroupArnReceived := false
    LogPrefixReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CloudWatchLogGroupArn":
            if err := json.Unmarshal([]byte(v), &strct.CloudWatchLogGroupArn); err != nil {
                return err
             }
            CloudWatchLogGroupArnReceived = true
        case "LogPrefix":
            if err := json.Unmarshal([]byte(v), &strct.LogPrefix); err != nil {
                return err
             }
            LogPrefixReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CloudWatchLogGroupArn (a required property) was received
    if !CloudWatchLogGroupArnReceived {
        return errors.New("\"CloudWatchLogGroupArn\" is required but was not present")
    }
    // check if LogPrefix (a required property) was received
    if !LogPrefixReceived {
        return errors.New("\"LogPrefix\" is required but was not present")
    }
    return nil
}

func (strct *CodeHookSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "LambdaCodeHook" field is required
    if strct.LambdaCodeHook == nil {
        return nil, errors.New("LambdaCodeHook is a required field")
    }
    // Marshal the "LambdaCodeHook" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LambdaCodeHook\": ")
	if tmp, err := json.Marshal(strct.LambdaCodeHook); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CodeHookSpecification) UnmarshalJSON(b []byte) error {
    LambdaCodeHookReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "LambdaCodeHook":
            if err := json.Unmarshal([]byte(v), &strct.LambdaCodeHook); err != nil {
                return err
             }
            LambdaCodeHookReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if LambdaCodeHook (a required property) was received
    if !LambdaCodeHookReceived {
        return errors.New("\"LambdaCodeHook\" is required but was not present")
    }
    return nil
}

func (strct *Condition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ExpressionString" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ExpressionString" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ExpressionString\": ")
	if tmp, err := json.Marshal(strct.ExpressionString); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Condition) UnmarshalJSON(b []byte) error {
    ExpressionStringReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ExpressionString":
            if err := json.Unmarshal([]byte(v), &strct.ExpressionString); err != nil {
                return err
             }
            ExpressionStringReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ExpressionString (a required property) was received
    if !ExpressionStringReceived {
        return errors.New("\"ExpressionString\" is required but was not present")
    }
    return nil
}

func (strct *Conditional) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ConditionalBranches" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ConditionalBranches" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConditionalBranches\": ")
	if tmp, err := json.Marshal(strct.ConditionalBranches); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IsActive" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IsActive" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsActive\": ")
	if tmp, err := json.Marshal(strct.IsActive); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Conditional) UnmarshalJSON(b []byte) error {
    ConditionalBranchesReceived := false
    IsActiveReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ConditionalBranches":
            if err := json.Unmarshal([]byte(v), &strct.ConditionalBranches); err != nil {
                return err
             }
            ConditionalBranchesReceived = true
        case "IsActive":
            if err := json.Unmarshal([]byte(v), &strct.IsActive); err != nil {
                return err
             }
            IsActiveReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ConditionalBranches (a required property) was received
    if !ConditionalBranchesReceived {
        return errors.New("\"ConditionalBranches\" is required but was not present")
    }
    // check if IsActive (a required property) was received
    if !IsActiveReceived {
        return errors.New("\"IsActive\" is required but was not present")
    }
    return nil
}

func (strct *ConditionalBranch) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Condition" field is required
    if strct.Condition == nil {
        return nil, errors.New("Condition is a required field")
    }
    // Marshal the "Condition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Condition\": ")
	if tmp, err := json.Marshal(strct.Condition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "NextStep" field is required
    if strct.NextStep == nil {
        return nil, errors.New("NextStep is a required field")
    }
    // Marshal the "NextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NextStep\": ")
	if tmp, err := json.Marshal(strct.NextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Response" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Response\": ")
	if tmp, err := json.Marshal(strct.Response); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ConditionalBranch) UnmarshalJSON(b []byte) error {
    ConditionReceived := false
    NameReceived := false
    NextStepReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Condition":
            if err := json.Unmarshal([]byte(v), &strct.Condition); err != nil {
                return err
             }
            ConditionReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "NextStep":
            if err := json.Unmarshal([]byte(v), &strct.NextStep); err != nil {
                return err
             }
            NextStepReceived = true
        case "Response":
            if err := json.Unmarshal([]byte(v), &strct.Response); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Condition (a required property) was received
    if !ConditionReceived {
        return errors.New("\"Condition\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if NextStep (a required property) was received
    if !NextStepReceived {
        return errors.New("\"NextStep\" is required but was not present")
    }
    return nil
}

func (strct *ConditionalSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ConditionalBranches" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ConditionalBranches" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConditionalBranches\": ")
	if tmp, err := json.Marshal(strct.ConditionalBranches); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DefaultBranch" field is required
    if strct.DefaultBranch == nil {
        return nil, errors.New("DefaultBranch is a required field")
    }
    // Marshal the "DefaultBranch" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultBranch\": ")
	if tmp, err := json.Marshal(strct.DefaultBranch); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IsActive" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IsActive" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsActive\": ")
	if tmp, err := json.Marshal(strct.IsActive); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ConditionalSpecification) UnmarshalJSON(b []byte) error {
    ConditionalBranchesReceived := false
    DefaultBranchReceived := false
    IsActiveReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ConditionalBranches":
            if err := json.Unmarshal([]byte(v), &strct.ConditionalBranches); err != nil {
                return err
             }
            ConditionalBranchesReceived = true
        case "DefaultBranch":
            if err := json.Unmarshal([]byte(v), &strct.DefaultBranch); err != nil {
                return err
             }
            DefaultBranchReceived = true
        case "IsActive":
            if err := json.Unmarshal([]byte(v), &strct.IsActive); err != nil {
                return err
             }
            IsActiveReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ConditionalBranches (a required property) was received
    if !ConditionalBranchesReceived {
        return errors.New("\"ConditionalBranches\" is required but was not present")
    }
    // check if DefaultBranch (a required property) was received
    if !DefaultBranchReceived {
        return errors.New("\"DefaultBranch\" is required but was not present")
    }
    // check if IsActive (a required property) was received
    if !IsActiveReceived {
        return errors.New("\"IsActive\" is required but was not present")
    }
    return nil
}

func (strct *ConversationLogSettings) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AudioLogSettings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AudioLogSettings\": ")
	if tmp, err := json.Marshal(strct.AudioLogSettings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TextLogSettings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TextLogSettings\": ")
	if tmp, err := json.Marshal(strct.TextLogSettings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ConversationLogSettings) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AudioLogSettings":
            if err := json.Unmarshal([]byte(v), &strct.AudioLogSettings); err != nil {
                return err
             }
        case "TextLogSettings":
            if err := json.Unmarshal([]byte(v), &strct.TextLogSettings); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *CustomPayload) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CustomPayload) UnmarshalJSON(b []byte) error {
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *CustomVocabulary) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "CustomVocabularyItems" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CustomVocabularyItems" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CustomVocabularyItems\": ")
	if tmp, err := json.Marshal(strct.CustomVocabularyItems); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CustomVocabulary) UnmarshalJSON(b []byte) error {
    CustomVocabularyItemsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CustomVocabularyItems":
            if err := json.Unmarshal([]byte(v), &strct.CustomVocabularyItems); err != nil {
                return err
             }
            CustomVocabularyItemsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CustomVocabularyItems (a required property) was received
    if !CustomVocabularyItemsReceived {
        return errors.New("\"CustomVocabularyItems\" is required but was not present")
    }
    return nil
}

func (strct *CustomVocabularyItem) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Phrase" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Phrase" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Phrase\": ")
	if tmp, err := json.Marshal(strct.Phrase); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Weight" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Weight\": ")
	if tmp, err := json.Marshal(strct.Weight); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CustomVocabularyItem) UnmarshalJSON(b []byte) error {
    PhraseReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Phrase":
            if err := json.Unmarshal([]byte(v), &strct.Phrase); err != nil {
                return err
             }
            PhraseReceived = true
        case "Weight":
            if err := json.Unmarshal([]byte(v), &strct.Weight); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Phrase (a required property) was received
    if !PhraseReceived {
        return errors.New("\"Phrase\" is required but was not present")
    }
    return nil
}

func (strct *DTMFSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "DeletionCharacter" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DeletionCharacter" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeletionCharacter\": ")
	if tmp, err := json.Marshal(strct.DeletionCharacter); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "EndCharacter" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "EndCharacter" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EndCharacter\": ")
	if tmp, err := json.Marshal(strct.EndCharacter); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "EndTimeoutMs" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "EndTimeoutMs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EndTimeoutMs\": ")
	if tmp, err := json.Marshal(strct.EndTimeoutMs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MaxLength" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MaxLength" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxLength\": ")
	if tmp, err := json.Marshal(strct.MaxLength); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DTMFSpecification) UnmarshalJSON(b []byte) error {
    DeletionCharacterReceived := false
    EndCharacterReceived := false
    EndTimeoutMsReceived := false
    MaxLengthReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DeletionCharacter":
            if err := json.Unmarshal([]byte(v), &strct.DeletionCharacter); err != nil {
                return err
             }
            DeletionCharacterReceived = true
        case "EndCharacter":
            if err := json.Unmarshal([]byte(v), &strct.EndCharacter); err != nil {
                return err
             }
            EndCharacterReceived = true
        case "EndTimeoutMs":
            if err := json.Unmarshal([]byte(v), &strct.EndTimeoutMs); err != nil {
                return err
             }
            EndTimeoutMsReceived = true
        case "MaxLength":
            if err := json.Unmarshal([]byte(v), &strct.MaxLength); err != nil {
                return err
             }
            MaxLengthReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DeletionCharacter (a required property) was received
    if !DeletionCharacterReceived {
        return errors.New("\"DeletionCharacter\" is required but was not present")
    }
    // check if EndCharacter (a required property) was received
    if !EndCharacterReceived {
        return errors.New("\"EndCharacter\" is required but was not present")
    }
    // check if EndTimeoutMs (a required property) was received
    if !EndTimeoutMsReceived {
        return errors.New("\"EndTimeoutMs\" is required but was not present")
    }
    // check if MaxLength (a required property) was received
    if !MaxLengthReceived {
        return errors.New("\"MaxLength\" is required but was not present")
    }
    return nil
}

func (strct *DataPrivacy) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ChildDirected" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ChildDirected" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ChildDirected\": ")
	if tmp, err := json.Marshal(strct.ChildDirected); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DataPrivacy) UnmarshalJSON(b []byte) error {
    ChildDirectedReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ChildDirected":
            if err := json.Unmarshal([]byte(v), &strct.ChildDirected); err != nil {
                return err
             }
            ChildDirectedReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ChildDirected (a required property) was received
    if !ChildDirectedReceived {
        return errors.New("\"ChildDirected\" is required but was not present")
    }
    return nil
}

func (strct *DefaultConditionalBranch) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "NextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NextStep\": ")
	if tmp, err := json.Marshal(strct.NextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Response" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Response\": ")
	if tmp, err := json.Marshal(strct.Response); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DefaultConditionalBranch) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "NextStep":
            if err := json.Unmarshal([]byte(v), &strct.NextStep); err != nil {
                return err
             }
        case "Response":
            if err := json.Unmarshal([]byte(v), &strct.Response); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *DialogAction) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "SlotToElicit" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SlotToElicit\": ")
	if tmp, err := json.Marshal(strct.SlotToElicit); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SuppressNextMessage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SuppressNextMessage\": ")
	if tmp, err := json.Marshal(strct.SuppressNextMessage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DialogAction) UnmarshalJSON(b []byte) error {
    TypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "SlotToElicit":
            if err := json.Unmarshal([]byte(v), &strct.SlotToElicit); err != nil {
                return err
             }
        case "SuppressNextMessage":
            if err := json.Unmarshal([]byte(v), &strct.SuppressNextMessage); err != nil {
                return err
             }
        case "Type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            TypeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Type (a required property) was received
    if !TypeReceived {
        return errors.New("\"Type\" is required but was not present")
    }
    return nil
}

func (strct *DialogCodeHookInvocationSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "EnableCodeHookInvocation" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "EnableCodeHookInvocation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnableCodeHookInvocation\": ")
	if tmp, err := json.Marshal(strct.EnableCodeHookInvocation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InvocationLabel" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InvocationLabel\": ")
	if tmp, err := json.Marshal(strct.InvocationLabel); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IsActive" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IsActive" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsActive\": ")
	if tmp, err := json.Marshal(strct.IsActive); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PostCodeHookSpecification" field is required
    if strct.PostCodeHookSpecification == nil {
        return nil, errors.New("PostCodeHookSpecification is a required field")
    }
    // Marshal the "PostCodeHookSpecification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PostCodeHookSpecification\": ")
	if tmp, err := json.Marshal(strct.PostCodeHookSpecification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DialogCodeHookInvocationSetting) UnmarshalJSON(b []byte) error {
    EnableCodeHookInvocationReceived := false
    IsActiveReceived := false
    PostCodeHookSpecificationReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "EnableCodeHookInvocation":
            if err := json.Unmarshal([]byte(v), &strct.EnableCodeHookInvocation); err != nil {
                return err
             }
            EnableCodeHookInvocationReceived = true
        case "InvocationLabel":
            if err := json.Unmarshal([]byte(v), &strct.InvocationLabel); err != nil {
                return err
             }
        case "IsActive":
            if err := json.Unmarshal([]byte(v), &strct.IsActive); err != nil {
                return err
             }
            IsActiveReceived = true
        case "PostCodeHookSpecification":
            if err := json.Unmarshal([]byte(v), &strct.PostCodeHookSpecification); err != nil {
                return err
             }
            PostCodeHookSpecificationReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if EnableCodeHookInvocation (a required property) was received
    if !EnableCodeHookInvocationReceived {
        return errors.New("\"EnableCodeHookInvocation\" is required but was not present")
    }
    // check if IsActive (a required property) was received
    if !IsActiveReceived {
        return errors.New("\"IsActive\" is required but was not present")
    }
    // check if PostCodeHookSpecification (a required property) was received
    if !PostCodeHookSpecificationReceived {
        return errors.New("\"PostCodeHookSpecification\" is required but was not present")
    }
    return nil
}

func (strct *DialogCodeHookSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Enabled" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Enabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enabled\": ")
	if tmp, err := json.Marshal(strct.Enabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DialogCodeHookSetting) UnmarshalJSON(b []byte) error {
    EnabledReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Enabled":
            if err := json.Unmarshal([]byte(v), &strct.Enabled); err != nil {
                return err
             }
            EnabledReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Enabled (a required property) was received
    if !EnabledReceived {
        return errors.New("\"Enabled\" is required but was not present")
    }
    return nil
}

func (strct *DialogState) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DialogAction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DialogAction\": ")
	if tmp, err := json.Marshal(strct.DialogAction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Intent" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Intent\": ")
	if tmp, err := json.Marshal(strct.Intent); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SessionAttributes" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SessionAttributes\": ")
	if tmp, err := json.Marshal(strct.SessionAttributes); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DialogState) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DialogAction":
            if err := json.Unmarshal([]byte(v), &strct.DialogAction); err != nil {
                return err
             }
        case "Intent":
            if err := json.Unmarshal([]byte(v), &strct.Intent); err != nil {
                return err
             }
        case "SessionAttributes":
            if err := json.Unmarshal([]byte(v), &strct.SessionAttributes); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ElicitationCodeHookInvocationSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "EnableCodeHookInvocation" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "EnableCodeHookInvocation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnableCodeHookInvocation\": ")
	if tmp, err := json.Marshal(strct.EnableCodeHookInvocation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InvocationLabel" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InvocationLabel\": ")
	if tmp, err := json.Marshal(strct.InvocationLabel); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ElicitationCodeHookInvocationSetting) UnmarshalJSON(b []byte) error {
    EnableCodeHookInvocationReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "EnableCodeHookInvocation":
            if err := json.Unmarshal([]byte(v), &strct.EnableCodeHookInvocation); err != nil {
                return err
             }
            EnableCodeHookInvocationReceived = true
        case "InvocationLabel":
            if err := json.Unmarshal([]byte(v), &strct.InvocationLabel); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if EnableCodeHookInvocation (a required property) was received
    if !EnableCodeHookInvocationReceived {
        return errors.New("\"EnableCodeHookInvocation\" is required but was not present")
    }
    return nil
}

func (strct *ExternalSourceSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "GrammarSlotTypeSetting" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"GrammarSlotTypeSetting\": ")
	if tmp, err := json.Marshal(strct.GrammarSlotTypeSetting); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ExternalSourceSetting) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "GrammarSlotTypeSetting":
            if err := json.Unmarshal([]byte(v), &strct.GrammarSlotTypeSetting); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *FulfillmentCodeHookSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Enabled" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Enabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enabled\": ")
	if tmp, err := json.Marshal(strct.Enabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FulfillmentUpdatesSpecification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FulfillmentUpdatesSpecification\": ")
	if tmp, err := json.Marshal(strct.FulfillmentUpdatesSpecification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IsActive" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsActive\": ")
	if tmp, err := json.Marshal(strct.IsActive); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PostFulfillmentStatusSpecification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PostFulfillmentStatusSpecification\": ")
	if tmp, err := json.Marshal(strct.PostFulfillmentStatusSpecification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *FulfillmentCodeHookSetting) UnmarshalJSON(b []byte) error {
    EnabledReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Enabled":
            if err := json.Unmarshal([]byte(v), &strct.Enabled); err != nil {
                return err
             }
            EnabledReceived = true
        case "FulfillmentUpdatesSpecification":
            if err := json.Unmarshal([]byte(v), &strct.FulfillmentUpdatesSpecification); err != nil {
                return err
             }
        case "IsActive":
            if err := json.Unmarshal([]byte(v), &strct.IsActive); err != nil {
                return err
             }
        case "PostFulfillmentStatusSpecification":
            if err := json.Unmarshal([]byte(v), &strct.PostFulfillmentStatusSpecification); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Enabled (a required property) was received
    if !EnabledReceived {
        return errors.New("\"Enabled\" is required but was not present")
    }
    return nil
}

func (strct *FulfillmentStartResponseSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllowInterrupt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowInterrupt\": ")
	if tmp, err := json.Marshal(strct.AllowInterrupt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DelayInSeconds" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DelayInSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DelayInSeconds\": ")
	if tmp, err := json.Marshal(strct.DelayInSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MessageGroups" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MessageGroups" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MessageGroups\": ")
	if tmp, err := json.Marshal(strct.MessageGroups); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *FulfillmentStartResponseSpecification) UnmarshalJSON(b []byte) error {
    DelayInSecondsReceived := false
    MessageGroupsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllowInterrupt":
            if err := json.Unmarshal([]byte(v), &strct.AllowInterrupt); err != nil {
                return err
             }
        case "DelayInSeconds":
            if err := json.Unmarshal([]byte(v), &strct.DelayInSeconds); err != nil {
                return err
             }
            DelayInSecondsReceived = true
        case "MessageGroups":
            if err := json.Unmarshal([]byte(v), &strct.MessageGroups); err != nil {
                return err
             }
            MessageGroupsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DelayInSeconds (a required property) was received
    if !DelayInSecondsReceived {
        return errors.New("\"DelayInSeconds\" is required but was not present")
    }
    // check if MessageGroups (a required property) was received
    if !MessageGroupsReceived {
        return errors.New("\"MessageGroups\" is required but was not present")
    }
    return nil
}

func (strct *FulfillmentUpdateResponseSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllowInterrupt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowInterrupt\": ")
	if tmp, err := json.Marshal(strct.AllowInterrupt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "FrequencyInSeconds" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "FrequencyInSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FrequencyInSeconds\": ")
	if tmp, err := json.Marshal(strct.FrequencyInSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MessageGroups" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MessageGroups" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MessageGroups\": ")
	if tmp, err := json.Marshal(strct.MessageGroups); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *FulfillmentUpdateResponseSpecification) UnmarshalJSON(b []byte) error {
    FrequencyInSecondsReceived := false
    MessageGroupsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllowInterrupt":
            if err := json.Unmarshal([]byte(v), &strct.AllowInterrupt); err != nil {
                return err
             }
        case "FrequencyInSeconds":
            if err := json.Unmarshal([]byte(v), &strct.FrequencyInSeconds); err != nil {
                return err
             }
            FrequencyInSecondsReceived = true
        case "MessageGroups":
            if err := json.Unmarshal([]byte(v), &strct.MessageGroups); err != nil {
                return err
             }
            MessageGroupsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if FrequencyInSeconds (a required property) was received
    if !FrequencyInSecondsReceived {
        return errors.New("\"FrequencyInSeconds\" is required but was not present")
    }
    // check if MessageGroups (a required property) was received
    if !MessageGroupsReceived {
        return errors.New("\"MessageGroups\" is required but was not present")
    }
    return nil
}

func (strct *FulfillmentUpdatesSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Active" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Active" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Active\": ")
	if tmp, err := json.Marshal(strct.Active); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StartResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StartResponse\": ")
	if tmp, err := json.Marshal(strct.StartResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TimeoutInSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeoutInSeconds\": ")
	if tmp, err := json.Marshal(strct.TimeoutInSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UpdateResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UpdateResponse\": ")
	if tmp, err := json.Marshal(strct.UpdateResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *FulfillmentUpdatesSpecification) UnmarshalJSON(b []byte) error {
    ActiveReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Active":
            if err := json.Unmarshal([]byte(v), &strct.Active); err != nil {
                return err
             }
            ActiveReceived = true
        case "StartResponse":
            if err := json.Unmarshal([]byte(v), &strct.StartResponse); err != nil {
                return err
             }
        case "TimeoutInSeconds":
            if err := json.Unmarshal([]byte(v), &strct.TimeoutInSeconds); err != nil {
                return err
             }
        case "UpdateResponse":
            if err := json.Unmarshal([]byte(v), &strct.UpdateResponse); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Active (a required property) was received
    if !ActiveReceived {
        return errors.New("\"Active\" is required but was not present")
    }
    return nil
}

func (strct *GrammarSlotTypeSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Source" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Source\": ")
	if tmp, err := json.Marshal(strct.Source); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *GrammarSlotTypeSetting) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Source":
            if err := json.Unmarshal([]byte(v), &strct.Source); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *GrammarSlotTypeSource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "KmsKeyArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KmsKeyArn\": ")
	if tmp, err := json.Marshal(strct.KmsKeyArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "S3BucketName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "S3BucketName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3BucketName\": ")
	if tmp, err := json.Marshal(strct.S3BucketName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "S3ObjectKey" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "S3ObjectKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3ObjectKey\": ")
	if tmp, err := json.Marshal(strct.S3ObjectKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *GrammarSlotTypeSource) UnmarshalJSON(b []byte) error {
    S3BucketNameReceived := false
    S3ObjectKeyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "KmsKeyArn":
            if err := json.Unmarshal([]byte(v), &strct.KmsKeyArn); err != nil {
                return err
             }
        case "S3BucketName":
            if err := json.Unmarshal([]byte(v), &strct.S3BucketName); err != nil {
                return err
             }
            S3BucketNameReceived = true
        case "S3ObjectKey":
            if err := json.Unmarshal([]byte(v), &strct.S3ObjectKey); err != nil {
                return err
             }
            S3ObjectKeyReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if S3BucketName (a required property) was received
    if !S3BucketNameReceived {
        return errors.New("\"S3BucketName\" is required but was not present")
    }
    // check if S3ObjectKey (a required property) was received
    if !S3ObjectKeyReceived {
        return errors.New("\"S3ObjectKey\" is required but was not present")
    }
    return nil
}

func (strct *ImageResponseCard) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Buttons" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Buttons\": ")
	if tmp, err := json.Marshal(strct.Buttons); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ImageUrl" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ImageUrl\": ")
	if tmp, err := json.Marshal(strct.ImageUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Subtitle" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Subtitle\": ")
	if tmp, err := json.Marshal(strct.Subtitle); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Title" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Title" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Title\": ")
	if tmp, err := json.Marshal(strct.Title); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ImageResponseCard) UnmarshalJSON(b []byte) error {
    TitleReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Buttons":
            if err := json.Unmarshal([]byte(v), &strct.Buttons); err != nil {
                return err
             }
        case "ImageUrl":
            if err := json.Unmarshal([]byte(v), &strct.ImageUrl); err != nil {
                return err
             }
        case "Subtitle":
            if err := json.Unmarshal([]byte(v), &strct.Subtitle); err != nil {
                return err
             }
        case "Title":
            if err := json.Unmarshal([]byte(v), &strct.Title); err != nil {
                return err
             }
            TitleReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Title (a required property) was received
    if !TitleReceived {
        return errors.New("\"Title\" is required but was not present")
    }
    return nil
}

func (strct *InitialResponseSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CodeHook" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CodeHook\": ")
	if tmp, err := json.Marshal(strct.CodeHook); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Conditional" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Conditional\": ")
	if tmp, err := json.Marshal(strct.Conditional); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InitialResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InitialResponse\": ")
	if tmp, err := json.Marshal(strct.InitialResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NextStep\": ")
	if tmp, err := json.Marshal(strct.NextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *InitialResponseSetting) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CodeHook":
            if err := json.Unmarshal([]byte(v), &strct.CodeHook); err != nil {
                return err
             }
        case "Conditional":
            if err := json.Unmarshal([]byte(v), &strct.Conditional); err != nil {
                return err
             }
        case "InitialResponse":
            if err := json.Unmarshal([]byte(v), &strct.InitialResponse); err != nil {
                return err
             }
        case "NextStep":
            if err := json.Unmarshal([]byte(v), &strct.NextStep); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *InputContext) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *InputContext) UnmarshalJSON(b []byte) error {
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}

func (strct *Intent) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DialogCodeHook" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DialogCodeHook\": ")
	if tmp, err := json.Marshal(strct.DialogCodeHook); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FulfillmentCodeHook" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FulfillmentCodeHook\": ")
	if tmp, err := json.Marshal(strct.FulfillmentCodeHook); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InitialResponseSetting" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InitialResponseSetting\": ")
	if tmp, err := json.Marshal(strct.InitialResponseSetting); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InputContexts" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InputContexts\": ")
	if tmp, err := json.Marshal(strct.InputContexts); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IntentClosingSetting" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IntentClosingSetting\": ")
	if tmp, err := json.Marshal(strct.IntentClosingSetting); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IntentConfirmationSetting" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IntentConfirmationSetting\": ")
	if tmp, err := json.Marshal(strct.IntentConfirmationSetting); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "KendraConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KendraConfiguration\": ")
	if tmp, err := json.Marshal(strct.KendraConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OutputContexts" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OutputContexts\": ")
	if tmp, err := json.Marshal(strct.OutputContexts); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ParentIntentSignature" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ParentIntentSignature\": ")
	if tmp, err := json.Marshal(strct.ParentIntentSignature); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SampleUtterances" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SampleUtterances\": ")
	if tmp, err := json.Marshal(strct.SampleUtterances); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SlotPriorities" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SlotPriorities\": ")
	if tmp, err := json.Marshal(strct.SlotPriorities); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Slots" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Slots\": ")
	if tmp, err := json.Marshal(strct.Slots); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Intent) UnmarshalJSON(b []byte) error {
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "DialogCodeHook":
            if err := json.Unmarshal([]byte(v), &strct.DialogCodeHook); err != nil {
                return err
             }
        case "FulfillmentCodeHook":
            if err := json.Unmarshal([]byte(v), &strct.FulfillmentCodeHook); err != nil {
                return err
             }
        case "InitialResponseSetting":
            if err := json.Unmarshal([]byte(v), &strct.InitialResponseSetting); err != nil {
                return err
             }
        case "InputContexts":
            if err := json.Unmarshal([]byte(v), &strct.InputContexts); err != nil {
                return err
             }
        case "IntentClosingSetting":
            if err := json.Unmarshal([]byte(v), &strct.IntentClosingSetting); err != nil {
                return err
             }
        case "IntentConfirmationSetting":
            if err := json.Unmarshal([]byte(v), &strct.IntentConfirmationSetting); err != nil {
                return err
             }
        case "KendraConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.KendraConfiguration); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "OutputContexts":
            if err := json.Unmarshal([]byte(v), &strct.OutputContexts); err != nil {
                return err
             }
        case "ParentIntentSignature":
            if err := json.Unmarshal([]byte(v), &strct.ParentIntentSignature); err != nil {
                return err
             }
        case "SampleUtterances":
            if err := json.Unmarshal([]byte(v), &strct.SampleUtterances); err != nil {
                return err
             }
        case "SlotPriorities":
            if err := json.Unmarshal([]byte(v), &strct.SlotPriorities); err != nil {
                return err
             }
        case "Slots":
            if err := json.Unmarshal([]byte(v), &strct.Slots); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}

func (strct *IntentClosingSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ClosingResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ClosingResponse\": ")
	if tmp, err := json.Marshal(strct.ClosingResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Conditional" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Conditional\": ")
	if tmp, err := json.Marshal(strct.Conditional); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IsActive" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsActive\": ")
	if tmp, err := json.Marshal(strct.IsActive); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NextStep\": ")
	if tmp, err := json.Marshal(strct.NextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *IntentClosingSetting) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ClosingResponse":
            if err := json.Unmarshal([]byte(v), &strct.ClosingResponse); err != nil {
                return err
             }
        case "Conditional":
            if err := json.Unmarshal([]byte(v), &strct.Conditional); err != nil {
                return err
             }
        case "IsActive":
            if err := json.Unmarshal([]byte(v), &strct.IsActive); err != nil {
                return err
             }
        case "NextStep":
            if err := json.Unmarshal([]byte(v), &strct.NextStep); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *IntentConfirmationSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CodeHook" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CodeHook\": ")
	if tmp, err := json.Marshal(strct.CodeHook); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ConfirmationConditional" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConfirmationConditional\": ")
	if tmp, err := json.Marshal(strct.ConfirmationConditional); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ConfirmationNextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConfirmationNextStep\": ")
	if tmp, err := json.Marshal(strct.ConfirmationNextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ConfirmationResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConfirmationResponse\": ")
	if tmp, err := json.Marshal(strct.ConfirmationResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeclinationConditional" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeclinationConditional\": ")
	if tmp, err := json.Marshal(strct.DeclinationConditional); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeclinationNextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeclinationNextStep\": ")
	if tmp, err := json.Marshal(strct.DeclinationNextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeclinationResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeclinationResponse\": ")
	if tmp, err := json.Marshal(strct.DeclinationResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ElicitationCodeHook" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ElicitationCodeHook\": ")
	if tmp, err := json.Marshal(strct.ElicitationCodeHook); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FailureConditional" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FailureConditional\": ")
	if tmp, err := json.Marshal(strct.FailureConditional); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FailureNextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FailureNextStep\": ")
	if tmp, err := json.Marshal(strct.FailureNextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FailureResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FailureResponse\": ")
	if tmp, err := json.Marshal(strct.FailureResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IsActive" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsActive\": ")
	if tmp, err := json.Marshal(strct.IsActive); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PromptSpecification" field is required
    if strct.PromptSpecification == nil {
        return nil, errors.New("PromptSpecification is a required field")
    }
    // Marshal the "PromptSpecification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PromptSpecification\": ")
	if tmp, err := json.Marshal(strct.PromptSpecification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *IntentConfirmationSetting) UnmarshalJSON(b []byte) error {
    PromptSpecificationReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CodeHook":
            if err := json.Unmarshal([]byte(v), &strct.CodeHook); err != nil {
                return err
             }
        case "ConfirmationConditional":
            if err := json.Unmarshal([]byte(v), &strct.ConfirmationConditional); err != nil {
                return err
             }
        case "ConfirmationNextStep":
            if err := json.Unmarshal([]byte(v), &strct.ConfirmationNextStep); err != nil {
                return err
             }
        case "ConfirmationResponse":
            if err := json.Unmarshal([]byte(v), &strct.ConfirmationResponse); err != nil {
                return err
             }
        case "DeclinationConditional":
            if err := json.Unmarshal([]byte(v), &strct.DeclinationConditional); err != nil {
                return err
             }
        case "DeclinationNextStep":
            if err := json.Unmarshal([]byte(v), &strct.DeclinationNextStep); err != nil {
                return err
             }
        case "DeclinationResponse":
            if err := json.Unmarshal([]byte(v), &strct.DeclinationResponse); err != nil {
                return err
             }
        case "ElicitationCodeHook":
            if err := json.Unmarshal([]byte(v), &strct.ElicitationCodeHook); err != nil {
                return err
             }
        case "FailureConditional":
            if err := json.Unmarshal([]byte(v), &strct.FailureConditional); err != nil {
                return err
             }
        case "FailureNextStep":
            if err := json.Unmarshal([]byte(v), &strct.FailureNextStep); err != nil {
                return err
             }
        case "FailureResponse":
            if err := json.Unmarshal([]byte(v), &strct.FailureResponse); err != nil {
                return err
             }
        case "IsActive":
            if err := json.Unmarshal([]byte(v), &strct.IsActive); err != nil {
                return err
             }
        case "PromptSpecification":
            if err := json.Unmarshal([]byte(v), &strct.PromptSpecification); err != nil {
                return err
             }
            PromptSpecificationReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if PromptSpecification (a required property) was received
    if !PromptSpecificationReceived {
        return errors.New("\"PromptSpecification\" is required but was not present")
    }
    return nil
}

func (strct *IntentOverride) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Slots" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Slots\": ")
	if tmp, err := json.Marshal(strct.Slots); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *IntentOverride) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "Slots":
            if err := json.Unmarshal([]byte(v), &strct.Slots); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *KendraConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "KendraIndex" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "KendraIndex" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KendraIndex\": ")
	if tmp, err := json.Marshal(strct.KendraIndex); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "QueryFilterString" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"QueryFilterString\": ")
	if tmp, err := json.Marshal(strct.QueryFilterString); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "QueryFilterStringEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"QueryFilterStringEnabled\": ")
	if tmp, err := json.Marshal(strct.QueryFilterStringEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *KendraConfiguration) UnmarshalJSON(b []byte) error {
    KendraIndexReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "KendraIndex":
            if err := json.Unmarshal([]byte(v), &strct.KendraIndex); err != nil {
                return err
             }
            KendraIndexReceived = true
        case "QueryFilterString":
            if err := json.Unmarshal([]byte(v), &strct.QueryFilterString); err != nil {
                return err
             }
        case "QueryFilterStringEnabled":
            if err := json.Unmarshal([]byte(v), &strct.QueryFilterStringEnabled); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if KendraIndex (a required property) was received
    if !KendraIndexReceived {
        return errors.New("\"KendraIndex\" is required but was not present")
    }
    return nil
}

func (strct *LambdaCodeHook) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "CodeHookInterfaceVersion" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CodeHookInterfaceVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CodeHookInterfaceVersion\": ")
	if tmp, err := json.Marshal(strct.CodeHookInterfaceVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "LambdaArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LambdaArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LambdaArn\": ")
	if tmp, err := json.Marshal(strct.LambdaArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *LambdaCodeHook) UnmarshalJSON(b []byte) error {
    CodeHookInterfaceVersionReceived := false
    LambdaArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CodeHookInterfaceVersion":
            if err := json.Unmarshal([]byte(v), &strct.CodeHookInterfaceVersion); err != nil {
                return err
             }
            CodeHookInterfaceVersionReceived = true
        case "LambdaArn":
            if err := json.Unmarshal([]byte(v), &strct.LambdaArn); err != nil {
                return err
             }
            LambdaArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CodeHookInterfaceVersion (a required property) was received
    if !CodeHookInterfaceVersionReceived {
        return errors.New("\"CodeHookInterfaceVersion\" is required but was not present")
    }
    // check if LambdaArn (a required property) was received
    if !LambdaArnReceived {
        return errors.New("\"LambdaArn\" is required but was not present")
    }
    return nil
}

func (strct *Message) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CustomPayload" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CustomPayload\": ")
	if tmp, err := json.Marshal(strct.CustomPayload); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ImageResponseCard" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ImageResponseCard\": ")
	if tmp, err := json.Marshal(strct.ImageResponseCard); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PlainTextMessage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PlainTextMessage\": ")
	if tmp, err := json.Marshal(strct.PlainTextMessage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SSMLMessage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SSMLMessage\": ")
	if tmp, err := json.Marshal(strct.SSMLMessage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Message) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CustomPayload":
            if err := json.Unmarshal([]byte(v), &strct.CustomPayload); err != nil {
                return err
             }
        case "ImageResponseCard":
            if err := json.Unmarshal([]byte(v), &strct.ImageResponseCard); err != nil {
                return err
             }
        case "PlainTextMessage":
            if err := json.Unmarshal([]byte(v), &strct.PlainTextMessage); err != nil {
                return err
             }
        case "SSMLMessage":
            if err := json.Unmarshal([]byte(v), &strct.SSMLMessage); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *MessageGroup) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Message" field is required
    if strct.Message == nil {
        return nil, errors.New("Message is a required field")
    }
    // Marshal the "Message" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Message\": ")
	if tmp, err := json.Marshal(strct.Message); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Variations" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Variations\": ")
	if tmp, err := json.Marshal(strct.Variations); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MessageGroup) UnmarshalJSON(b []byte) error {
    MessageReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Message":
            if err := json.Unmarshal([]byte(v), &strct.Message); err != nil {
                return err
             }
            MessageReceived = true
        case "Variations":
            if err := json.Unmarshal([]byte(v), &strct.Variations); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Message (a required property) was received
    if !MessageReceived {
        return errors.New("\"Message\" is required but was not present")
    }
    return nil
}

func (strct *MultipleValuesSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllowMultipleValues" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowMultipleValues\": ")
	if tmp, err := json.Marshal(strct.AllowMultipleValues); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MultipleValuesSetting) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllowMultipleValues":
            if err := json.Unmarshal([]byte(v), &strct.AllowMultipleValues); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ObfuscationSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ObfuscationSettingType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ObfuscationSettingType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ObfuscationSettingType\": ")
	if tmp, err := json.Marshal(strct.ObfuscationSettingType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ObfuscationSetting) UnmarshalJSON(b []byte) error {
    ObfuscationSettingTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ObfuscationSettingType":
            if err := json.Unmarshal([]byte(v), &strct.ObfuscationSettingType); err != nil {
                return err
             }
            ObfuscationSettingTypeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ObfuscationSettingType (a required property) was received
    if !ObfuscationSettingTypeReceived {
        return errors.New("\"ObfuscationSettingType\" is required but was not present")
    }
    return nil
}

func (strct *OutputContext) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TimeToLiveInSeconds" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TimeToLiveInSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeToLiveInSeconds\": ")
	if tmp, err := json.Marshal(strct.TimeToLiveInSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TurnsToLive" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TurnsToLive" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TurnsToLive\": ")
	if tmp, err := json.Marshal(strct.TurnsToLive); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OutputContext) UnmarshalJSON(b []byte) error {
    NameReceived := false
    TimeToLiveInSecondsReceived := false
    TurnsToLiveReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "TimeToLiveInSeconds":
            if err := json.Unmarshal([]byte(v), &strct.TimeToLiveInSeconds); err != nil {
                return err
             }
            TimeToLiveInSecondsReceived = true
        case "TurnsToLive":
            if err := json.Unmarshal([]byte(v), &strct.TurnsToLive); err != nil {
                return err
             }
            TurnsToLiveReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if TimeToLiveInSeconds (a required property) was received
    if !TimeToLiveInSecondsReceived {
        return errors.New("\"TimeToLiveInSeconds\" is required but was not present")
    }
    // check if TurnsToLive (a required property) was received
    if !TurnsToLiveReceived {
        return errors.New("\"TurnsToLive\" is required but was not present")
    }
    return nil
}

func (strct *PlainTextMessage) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PlainTextMessage) UnmarshalJSON(b []byte) error {
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *PostDialogCodeHookInvocationSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "FailureConditional" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FailureConditional\": ")
	if tmp, err := json.Marshal(strct.FailureConditional); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FailureNextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FailureNextStep\": ")
	if tmp, err := json.Marshal(strct.FailureNextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FailureResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FailureResponse\": ")
	if tmp, err := json.Marshal(strct.FailureResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SuccessConditional" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SuccessConditional\": ")
	if tmp, err := json.Marshal(strct.SuccessConditional); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SuccessNextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SuccessNextStep\": ")
	if tmp, err := json.Marshal(strct.SuccessNextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SuccessResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SuccessResponse\": ")
	if tmp, err := json.Marshal(strct.SuccessResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TimeoutConditional" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeoutConditional\": ")
	if tmp, err := json.Marshal(strct.TimeoutConditional); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TimeoutNextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeoutNextStep\": ")
	if tmp, err := json.Marshal(strct.TimeoutNextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TimeoutResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeoutResponse\": ")
	if tmp, err := json.Marshal(strct.TimeoutResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PostDialogCodeHookInvocationSpecification) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "FailureConditional":
            if err := json.Unmarshal([]byte(v), &strct.FailureConditional); err != nil {
                return err
             }
        case "FailureNextStep":
            if err := json.Unmarshal([]byte(v), &strct.FailureNextStep); err != nil {
                return err
             }
        case "FailureResponse":
            if err := json.Unmarshal([]byte(v), &strct.FailureResponse); err != nil {
                return err
             }
        case "SuccessConditional":
            if err := json.Unmarshal([]byte(v), &strct.SuccessConditional); err != nil {
                return err
             }
        case "SuccessNextStep":
            if err := json.Unmarshal([]byte(v), &strct.SuccessNextStep); err != nil {
                return err
             }
        case "SuccessResponse":
            if err := json.Unmarshal([]byte(v), &strct.SuccessResponse); err != nil {
                return err
             }
        case "TimeoutConditional":
            if err := json.Unmarshal([]byte(v), &strct.TimeoutConditional); err != nil {
                return err
             }
        case "TimeoutNextStep":
            if err := json.Unmarshal([]byte(v), &strct.TimeoutNextStep); err != nil {
                return err
             }
        case "TimeoutResponse":
            if err := json.Unmarshal([]byte(v), &strct.TimeoutResponse); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *PostFulfillmentStatusSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "FailureConditional" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FailureConditional\": ")
	if tmp, err := json.Marshal(strct.FailureConditional); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FailureNextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FailureNextStep\": ")
	if tmp, err := json.Marshal(strct.FailureNextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FailureResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FailureResponse\": ")
	if tmp, err := json.Marshal(strct.FailureResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SuccessConditional" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SuccessConditional\": ")
	if tmp, err := json.Marshal(strct.SuccessConditional); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SuccessNextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SuccessNextStep\": ")
	if tmp, err := json.Marshal(strct.SuccessNextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SuccessResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SuccessResponse\": ")
	if tmp, err := json.Marshal(strct.SuccessResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TimeoutConditional" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeoutConditional\": ")
	if tmp, err := json.Marshal(strct.TimeoutConditional); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TimeoutNextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeoutNextStep\": ")
	if tmp, err := json.Marshal(strct.TimeoutNextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TimeoutResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeoutResponse\": ")
	if tmp, err := json.Marshal(strct.TimeoutResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PostFulfillmentStatusSpecification) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "FailureConditional":
            if err := json.Unmarshal([]byte(v), &strct.FailureConditional); err != nil {
                return err
             }
        case "FailureNextStep":
            if err := json.Unmarshal([]byte(v), &strct.FailureNextStep); err != nil {
                return err
             }
        case "FailureResponse":
            if err := json.Unmarshal([]byte(v), &strct.FailureResponse); err != nil {
                return err
             }
        case "SuccessConditional":
            if err := json.Unmarshal([]byte(v), &strct.SuccessConditional); err != nil {
                return err
             }
        case "SuccessNextStep":
            if err := json.Unmarshal([]byte(v), &strct.SuccessNextStep); err != nil {
                return err
             }
        case "SuccessResponse":
            if err := json.Unmarshal([]byte(v), &strct.SuccessResponse); err != nil {
                return err
             }
        case "TimeoutConditional":
            if err := json.Unmarshal([]byte(v), &strct.TimeoutConditional); err != nil {
                return err
             }
        case "TimeoutNextStep":
            if err := json.Unmarshal([]byte(v), &strct.TimeoutNextStep); err != nil {
                return err
             }
        case "TimeoutResponse":
            if err := json.Unmarshal([]byte(v), &strct.TimeoutResponse); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *PromptAttemptSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllowInterrupt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowInterrupt\": ")
	if tmp, err := json.Marshal(strct.AllowInterrupt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "AllowedInputTypes" field is required
    if strct.AllowedInputTypes == nil {
        return nil, errors.New("AllowedInputTypes is a required field")
    }
    // Marshal the "AllowedInputTypes" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowedInputTypes\": ")
	if tmp, err := json.Marshal(strct.AllowedInputTypes); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AudioAndDTMFInputSpecification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AudioAndDTMFInputSpecification\": ")
	if tmp, err := json.Marshal(strct.AudioAndDTMFInputSpecification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TextInputSpecification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TextInputSpecification\": ")
	if tmp, err := json.Marshal(strct.TextInputSpecification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PromptAttemptSpecification) UnmarshalJSON(b []byte) error {
    AllowedInputTypesReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllowInterrupt":
            if err := json.Unmarshal([]byte(v), &strct.AllowInterrupt); err != nil {
                return err
             }
        case "AllowedInputTypes":
            if err := json.Unmarshal([]byte(v), &strct.AllowedInputTypes); err != nil {
                return err
             }
            AllowedInputTypesReceived = true
        case "AudioAndDTMFInputSpecification":
            if err := json.Unmarshal([]byte(v), &strct.AudioAndDTMFInputSpecification); err != nil {
                return err
             }
        case "TextInputSpecification":
            if err := json.Unmarshal([]byte(v), &strct.TextInputSpecification); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AllowedInputTypes (a required property) was received
    if !AllowedInputTypesReceived {
        return errors.New("\"AllowedInputTypes\" is required but was not present")
    }
    return nil
}

func (strct *PromptAttemptsSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PromptAttemptsSpecification) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *PromptSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllowInterrupt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowInterrupt\": ")
	if tmp, err := json.Marshal(strct.AllowInterrupt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MaxRetries" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MaxRetries" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxRetries\": ")
	if tmp, err := json.Marshal(strct.MaxRetries); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MessageGroupsList" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MessageGroupsList" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MessageGroupsList\": ")
	if tmp, err := json.Marshal(strct.MessageGroupsList); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MessageSelectionStrategy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MessageSelectionStrategy\": ")
	if tmp, err := json.Marshal(strct.MessageSelectionStrategy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PromptAttemptsSpecification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PromptAttemptsSpecification\": ")
	if tmp, err := json.Marshal(strct.PromptAttemptsSpecification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PromptSpecification) UnmarshalJSON(b []byte) error {
    MaxRetriesReceived := false
    MessageGroupsListReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllowInterrupt":
            if err := json.Unmarshal([]byte(v), &strct.AllowInterrupt); err != nil {
                return err
             }
        case "MaxRetries":
            if err := json.Unmarshal([]byte(v), &strct.MaxRetries); err != nil {
                return err
             }
            MaxRetriesReceived = true
        case "MessageGroupsList":
            if err := json.Unmarshal([]byte(v), &strct.MessageGroupsList); err != nil {
                return err
             }
            MessageGroupsListReceived = true
        case "MessageSelectionStrategy":
            if err := json.Unmarshal([]byte(v), &strct.MessageSelectionStrategy); err != nil {
                return err
             }
        case "PromptAttemptsSpecification":
            if err := json.Unmarshal([]byte(v), &strct.PromptAttemptsSpecification); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if MaxRetries (a required property) was received
    if !MaxRetriesReceived {
        return errors.New("\"MaxRetries\" is required but was not present")
    }
    // check if MessageGroupsList (a required property) was received
    if !MessageGroupsListReceived {
        return errors.New("\"MessageGroupsList\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AutoBuildBotLocales" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AutoBuildBotLocales\": ")
	if tmp, err := json.Marshal(strct.AutoBuildBotLocales); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BotFileS3Location" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BotFileS3Location\": ")
	if tmp, err := json.Marshal(strct.BotFileS3Location); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BotLocales" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BotLocales\": ")
	if tmp, err := json.Marshal(strct.BotLocales); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BotTags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BotTags\": ")
	if tmp, err := json.Marshal(strct.BotTags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DataPrivacy" field is required
    if strct.DataPrivacy == nil {
        return nil, errors.New("DataPrivacy is a required field")
    }
    // Marshal the "DataPrivacy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DataPrivacy\": ")
	if tmp, err := json.Marshal(strct.DataPrivacy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IdleSessionTTLInSeconds" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IdleSessionTTLInSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IdleSessionTTLInSeconds\": ")
	if tmp, err := json.Marshal(strct.IdleSessionTTLInSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TestBotAliasSettings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TestBotAliasSettings\": ")
	if tmp, err := json.Marshal(strct.TestBotAliasSettings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TestBotAliasTags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TestBotAliasTags\": ")
	if tmp, err := json.Marshal(strct.TestBotAliasTags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DataPrivacyReceived := false
    IdleSessionTTLInSecondsReceived := false
    NameReceived := false
    RoleArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "AutoBuildBotLocales":
            if err := json.Unmarshal([]byte(v), &strct.AutoBuildBotLocales); err != nil {
                return err
             }
        case "BotFileS3Location":
            if err := json.Unmarshal([]byte(v), &strct.BotFileS3Location); err != nil {
                return err
             }
        case "BotLocales":
            if err := json.Unmarshal([]byte(v), &strct.BotLocales); err != nil {
                return err
             }
        case "BotTags":
            if err := json.Unmarshal([]byte(v), &strct.BotTags); err != nil {
                return err
             }
        case "DataPrivacy":
            if err := json.Unmarshal([]byte(v), &strct.DataPrivacy); err != nil {
                return err
             }
            DataPrivacyReceived = true
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "IdleSessionTTLInSeconds":
            if err := json.Unmarshal([]byte(v), &strct.IdleSessionTTLInSeconds); err != nil {
                return err
             }
            IdleSessionTTLInSecondsReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
            RoleArnReceived = true
        case "TestBotAliasSettings":
            if err := json.Unmarshal([]byte(v), &strct.TestBotAliasSettings); err != nil {
                return err
             }
        case "TestBotAliasTags":
            if err := json.Unmarshal([]byte(v), &strct.TestBotAliasTags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DataPrivacy (a required property) was received
    if !DataPrivacyReceived {
        return errors.New("\"DataPrivacy\" is required but was not present")
    }
    // check if IdleSessionTTLInSeconds (a required property) was received
    if !IdleSessionTTLInSecondsReceived {
        return errors.New("\"IdleSessionTTLInSeconds\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if RoleArn (a required property) was received
    if !RoleArnReceived {
        return errors.New("\"RoleArn\" is required but was not present")
    }
    return nil
}

func (strct *ResponseSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllowInterrupt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowInterrupt\": ")
	if tmp, err := json.Marshal(strct.AllowInterrupt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MessageGroupsList" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MessageGroupsList" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MessageGroupsList\": ")
	if tmp, err := json.Marshal(strct.MessageGroupsList); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ResponseSpecification) UnmarshalJSON(b []byte) error {
    MessageGroupsListReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllowInterrupt":
            if err := json.Unmarshal([]byte(v), &strct.AllowInterrupt); err != nil {
                return err
             }
        case "MessageGroupsList":
            if err := json.Unmarshal([]byte(v), &strct.MessageGroupsList); err != nil {
                return err
             }
            MessageGroupsListReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if MessageGroupsList (a required property) was received
    if !MessageGroupsListReceived {
        return errors.New("\"MessageGroupsList\" is required but was not present")
    }
    return nil
}

func (strct *S3BucketLogDestination) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "KmsKeyArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KmsKeyArn\": ")
	if tmp, err := json.Marshal(strct.KmsKeyArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "LogPrefix" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LogPrefix" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LogPrefix\": ")
	if tmp, err := json.Marshal(strct.LogPrefix); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "S3BucketArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "S3BucketArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3BucketArn\": ")
	if tmp, err := json.Marshal(strct.S3BucketArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *S3BucketLogDestination) UnmarshalJSON(b []byte) error {
    LogPrefixReceived := false
    S3BucketArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "KmsKeyArn":
            if err := json.Unmarshal([]byte(v), &strct.KmsKeyArn); err != nil {
                return err
             }
        case "LogPrefix":
            if err := json.Unmarshal([]byte(v), &strct.LogPrefix); err != nil {
                return err
             }
            LogPrefixReceived = true
        case "S3BucketArn":
            if err := json.Unmarshal([]byte(v), &strct.S3BucketArn); err != nil {
                return err
             }
            S3BucketArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if LogPrefix (a required property) was received
    if !LogPrefixReceived {
        return errors.New("\"LogPrefix\" is required but was not present")
    }
    // check if S3BucketArn (a required property) was received
    if !S3BucketArnReceived {
        return errors.New("\"S3BucketArn\" is required but was not present")
    }
    return nil
}

func (strct *S3Location) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "S3Bucket" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "S3Bucket" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3Bucket\": ")
	if tmp, err := json.Marshal(strct.S3Bucket); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "S3ObjectKey" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "S3ObjectKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3ObjectKey\": ")
	if tmp, err := json.Marshal(strct.S3ObjectKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "S3ObjectVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3ObjectVersion\": ")
	if tmp, err := json.Marshal(strct.S3ObjectVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *S3Location) UnmarshalJSON(b []byte) error {
    S3BucketReceived := false
    S3ObjectKeyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "S3Bucket":
            if err := json.Unmarshal([]byte(v), &strct.S3Bucket); err != nil {
                return err
             }
            S3BucketReceived = true
        case "S3ObjectKey":
            if err := json.Unmarshal([]byte(v), &strct.S3ObjectKey); err != nil {
                return err
             }
            S3ObjectKeyReceived = true
        case "S3ObjectVersion":
            if err := json.Unmarshal([]byte(v), &strct.S3ObjectVersion); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if S3Bucket (a required property) was received
    if !S3BucketReceived {
        return errors.New("\"S3Bucket\" is required but was not present")
    }
    // check if S3ObjectKey (a required property) was received
    if !S3ObjectKeyReceived {
        return errors.New("\"S3ObjectKey\" is required but was not present")
    }
    return nil
}

func (strct *SSMLMessage) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SSMLMessage) UnmarshalJSON(b []byte) error {
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *SampleUtterance) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Utterance" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Utterance" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Utterance\": ")
	if tmp, err := json.Marshal(strct.Utterance); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SampleUtterance) UnmarshalJSON(b []byte) error {
    UtteranceReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Utterance":
            if err := json.Unmarshal([]byte(v), &strct.Utterance); err != nil {
                return err
             }
            UtteranceReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Utterance (a required property) was received
    if !UtteranceReceived {
        return errors.New("\"Utterance\" is required but was not present")
    }
    return nil
}

func (strct *SampleValue) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SampleValue) UnmarshalJSON(b []byte) error {
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *SentimentAnalysisSettings) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "DetectSentiment" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DetectSentiment" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DetectSentiment\": ")
	if tmp, err := json.Marshal(strct.DetectSentiment); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SentimentAnalysisSettings) UnmarshalJSON(b []byte) error {
    DetectSentimentReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DetectSentiment":
            if err := json.Unmarshal([]byte(v), &strct.DetectSentiment); err != nil {
                return err
             }
            DetectSentimentReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DetectSentiment (a required property) was received
    if !DetectSentimentReceived {
        return errors.New("\"DetectSentiment\" is required but was not present")
    }
    return nil
}

func (strct *SessionAttribute) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SessionAttribute) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    return nil
}

func (strct *Slot) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MultipleValuesSetting" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MultipleValuesSetting\": ")
	if tmp, err := json.Marshal(strct.MultipleValuesSetting); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ObfuscationSetting" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ObfuscationSetting\": ")
	if tmp, err := json.Marshal(strct.ObfuscationSetting); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SlotTypeName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SlotTypeName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SlotTypeName\": ")
	if tmp, err := json.Marshal(strct.SlotTypeName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ValueElicitationSetting" field is required
    if strct.ValueElicitationSetting == nil {
        return nil, errors.New("ValueElicitationSetting is a required field")
    }
    // Marshal the "ValueElicitationSetting" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ValueElicitationSetting\": ")
	if tmp, err := json.Marshal(strct.ValueElicitationSetting); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Slot) UnmarshalJSON(b []byte) error {
    NameReceived := false
    SlotTypeNameReceived := false
    ValueElicitationSettingReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "MultipleValuesSetting":
            if err := json.Unmarshal([]byte(v), &strct.MultipleValuesSetting); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "ObfuscationSetting":
            if err := json.Unmarshal([]byte(v), &strct.ObfuscationSetting); err != nil {
                return err
             }
        case "SlotTypeName":
            if err := json.Unmarshal([]byte(v), &strct.SlotTypeName); err != nil {
                return err
             }
            SlotTypeNameReceived = true
        case "ValueElicitationSetting":
            if err := json.Unmarshal([]byte(v), &strct.ValueElicitationSetting); err != nil {
                return err
             }
            ValueElicitationSettingReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if SlotTypeName (a required property) was received
    if !SlotTypeNameReceived {
        return errors.New("\"SlotTypeName\" is required but was not present")
    }
    // check if ValueElicitationSetting (a required property) was received
    if !ValueElicitationSettingReceived {
        return errors.New("\"ValueElicitationSetting\" is required but was not present")
    }
    return nil
}

func (strct *SlotCaptureSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CaptureConditional" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CaptureConditional\": ")
	if tmp, err := json.Marshal(strct.CaptureConditional); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CaptureNextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CaptureNextStep\": ")
	if tmp, err := json.Marshal(strct.CaptureNextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CaptureResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CaptureResponse\": ")
	if tmp, err := json.Marshal(strct.CaptureResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CodeHook" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CodeHook\": ")
	if tmp, err := json.Marshal(strct.CodeHook); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ElicitationCodeHook" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ElicitationCodeHook\": ")
	if tmp, err := json.Marshal(strct.ElicitationCodeHook); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FailureConditional" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FailureConditional\": ")
	if tmp, err := json.Marshal(strct.FailureConditional); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FailureNextStep" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FailureNextStep\": ")
	if tmp, err := json.Marshal(strct.FailureNextStep); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FailureResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FailureResponse\": ")
	if tmp, err := json.Marshal(strct.FailureResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SlotCaptureSetting) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CaptureConditional":
            if err := json.Unmarshal([]byte(v), &strct.CaptureConditional); err != nil {
                return err
             }
        case "CaptureNextStep":
            if err := json.Unmarshal([]byte(v), &strct.CaptureNextStep); err != nil {
                return err
             }
        case "CaptureResponse":
            if err := json.Unmarshal([]byte(v), &strct.CaptureResponse); err != nil {
                return err
             }
        case "CodeHook":
            if err := json.Unmarshal([]byte(v), &strct.CodeHook); err != nil {
                return err
             }
        case "ElicitationCodeHook":
            if err := json.Unmarshal([]byte(v), &strct.ElicitationCodeHook); err != nil {
                return err
             }
        case "FailureConditional":
            if err := json.Unmarshal([]byte(v), &strct.FailureConditional); err != nil {
                return err
             }
        case "FailureNextStep":
            if err := json.Unmarshal([]byte(v), &strct.FailureNextStep); err != nil {
                return err
             }
        case "FailureResponse":
            if err := json.Unmarshal([]byte(v), &strct.FailureResponse); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *SlotDefaultValue) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "DefaultValue" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DefaultValue" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultValue\": ")
	if tmp, err := json.Marshal(strct.DefaultValue); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SlotDefaultValue) UnmarshalJSON(b []byte) error {
    DefaultValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DefaultValue":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValue); err != nil {
                return err
             }
            DefaultValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DefaultValue (a required property) was received
    if !DefaultValueReceived {
        return errors.New("\"DefaultValue\" is required but was not present")
    }
    return nil
}

func (strct *SlotDefaultValueSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "DefaultValueList" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DefaultValueList" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultValueList\": ")
	if tmp, err := json.Marshal(strct.DefaultValueList); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SlotDefaultValueSpecification) UnmarshalJSON(b []byte) error {
    DefaultValueListReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DefaultValueList":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueList); err != nil {
                return err
             }
            DefaultValueListReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DefaultValueList (a required property) was received
    if !DefaultValueListReceived {
        return errors.New("\"DefaultValueList\" is required but was not present")
    }
    return nil
}

func (strct *SlotPriority) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Priority" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Priority" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Priority\": ")
	if tmp, err := json.Marshal(strct.Priority); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SlotName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SlotName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SlotName\": ")
	if tmp, err := json.Marshal(strct.SlotName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SlotPriority) UnmarshalJSON(b []byte) error {
    PriorityReceived := false
    SlotNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Priority":
            if err := json.Unmarshal([]byte(v), &strct.Priority); err != nil {
                return err
             }
            PriorityReceived = true
        case "SlotName":
            if err := json.Unmarshal([]byte(v), &strct.SlotName); err != nil {
                return err
             }
            SlotNameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Priority (a required property) was received
    if !PriorityReceived {
        return errors.New("\"Priority\" is required but was not present")
    }
    // check if SlotName (a required property) was received
    if !SlotNameReceived {
        return errors.New("\"SlotName\" is required but was not present")
    }
    return nil
}

func (strct *SlotType) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ExternalSourceSetting" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ExternalSourceSetting\": ")
	if tmp, err := json.Marshal(strct.ExternalSourceSetting); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ParentSlotTypeSignature" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ParentSlotTypeSignature\": ")
	if tmp, err := json.Marshal(strct.ParentSlotTypeSignature); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SlotTypeValues" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SlotTypeValues\": ")
	if tmp, err := json.Marshal(strct.SlotTypeValues); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ValueSelectionSetting" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ValueSelectionSetting\": ")
	if tmp, err := json.Marshal(strct.ValueSelectionSetting); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SlotType) UnmarshalJSON(b []byte) error {
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "ExternalSourceSetting":
            if err := json.Unmarshal([]byte(v), &strct.ExternalSourceSetting); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "ParentSlotTypeSignature":
            if err := json.Unmarshal([]byte(v), &strct.ParentSlotTypeSignature); err != nil {
                return err
             }
        case "SlotTypeValues":
            if err := json.Unmarshal([]byte(v), &strct.SlotTypeValues); err != nil {
                return err
             }
        case "ValueSelectionSetting":
            if err := json.Unmarshal([]byte(v), &strct.ValueSelectionSetting); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}

func (strct *SlotTypeValue) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "SampleValue" field is required
    if strct.SampleValue == nil {
        return nil, errors.New("SampleValue is a required field")
    }
    // Marshal the "SampleValue" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SampleValue\": ")
	if tmp, err := json.Marshal(strct.SampleValue); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Synonyms" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Synonyms\": ")
	if tmp, err := json.Marshal(strct.Synonyms); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SlotTypeValue) UnmarshalJSON(b []byte) error {
    SampleValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "SampleValue":
            if err := json.Unmarshal([]byte(v), &strct.SampleValue); err != nil {
                return err
             }
            SampleValueReceived = true
        case "Synonyms":
            if err := json.Unmarshal([]byte(v), &strct.Synonyms); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SampleValue (a required property) was received
    if !SampleValueReceived {
        return errors.New("\"SampleValue\" is required but was not present")
    }
    return nil
}

func (strct *SlotValue) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "InterpretedValue" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InterpretedValue\": ")
	if tmp, err := json.Marshal(strct.InterpretedValue); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SlotValue) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "InterpretedValue":
            if err := json.Unmarshal([]byte(v), &strct.InterpretedValue); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *SlotValueElicitationSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DefaultValueSpecification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultValueSpecification\": ")
	if tmp, err := json.Marshal(strct.DefaultValueSpecification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PromptSpecification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PromptSpecification\": ")
	if tmp, err := json.Marshal(strct.PromptSpecification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SampleUtterances" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SampleUtterances\": ")
	if tmp, err := json.Marshal(strct.SampleUtterances); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SlotCaptureSetting" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SlotCaptureSetting\": ")
	if tmp, err := json.Marshal(strct.SlotCaptureSetting); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SlotConstraint" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SlotConstraint" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SlotConstraint\": ")
	if tmp, err := json.Marshal(strct.SlotConstraint); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "WaitAndContinueSpecification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WaitAndContinueSpecification\": ")
	if tmp, err := json.Marshal(strct.WaitAndContinueSpecification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SlotValueElicitationSetting) UnmarshalJSON(b []byte) error {
    SlotConstraintReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DefaultValueSpecification":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueSpecification); err != nil {
                return err
             }
        case "PromptSpecification":
            if err := json.Unmarshal([]byte(v), &strct.PromptSpecification); err != nil {
                return err
             }
        case "SampleUtterances":
            if err := json.Unmarshal([]byte(v), &strct.SampleUtterances); err != nil {
                return err
             }
        case "SlotCaptureSetting":
            if err := json.Unmarshal([]byte(v), &strct.SlotCaptureSetting); err != nil {
                return err
             }
        case "SlotConstraint":
            if err := json.Unmarshal([]byte(v), &strct.SlotConstraint); err != nil {
                return err
             }
            SlotConstraintReceived = true
        case "WaitAndContinueSpecification":
            if err := json.Unmarshal([]byte(v), &strct.WaitAndContinueSpecification); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SlotConstraint (a required property) was received
    if !SlotConstraintReceived {
        return errors.New("\"SlotConstraint\" is required but was not present")
    }
    return nil
}

func (strct *SlotValueOverride) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Shape" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Shape\": ")
	if tmp, err := json.Marshal(strct.Shape); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Values" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Values\": ")
	if tmp, err := json.Marshal(strct.Values); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SlotValueOverride) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Shape":
            if err := json.Unmarshal([]byte(v), &strct.Shape); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        case "Values":
            if err := json.Unmarshal([]byte(v), &strct.Values); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *SlotValueOverrideMap) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "SlotName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SlotName\": ")
	if tmp, err := json.Marshal(strct.SlotName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SlotValueOverride" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SlotValueOverride\": ")
	if tmp, err := json.Marshal(strct.SlotValueOverride); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SlotValueOverrideMap) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "SlotName":
            if err := json.Unmarshal([]byte(v), &strct.SlotName); err != nil {
                return err
             }
        case "SlotValueOverride":
            if err := json.Unmarshal([]byte(v), &strct.SlotValueOverride); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *SlotValueRegexFilter) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Pattern" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Pattern" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Pattern\": ")
	if tmp, err := json.Marshal(strct.Pattern); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SlotValueRegexFilter) UnmarshalJSON(b []byte) error {
    PatternReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Pattern":
            if err := json.Unmarshal([]byte(v), &strct.Pattern); err != nil {
                return err
             }
            PatternReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Pattern (a required property) was received
    if !PatternReceived {
        return errors.New("\"Pattern\" is required but was not present")
    }
    return nil
}

func (strct *SlotValueSelectionSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AdvancedRecognitionSetting" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AdvancedRecognitionSetting\": ")
	if tmp, err := json.Marshal(strct.AdvancedRecognitionSetting); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RegexFilter" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RegexFilter\": ")
	if tmp, err := json.Marshal(strct.RegexFilter); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResolutionStrategy" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ResolutionStrategy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResolutionStrategy\": ")
	if tmp, err := json.Marshal(strct.ResolutionStrategy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SlotValueSelectionSetting) UnmarshalJSON(b []byte) error {
    ResolutionStrategyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AdvancedRecognitionSetting":
            if err := json.Unmarshal([]byte(v), &strct.AdvancedRecognitionSetting); err != nil {
                return err
             }
        case "RegexFilter":
            if err := json.Unmarshal([]byte(v), &strct.RegexFilter); err != nil {
                return err
             }
        case "ResolutionStrategy":
            if err := json.Unmarshal([]byte(v), &strct.ResolutionStrategy); err != nil {
                return err
             }
            ResolutionStrategyReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ResolutionStrategy (a required property) was received
    if !ResolutionStrategyReceived {
        return errors.New("\"ResolutionStrategy\" is required but was not present")
    }
    return nil
}

func (strct *StillWaitingResponseSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllowInterrupt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowInterrupt\": ")
	if tmp, err := json.Marshal(strct.AllowInterrupt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "FrequencyInSeconds" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "FrequencyInSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FrequencyInSeconds\": ")
	if tmp, err := json.Marshal(strct.FrequencyInSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MessageGroupsList" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MessageGroupsList" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MessageGroupsList\": ")
	if tmp, err := json.Marshal(strct.MessageGroupsList); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TimeoutInSeconds" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TimeoutInSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeoutInSeconds\": ")
	if tmp, err := json.Marshal(strct.TimeoutInSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *StillWaitingResponseSpecification) UnmarshalJSON(b []byte) error {
    FrequencyInSecondsReceived := false
    MessageGroupsListReceived := false
    TimeoutInSecondsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllowInterrupt":
            if err := json.Unmarshal([]byte(v), &strct.AllowInterrupt); err != nil {
                return err
             }
        case "FrequencyInSeconds":
            if err := json.Unmarshal([]byte(v), &strct.FrequencyInSeconds); err != nil {
                return err
             }
            FrequencyInSecondsReceived = true
        case "MessageGroupsList":
            if err := json.Unmarshal([]byte(v), &strct.MessageGroupsList); err != nil {
                return err
             }
            MessageGroupsListReceived = true
        case "TimeoutInSeconds":
            if err := json.Unmarshal([]byte(v), &strct.TimeoutInSeconds); err != nil {
                return err
             }
            TimeoutInSecondsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if FrequencyInSeconds (a required property) was received
    if !FrequencyInSecondsReceived {
        return errors.New("\"FrequencyInSeconds\" is required but was not present")
    }
    // check if MessageGroupsList (a required property) was received
    if !MessageGroupsListReceived {
        return errors.New("\"MessageGroupsList\" is required but was not present")
    }
    // check if TimeoutInSeconds (a required property) was received
    if !TimeoutInSecondsReceived {
        return errors.New("\"TimeoutInSeconds\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *TestBotAliasSettings) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "BotAliasLocaleSettings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BotAliasLocaleSettings\": ")
	if tmp, err := json.Marshal(strct.BotAliasLocaleSettings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ConversationLogSettings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConversationLogSettings\": ")
	if tmp, err := json.Marshal(strct.ConversationLogSettings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SentimentAnalysisSettings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SentimentAnalysisSettings\": ")
	if tmp, err := json.Marshal(strct.SentimentAnalysisSettings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TestBotAliasSettings) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "BotAliasLocaleSettings":
            if err := json.Unmarshal([]byte(v), &strct.BotAliasLocaleSettings); err != nil {
                return err
             }
        case "ConversationLogSettings":
            if err := json.Unmarshal([]byte(v), &strct.ConversationLogSettings); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "SentimentAnalysisSettings":
            if err := json.Unmarshal([]byte(v), &strct.SentimentAnalysisSettings); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *TextInputSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "StartTimeoutMs" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "StartTimeoutMs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StartTimeoutMs\": ")
	if tmp, err := json.Marshal(strct.StartTimeoutMs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TextInputSpecification) UnmarshalJSON(b []byte) error {
    StartTimeoutMsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "StartTimeoutMs":
            if err := json.Unmarshal([]byte(v), &strct.StartTimeoutMs); err != nil {
                return err
             }
            StartTimeoutMsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if StartTimeoutMs (a required property) was received
    if !StartTimeoutMsReceived {
        return errors.New("\"StartTimeoutMs\" is required but was not present")
    }
    return nil
}

func (strct *TextLogDestination) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "CloudWatch" field is required
    if strct.CloudWatch == nil {
        return nil, errors.New("CloudWatch is a required field")
    }
    // Marshal the "CloudWatch" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CloudWatch\": ")
	if tmp, err := json.Marshal(strct.CloudWatch); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TextLogDestination) UnmarshalJSON(b []byte) error {
    CloudWatchReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CloudWatch":
            if err := json.Unmarshal([]byte(v), &strct.CloudWatch); err != nil {
                return err
             }
            CloudWatchReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CloudWatch (a required property) was received
    if !CloudWatchReceived {
        return errors.New("\"CloudWatch\" is required but was not present")
    }
    return nil
}

func (strct *TextLogSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Destination" field is required
    if strct.Destination == nil {
        return nil, errors.New("Destination is a required field")
    }
    // Marshal the "Destination" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Destination\": ")
	if tmp, err := json.Marshal(strct.Destination); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Enabled" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Enabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enabled\": ")
	if tmp, err := json.Marshal(strct.Enabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TextLogSetting) UnmarshalJSON(b []byte) error {
    DestinationReceived := false
    EnabledReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Destination":
            if err := json.Unmarshal([]byte(v), &strct.Destination); err != nil {
                return err
             }
            DestinationReceived = true
        case "Enabled":
            if err := json.Unmarshal([]byte(v), &strct.Enabled); err != nil {
                return err
             }
            EnabledReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Destination (a required property) was received
    if !DestinationReceived {
        return errors.New("\"Destination\" is required but was not present")
    }
    // check if Enabled (a required property) was received
    if !EnabledReceived {
        return errors.New("\"Enabled\" is required but was not present")
    }
    return nil
}

func (strct *VoiceSettings) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Engine" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Engine\": ")
	if tmp, err := json.Marshal(strct.Engine); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "VoiceId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "VoiceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VoiceId\": ")
	if tmp, err := json.Marshal(strct.VoiceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *VoiceSettings) UnmarshalJSON(b []byte) error {
    VoiceIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Engine":
            if err := json.Unmarshal([]byte(v), &strct.Engine); err != nil {
                return err
             }
        case "VoiceId":
            if err := json.Unmarshal([]byte(v), &strct.VoiceId); err != nil {
                return err
             }
            VoiceIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if VoiceId (a required property) was received
    if !VoiceIdReceived {
        return errors.New("\"VoiceId\" is required but was not present")
    }
    return nil
}

func (strct *WaitAndContinueSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ContinueResponse" field is required
    if strct.ContinueResponse == nil {
        return nil, errors.New("ContinueResponse is a required field")
    }
    // Marshal the "ContinueResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ContinueResponse\": ")
	if tmp, err := json.Marshal(strct.ContinueResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IsActive" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsActive\": ")
	if tmp, err := json.Marshal(strct.IsActive); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StillWaitingResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StillWaitingResponse\": ")
	if tmp, err := json.Marshal(strct.StillWaitingResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "WaitingResponse" field is required
    if strct.WaitingResponse == nil {
        return nil, errors.New("WaitingResponse is a required field")
    }
    // Marshal the "WaitingResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WaitingResponse\": ")
	if tmp, err := json.Marshal(strct.WaitingResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *WaitAndContinueSpecification) UnmarshalJSON(b []byte) error {
    ContinueResponseReceived := false
    WaitingResponseReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ContinueResponse":
            if err := json.Unmarshal([]byte(v), &strct.ContinueResponse); err != nil {
                return err
             }
            ContinueResponseReceived = true
        case "IsActive":
            if err := json.Unmarshal([]byte(v), &strct.IsActive); err != nil {
                return err
             }
        case "StillWaitingResponse":
            if err := json.Unmarshal([]byte(v), &strct.StillWaitingResponse); err != nil {
                return err
             }
        case "WaitingResponse":
            if err := json.Unmarshal([]byte(v), &strct.WaitingResponse); err != nil {
                return err
             }
            WaitingResponseReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ContinueResponse (a required property) was received
    if !ContinueResponseReceived {
        return errors.New("\"ContinueResponse\" is required but was not present")
    }
    // check if WaitingResponse (a required property) was received
    if !WaitingResponseReceived {
        return errors.New("\"WaitingResponse\" is required but was not present")
    }
    return nil
}
