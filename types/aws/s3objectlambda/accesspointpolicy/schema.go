// Code generated by schema-generate. DO NOT EDIT.

package accesspointpolicy

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// PolicyDocument A policy document containing permissions to add to the specified ObjectLambdaAccessPoint. For more information, see Access Policy Language Overview (https://docs.aws.amazon.com/AmazonS3/latest/dev/access-policy-language-overview.html) in the Amazon Simple Storage Service Developer Guide. 
type PolicyDocument struct {
}

// Resource AWS::S3ObjectLambda::AccessPointPolicy resource is an Amazon S3ObjectLambda policy type that you can use to control permissions for your S3ObjectLambda
type Resource struct {

  // The name of the Amazon S3 ObjectLambdaAccessPoint to which the policy applies.
  ObjectLambdaAccessPoint string `json:"ObjectLambdaAccessPoint"`

  // A policy document containing permissions to add to the specified ObjectLambdaAccessPoint. For more information, see Access Policy Language Overview (https://docs.aws.amazon.com/AmazonS3/latest/dev/access-policy-language-overview.html) in the Amazon Simple Storage Service Developer Guide. 
  PolicyDocument *PolicyDocument `json:"PolicyDocument"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ObjectLambdaAccessPoint" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ObjectLambdaAccessPoint" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ObjectLambdaAccessPoint\": ")
	if tmp, err := json.Marshal(strct.ObjectLambdaAccessPoint); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PolicyDocument" field is required
    if strct.PolicyDocument == nil {
        return nil, errors.New("PolicyDocument is a required field")
    }
    // Marshal the "PolicyDocument" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PolicyDocument\": ")
	if tmp, err := json.Marshal(strct.PolicyDocument); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ObjectLambdaAccessPointReceived := false
    PolicyDocumentReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ObjectLambdaAccessPoint":
            if err := json.Unmarshal([]byte(v), &strct.ObjectLambdaAccessPoint); err != nil {
                return err
             }
            ObjectLambdaAccessPointReceived = true
        case "PolicyDocument":
            if err := json.Unmarshal([]byte(v), &strct.PolicyDocument); err != nil {
                return err
             }
            PolicyDocumentReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ObjectLambdaAccessPoint (a required property) was received
    if !ObjectLambdaAccessPointReceived {
        return errors.New("\"ObjectLambdaAccessPoint\" is required but was not present")
    }
    // check if PolicyDocument (a required property) was received
    if !PolicyDocumentReceived {
        return errors.New("\"PolicyDocument\" is required but was not present")
    }
    return nil
}
