// Code generated by schema-generate. DO NOT EDIT.

package accesspoint

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// AwsLambda 
type AwsLambda struct {
  FunctionArn string `json:"FunctionArn"`
  FunctionPayload string `json:"FunctionPayload,omitempty"`
}

// ContentTransformation 
type ContentTransformation struct {
}

// ObjectLambdaConfiguration Configuration to be applied to this Object lambda Access Point. It specifies Supporting Access Point, Transformation Configurations. Customers can also set if they like to enable Cloudwatch metrics for accesses to this Object lambda Access Point. Default setting for Cloudwatch metrics is disable.
type ObjectLambdaConfiguration struct {
  AllowedFeatures []string `json:"AllowedFeatures,omitempty"`
  CloudWatchMetricsEnabled bool `json:"CloudWatchMetricsEnabled,omitempty"`
  SupportingAccessPoint string `json:"SupportingAccessPoint"`
  TransformationConfigurations []*TransformationConfiguration `json:"TransformationConfigurations"`
}

// PolicyStatus 
type PolicyStatus struct {

  // Specifies whether the Object lambda Access Point Policy is Public or not. Object lambda Access Points are private by default.
  IsPublic bool `json:"IsPublic,omitempty"`
}

// PublicAccessBlockConfiguration The Public Access Block Configuration is used to block policies that would allow public access to this Object lambda Access Point. All public access to Object lambda Access Points are blocked by default, and any policy that would give public access to them will be also blocked. This behavior cannot be changed for Object lambda Access Points.
type PublicAccessBlockConfiguration struct {

  // Specifies whether Amazon S3 should block public access control lists (ACLs) to this object lambda access point. Setting this element to TRUE causes the following behavior:
  // - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
  //  - PUT Object calls fail if the request includes a public ACL.
  // . - PUT Bucket calls fail if the request includes a public ACL.
  // Enabling this setting doesn't affect existing policies or ACLs.
  BlockPublicAcls bool `json:"BlockPublicAcls,omitempty"`

  // Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
  BlockPublicPolicy bool `json:"BlockPublicPolicy,omitempty"`

  // Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
  IgnorePublicAcls bool `json:"IgnorePublicAcls,omitempty"`

  // Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
  // Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
  RestrictPublicBuckets bool `json:"RestrictPublicBuckets,omitempty"`
}

// Resource The AWS::S3ObjectLambda::AccessPoint resource is an Amazon S3ObjectLambda resource type that you can use to add computation to S3 actions
type Resource struct {
  Arn string `json:"Arn,omitempty"`

  // The date and time when the Object lambda Access Point was created.
  CreationDate string `json:"CreationDate,omitempty"`

  // The name you want to assign to this Object lambda Access Point.
  Name string `json:"Name,omitempty"`

  // The Object lambda Access Point Configuration that configures transformations to be applied on the objects on specified S3 Actions
  ObjectLambdaConfiguration *ObjectLambdaConfiguration `json:"ObjectLambdaConfiguration"`
  PolicyStatus *PolicyStatus `json:"PolicyStatus,omitempty"`

  // The PublicAccessBlock configuration that you want to apply to this Access Point. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status 'The Meaning of Public' in the Amazon Simple Storage Service Developer Guide.
  PublicAccessBlockConfiguration *PublicAccessBlockConfiguration `json:"PublicAccessBlockConfiguration,omitempty"`
}

// TransformationConfiguration Configuration to define what content transformation will be applied on which S3 Action.
type TransformationConfiguration struct {
  Actions []string `json:"Actions"`
  ContentTransformation *ContentTransformation `json:"ContentTransformation"`
}

func (strct *AwsLambda) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "FunctionArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "FunctionArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FunctionArn\": ")
	if tmp, err := json.Marshal(strct.FunctionArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FunctionPayload" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FunctionPayload\": ")
	if tmp, err := json.Marshal(strct.FunctionPayload); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AwsLambda) UnmarshalJSON(b []byte) error {
    FunctionArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "FunctionArn":
            if err := json.Unmarshal([]byte(v), &strct.FunctionArn); err != nil {
                return err
             }
            FunctionArnReceived = true
        case "FunctionPayload":
            if err := json.Unmarshal([]byte(v), &strct.FunctionPayload); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if FunctionArn (a required property) was received
    if !FunctionArnReceived {
        return errors.New("\"FunctionArn\" is required but was not present")
    }
    return nil
}

func (strct *ObjectLambdaConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllowedFeatures" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowedFeatures\": ")
	if tmp, err := json.Marshal(strct.AllowedFeatures); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CloudWatchMetricsEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CloudWatchMetricsEnabled\": ")
	if tmp, err := json.Marshal(strct.CloudWatchMetricsEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SupportingAccessPoint" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SupportingAccessPoint" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SupportingAccessPoint\": ")
	if tmp, err := json.Marshal(strct.SupportingAccessPoint); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TransformationConfigurations" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TransformationConfigurations" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransformationConfigurations\": ")
	if tmp, err := json.Marshal(strct.TransformationConfigurations); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ObjectLambdaConfiguration) UnmarshalJSON(b []byte) error {
    SupportingAccessPointReceived := false
    TransformationConfigurationsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllowedFeatures":
            if err := json.Unmarshal([]byte(v), &strct.AllowedFeatures); err != nil {
                return err
             }
        case "CloudWatchMetricsEnabled":
            if err := json.Unmarshal([]byte(v), &strct.CloudWatchMetricsEnabled); err != nil {
                return err
             }
        case "SupportingAccessPoint":
            if err := json.Unmarshal([]byte(v), &strct.SupportingAccessPoint); err != nil {
                return err
             }
            SupportingAccessPointReceived = true
        case "TransformationConfigurations":
            if err := json.Unmarshal([]byte(v), &strct.TransformationConfigurations); err != nil {
                return err
             }
            TransformationConfigurationsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SupportingAccessPoint (a required property) was received
    if !SupportingAccessPointReceived {
        return errors.New("\"SupportingAccessPoint\" is required but was not present")
    }
    // check if TransformationConfigurations (a required property) was received
    if !TransformationConfigurationsReceived {
        return errors.New("\"TransformationConfigurations\" is required but was not present")
    }
    return nil
}

func (strct *PolicyStatus) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "IsPublic" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsPublic\": ")
	if tmp, err := json.Marshal(strct.IsPublic); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PolicyStatus) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "IsPublic":
            if err := json.Unmarshal([]byte(v), &strct.IsPublic); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *PublicAccessBlockConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "BlockPublicAcls" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BlockPublicAcls\": ")
	if tmp, err := json.Marshal(strct.BlockPublicAcls); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BlockPublicPolicy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BlockPublicPolicy\": ")
	if tmp, err := json.Marshal(strct.BlockPublicPolicy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IgnorePublicAcls" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IgnorePublicAcls\": ")
	if tmp, err := json.Marshal(strct.IgnorePublicAcls); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RestrictPublicBuckets" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RestrictPublicBuckets\": ")
	if tmp, err := json.Marshal(strct.RestrictPublicBuckets); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PublicAccessBlockConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "BlockPublicAcls":
            if err := json.Unmarshal([]byte(v), &strct.BlockPublicAcls); err != nil {
                return err
             }
        case "BlockPublicPolicy":
            if err := json.Unmarshal([]byte(v), &strct.BlockPublicPolicy); err != nil {
                return err
             }
        case "IgnorePublicAcls":
            if err := json.Unmarshal([]byte(v), &strct.IgnorePublicAcls); err != nil {
                return err
             }
        case "RestrictPublicBuckets":
            if err := json.Unmarshal([]byte(v), &strct.RestrictPublicBuckets); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CreationDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreationDate\": ")
	if tmp, err := json.Marshal(strct.CreationDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ObjectLambdaConfiguration" field is required
    if strct.ObjectLambdaConfiguration == nil {
        return nil, errors.New("ObjectLambdaConfiguration is a required field")
    }
    // Marshal the "ObjectLambdaConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ObjectLambdaConfiguration\": ")
	if tmp, err := json.Marshal(strct.ObjectLambdaConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PolicyStatus" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PolicyStatus\": ")
	if tmp, err := json.Marshal(strct.PolicyStatus); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PublicAccessBlockConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PublicAccessBlockConfiguration\": ")
	if tmp, err := json.Marshal(strct.PublicAccessBlockConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ObjectLambdaConfigurationReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "CreationDate":
            if err := json.Unmarshal([]byte(v), &strct.CreationDate); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "ObjectLambdaConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.ObjectLambdaConfiguration); err != nil {
                return err
             }
            ObjectLambdaConfigurationReceived = true
        case "PolicyStatus":
            if err := json.Unmarshal([]byte(v), &strct.PolicyStatus); err != nil {
                return err
             }
        case "PublicAccessBlockConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.PublicAccessBlockConfiguration); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ObjectLambdaConfiguration (a required property) was received
    if !ObjectLambdaConfigurationReceived {
        return errors.New("\"ObjectLambdaConfiguration\" is required but was not present")
    }
    return nil
}

func (strct *TransformationConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Actions" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Actions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Actions\": ")
	if tmp, err := json.Marshal(strct.Actions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ContentTransformation" field is required
    if strct.ContentTransformation == nil {
        return nil, errors.New("ContentTransformation is a required field")
    }
    // Marshal the "ContentTransformation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ContentTransformation\": ")
	if tmp, err := json.Marshal(strct.ContentTransformation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TransformationConfiguration) UnmarshalJSON(b []byte) error {
    ActionsReceived := false
    ContentTransformationReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Actions":
            if err := json.Unmarshal([]byte(v), &strct.Actions); err != nil {
                return err
             }
            ActionsReceived = true
        case "ContentTransformation":
            if err := json.Unmarshal([]byte(v), &strct.ContentTransformation); err != nil {
                return err
             }
            ContentTransformationReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Actions (a required property) was received
    if !ActionsReceived {
        return errors.New("\"Actions\" is required but was not present")
    }
    // check if ContentTransformation (a required property) was received
    if !ContentTransformationReceived {
        return errors.New("\"ContentTransformation\" is required but was not present")
    }
    return nil
}
