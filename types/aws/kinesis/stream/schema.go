// Code generated by schema-generate. DO NOT EDIT.

package stream

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource Type definition for AWS::Kinesis::Stream
type Resource struct {

  // The Amazon resource name (ARN) of the Kinesis stream
  Arn string `json:"Arn,omitempty"`

  // The name of the Kinesis stream.
  Name string `json:"Name,omitempty"`

  // The number of hours for the data records that are stored in shards to remain accessible.
  RetentionPeriodHours int `json:"RetentionPeriodHours,omitempty"`

  // The number of shards that the stream uses. Required when StreamMode = PROVISIONED is passed.
  ShardCount int `json:"ShardCount,omitempty"`

  // When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream.
  StreamEncryption *StreamEncryption `json:"StreamEncryption,omitempty"`

  // The mode in which the stream is running.
  StreamModeDetails *StreamModeDetails `json:"StreamModeDetails,omitempty"`

  // An arbitrary set of tags (keyâ€“value pairs) to associate with the Kinesis stream.
  Tags []*Tag `json:"Tags,omitempty"`
}

// StreamEncryption When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream. Removing this property from your stack template and updating your stack disables encryption.
type StreamEncryption struct {

  // The encryption type to use. The only valid value is KMS. 
  EncryptionType string `json:"EncryptionType"`

  // The GUID for the customer-managed AWS KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
  KeyId string `json:"KeyId"`
}

// StreamModeDetails When specified, enables or updates the mode of stream. Default is PROVISIONED.
type StreamModeDetails struct {

  // The mode of the stream
  StreamMode string `json:"StreamMode"`
}

// Tag An arbitrary set of tags (key-value pairs) to associate with the Kinesis stream.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RetentionPeriodHours" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RetentionPeriodHours\": ")
	if tmp, err := json.Marshal(strct.RetentionPeriodHours); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ShardCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ShardCount\": ")
	if tmp, err := json.Marshal(strct.ShardCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StreamEncryption" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StreamEncryption\": ")
	if tmp, err := json.Marshal(strct.StreamEncryption); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StreamModeDetails" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StreamModeDetails\": ")
	if tmp, err := json.Marshal(strct.StreamModeDetails); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "RetentionPeriodHours":
            if err := json.Unmarshal([]byte(v), &strct.RetentionPeriodHours); err != nil {
                return err
             }
        case "ShardCount":
            if err := json.Unmarshal([]byte(v), &strct.ShardCount); err != nil {
                return err
             }
        case "StreamEncryption":
            if err := json.Unmarshal([]byte(v), &strct.StreamEncryption); err != nil {
                return err
             }
        case "StreamModeDetails":
            if err := json.Unmarshal([]byte(v), &strct.StreamModeDetails); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *StreamEncryption) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "EncryptionType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "EncryptionType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EncryptionType\": ")
	if tmp, err := json.Marshal(strct.EncryptionType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "KeyId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "KeyId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KeyId\": ")
	if tmp, err := json.Marshal(strct.KeyId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *StreamEncryption) UnmarshalJSON(b []byte) error {
    EncryptionTypeReceived := false
    KeyIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "EncryptionType":
            if err := json.Unmarshal([]byte(v), &strct.EncryptionType); err != nil {
                return err
             }
            EncryptionTypeReceived = true
        case "KeyId":
            if err := json.Unmarshal([]byte(v), &strct.KeyId); err != nil {
                return err
             }
            KeyIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if EncryptionType (a required property) was received
    if !EncryptionTypeReceived {
        return errors.New("\"EncryptionType\" is required but was not present")
    }
    // check if KeyId (a required property) was received
    if !KeyIdReceived {
        return errors.New("\"KeyId\" is required but was not present")
    }
    return nil
}

func (strct *StreamModeDetails) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "StreamMode" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "StreamMode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StreamMode\": ")
	if tmp, err := json.Marshal(strct.StreamMode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *StreamModeDetails) UnmarshalJSON(b []byte) error {
    StreamModeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "StreamMode":
            if err := json.Unmarshal([]byte(v), &strct.StreamMode); err != nil {
                return err
             }
            StreamModeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if StreamMode (a required property) was received
    if !StreamModeReceived {
        return errors.New("\"StreamMode\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
