// Code generated by schema-generate. DO NOT EDIT.

package endpointauthorization

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across AWS accounts.
type Resource struct {

  // The target AWS account ID to grant or revoke access for.
  Account string `json:"Account"`

  // Indicates whether all VPCs in the grantee account are allowed access to the cluster.
  AllowedAllVPCs bool `json:"AllowedAllVPCs,omitempty"`

  // The VPCs allowed access to the cluster.
  AllowedVPCs []string `json:"AllowedVPCs,omitempty"`

  // The time (UTC) when the authorization was created.
  AuthorizeTime string `json:"AuthorizeTime,omitempty"`

  // The cluster identifier.
  ClusterIdentifier string `json:"ClusterIdentifier"`

  // The status of the cluster.
  ClusterStatus string `json:"ClusterStatus,omitempty"`

  // The number of Redshift-managed VPC endpoints created for the authorization.
  EndpointCount int `json:"EndpointCount,omitempty"`

  //  Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted.
  Force bool `json:"Force,omitempty"`

  // The AWS account ID of the grantee of the cluster.
  Grantee string `json:"Grantee,omitempty"`

  // The AWS account ID of the cluster owner.
  Grantor string `json:"Grantor,omitempty"`

  // The status of the authorization action.
  Status string `json:"Status,omitempty"`

  // The virtual private cloud (VPC) identifiers to grant or revoke access to.
  VpcIds []string `json:"VpcIds,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Account" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Account" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Account\": ")
	if tmp, err := json.Marshal(strct.Account); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AllowedAllVPCs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowedAllVPCs\": ")
	if tmp, err := json.Marshal(strct.AllowedAllVPCs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AllowedVPCs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowedVPCs\": ")
	if tmp, err := json.Marshal(strct.AllowedVPCs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AuthorizeTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AuthorizeTime\": ")
	if tmp, err := json.Marshal(strct.AuthorizeTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ClusterIdentifier" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ClusterIdentifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ClusterIdentifier\": ")
	if tmp, err := json.Marshal(strct.ClusterIdentifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ClusterStatus" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ClusterStatus\": ")
	if tmp, err := json.Marshal(strct.ClusterStatus); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EndpointCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EndpointCount\": ")
	if tmp, err := json.Marshal(strct.EndpointCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Force" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Force\": ")
	if tmp, err := json.Marshal(strct.Force); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Grantee" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Grantee\": ")
	if tmp, err := json.Marshal(strct.Grantee); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Grantor" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Grantor\": ")
	if tmp, err := json.Marshal(strct.Grantor); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpcIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcIds\": ")
	if tmp, err := json.Marshal(strct.VpcIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AccountReceived := false
    ClusterIdentifierReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Account":
            if err := json.Unmarshal([]byte(v), &strct.Account); err != nil {
                return err
             }
            AccountReceived = true
        case "AllowedAllVPCs":
            if err := json.Unmarshal([]byte(v), &strct.AllowedAllVPCs); err != nil {
                return err
             }
        case "AllowedVPCs":
            if err := json.Unmarshal([]byte(v), &strct.AllowedVPCs); err != nil {
                return err
             }
        case "AuthorizeTime":
            if err := json.Unmarshal([]byte(v), &strct.AuthorizeTime); err != nil {
                return err
             }
        case "ClusterIdentifier":
            if err := json.Unmarshal([]byte(v), &strct.ClusterIdentifier); err != nil {
                return err
             }
            ClusterIdentifierReceived = true
        case "ClusterStatus":
            if err := json.Unmarshal([]byte(v), &strct.ClusterStatus); err != nil {
                return err
             }
        case "EndpointCount":
            if err := json.Unmarshal([]byte(v), &strct.EndpointCount); err != nil {
                return err
             }
        case "Force":
            if err := json.Unmarshal([]byte(v), &strct.Force); err != nil {
                return err
             }
        case "Grantee":
            if err := json.Unmarshal([]byte(v), &strct.Grantee); err != nil {
                return err
             }
        case "Grantor":
            if err := json.Unmarshal([]byte(v), &strct.Grantor); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "VpcIds":
            if err := json.Unmarshal([]byte(v), &strct.VpcIds); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Account (a required property) was received
    if !AccountReceived {
        return errors.New("\"Account\" is required but was not present")
    }
    // check if ClusterIdentifier (a required property) was received
    if !ClusterIdentifierReceived {
        return errors.New("\"ClusterIdentifier\" is required but was not present")
    }
    return nil
}
