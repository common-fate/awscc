// Code generated by schema-generate. DO NOT EDIT.

package scheduledaction

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// PauseClusterMessage Describes a pause cluster operation. For example, a scheduled action to run the `PauseCluster` API operation.
type PauseClusterMessage struct {
  ClusterIdentifier string `json:"ClusterIdentifier"`
}

// ResizeClusterMessage Describes a resize cluster operation. For example, a scheduled action to run the `ResizeCluster` API operation.
type ResizeClusterMessage struct {
  Classic bool `json:"Classic,omitempty"`
  ClusterIdentifier string `json:"ClusterIdentifier"`
  ClusterType string `json:"ClusterType,omitempty"`
  NodeType string `json:"NodeType,omitempty"`
  NumberOfNodes int `json:"NumberOfNodes,omitempty"`
}

// Resource The `AWS::Redshift::ScheduledAction` resource creates an Amazon Redshift Scheduled Action.
type Resource struct {

  // If true, the schedule is enabled. If false, the scheduled action does not trigger.
  Enable bool `json:"Enable,omitempty"`

  // The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger.
  EndTime string `json:"EndTime,omitempty"`

  // The IAM role to assume to run the target action.
  IamRole string `json:"IamRole,omitempty"`

  // List of times when the scheduled action will run.
  NextInvocations []string `json:"NextInvocations,omitempty"`

  // The schedule in `at( )` or `cron( )` format.
  Schedule string `json:"Schedule,omitempty"`

  // The description of the scheduled action.
  ScheduledActionDescription string `json:"ScheduledActionDescription,omitempty"`

  // The name of the scheduled action. The name must be unique within an account.
  ScheduledActionName string `json:"ScheduledActionName"`

  // The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger.
  StartTime string `json:"StartTime,omitempty"`

  // The state of the scheduled action.
  State string `json:"State,omitempty"`

  // A JSON format string of the Amazon Redshift API operation with input parameters.
  TargetAction *ScheduledActionType `json:"TargetAction,omitempty"`
}

// ResumeClusterMessage Describes a resume cluster operation. For example, a scheduled action to run the `ResumeCluster` API operation.
type ResumeClusterMessage struct {
  ClusterIdentifier string `json:"ClusterIdentifier"`
}

// ScheduledActionType 
type ScheduledActionType struct {
}

func (strct *PauseClusterMessage) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ClusterIdentifier" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ClusterIdentifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ClusterIdentifier\": ")
	if tmp, err := json.Marshal(strct.ClusterIdentifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PauseClusterMessage) UnmarshalJSON(b []byte) error {
    ClusterIdentifierReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ClusterIdentifier":
            if err := json.Unmarshal([]byte(v), &strct.ClusterIdentifier); err != nil {
                return err
             }
            ClusterIdentifierReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ClusterIdentifier (a required property) was received
    if !ClusterIdentifierReceived {
        return errors.New("\"ClusterIdentifier\" is required but was not present")
    }
    return nil
}

func (strct *ResizeClusterMessage) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Classic" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Classic\": ")
	if tmp, err := json.Marshal(strct.Classic); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ClusterIdentifier" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ClusterIdentifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ClusterIdentifier\": ")
	if tmp, err := json.Marshal(strct.ClusterIdentifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ClusterType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ClusterType\": ")
	if tmp, err := json.Marshal(strct.ClusterType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NodeType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NodeType\": ")
	if tmp, err := json.Marshal(strct.NodeType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NumberOfNodes" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NumberOfNodes\": ")
	if tmp, err := json.Marshal(strct.NumberOfNodes); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ResizeClusterMessage) UnmarshalJSON(b []byte) error {
    ClusterIdentifierReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Classic":
            if err := json.Unmarshal([]byte(v), &strct.Classic); err != nil {
                return err
             }
        case "ClusterIdentifier":
            if err := json.Unmarshal([]byte(v), &strct.ClusterIdentifier); err != nil {
                return err
             }
            ClusterIdentifierReceived = true
        case "ClusterType":
            if err := json.Unmarshal([]byte(v), &strct.ClusterType); err != nil {
                return err
             }
        case "NodeType":
            if err := json.Unmarshal([]byte(v), &strct.NodeType); err != nil {
                return err
             }
        case "NumberOfNodes":
            if err := json.Unmarshal([]byte(v), &strct.NumberOfNodes); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ClusterIdentifier (a required property) was received
    if !ClusterIdentifierReceived {
        return errors.New("\"ClusterIdentifier\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Enable" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enable\": ")
	if tmp, err := json.Marshal(strct.Enable); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EndTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EndTime\": ")
	if tmp, err := json.Marshal(strct.EndTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IamRole" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IamRole\": ")
	if tmp, err := json.Marshal(strct.IamRole); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NextInvocations" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NextInvocations\": ")
	if tmp, err := json.Marshal(strct.NextInvocations); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Schedule" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Schedule\": ")
	if tmp, err := json.Marshal(strct.Schedule); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ScheduledActionDescription" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ScheduledActionDescription\": ")
	if tmp, err := json.Marshal(strct.ScheduledActionDescription); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ScheduledActionName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ScheduledActionName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ScheduledActionName\": ")
	if tmp, err := json.Marshal(strct.ScheduledActionName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StartTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StartTime\": ")
	if tmp, err := json.Marshal(strct.StartTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "State" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"State\": ")
	if tmp, err := json.Marshal(strct.State); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TargetAction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TargetAction\": ")
	if tmp, err := json.Marshal(strct.TargetAction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ScheduledActionNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Enable":
            if err := json.Unmarshal([]byte(v), &strct.Enable); err != nil {
                return err
             }
        case "EndTime":
            if err := json.Unmarshal([]byte(v), &strct.EndTime); err != nil {
                return err
             }
        case "IamRole":
            if err := json.Unmarshal([]byte(v), &strct.IamRole); err != nil {
                return err
             }
        case "NextInvocations":
            if err := json.Unmarshal([]byte(v), &strct.NextInvocations); err != nil {
                return err
             }
        case "Schedule":
            if err := json.Unmarshal([]byte(v), &strct.Schedule); err != nil {
                return err
             }
        case "ScheduledActionDescription":
            if err := json.Unmarshal([]byte(v), &strct.ScheduledActionDescription); err != nil {
                return err
             }
        case "ScheduledActionName":
            if err := json.Unmarshal([]byte(v), &strct.ScheduledActionName); err != nil {
                return err
             }
            ScheduledActionNameReceived = true
        case "StartTime":
            if err := json.Unmarshal([]byte(v), &strct.StartTime); err != nil {
                return err
             }
        case "State":
            if err := json.Unmarshal([]byte(v), &strct.State); err != nil {
                return err
             }
        case "TargetAction":
            if err := json.Unmarshal([]byte(v), &strct.TargetAction); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ScheduledActionName (a required property) was received
    if !ScheduledActionNameReceived {
        return errors.New("\"ScheduledActionName\" is required but was not present")
    }
    return nil
}

func (strct *ResumeClusterMessage) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ClusterIdentifier" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ClusterIdentifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ClusterIdentifier\": ")
	if tmp, err := json.Marshal(strct.ClusterIdentifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ResumeClusterMessage) UnmarshalJSON(b []byte) error {
    ClusterIdentifierReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ClusterIdentifier":
            if err := json.Unmarshal([]byte(v), &strct.ClusterIdentifier); err != nil {
                return err
             }
            ClusterIdentifierReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ClusterIdentifier (a required property) was received
    if !ClusterIdentifierReceived {
        return errors.New("\"ClusterIdentifier\" is required but was not present")
    }
    return nil
}
