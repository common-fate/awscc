// Code generated by schema-generate. DO NOT EDIT.

package eventsubscription

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// Resource The `AWS::Redshift::EventSubscription` resource creates an Amazon Redshift Event Subscription.
type Resource struct {

  // The name of the Amazon Redshift event notification subscription.
  CustSubscriptionId string `json:"CustSubscriptionId,omitempty"`

  // The AWS account associated with the Amazon Redshift event notification subscription.
  CustomerAwsId string `json:"CustomerAwsId,omitempty"`

  // A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate it.
  Enabled bool `json:"Enabled,omitempty"`

  // Specifies the Amazon Redshift event categories to be published by the event notification subscription.
  EventCategories []string `json:"EventCategories,omitempty"`

  // The list of Amazon Redshift event categories specified in the event notification subscription.
  EventCategoriesList []string `json:"EventCategoriesList,omitempty"`

  // Specifies the Amazon Redshift event severity to be published by the event notification subscription.
  Severity string `json:"Severity,omitempty"`

  // The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications.
  SnsTopicArn string `json:"SnsTopicArn,omitempty"`

  // A list of one or more identifiers of Amazon Redshift source objects.
  SourceIds []string `json:"SourceIds,omitempty"`

  // A list of the sources that publish events to the Amazon Redshift event notification subscription.
  SourceIdsList []string `json:"SourceIdsList,omitempty"`

  // The type of source that will be generating the events.
  SourceType string `json:"SourceType,omitempty"`

  // The status of the Amazon Redshift event notification subscription.
  Status string `json:"Status,omitempty"`

  // The date and time the Amazon Redshift event notification subscription was created.
  SubscriptionCreationTime string `json:"SubscriptionCreationTime,omitempty"`

  // The name of the Amazon Redshift event notification subscription
  SubscriptionName string `json:"SubscriptionName"`

  // An array of key-value pairs to apply to this resource.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CustSubscriptionId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CustSubscriptionId\": ")
	if tmp, err := json.Marshal(strct.CustSubscriptionId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CustomerAwsId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CustomerAwsId\": ")
	if tmp, err := json.Marshal(strct.CustomerAwsId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Enabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enabled\": ")
	if tmp, err := json.Marshal(strct.Enabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EventCategories" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EventCategories\": ")
	if tmp, err := json.Marshal(strct.EventCategories); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EventCategoriesList" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EventCategoriesList\": ")
	if tmp, err := json.Marshal(strct.EventCategoriesList); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Severity" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Severity\": ")
	if tmp, err := json.Marshal(strct.Severity); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SnsTopicArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SnsTopicArn\": ")
	if tmp, err := json.Marshal(strct.SnsTopicArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SourceIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceIds\": ")
	if tmp, err := json.Marshal(strct.SourceIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SourceIdsList" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceIdsList\": ")
	if tmp, err := json.Marshal(strct.SourceIdsList); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceType\": ")
	if tmp, err := json.Marshal(strct.SourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SubscriptionCreationTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubscriptionCreationTime\": ")
	if tmp, err := json.Marshal(strct.SubscriptionCreationTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SubscriptionName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SubscriptionName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubscriptionName\": ")
	if tmp, err := json.Marshal(strct.SubscriptionName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    SubscriptionNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CustSubscriptionId":
            if err := json.Unmarshal([]byte(v), &strct.CustSubscriptionId); err != nil {
                return err
             }
        case "CustomerAwsId":
            if err := json.Unmarshal([]byte(v), &strct.CustomerAwsId); err != nil {
                return err
             }
        case "Enabled":
            if err := json.Unmarshal([]byte(v), &strct.Enabled); err != nil {
                return err
             }
        case "EventCategories":
            if err := json.Unmarshal([]byte(v), &strct.EventCategories); err != nil {
                return err
             }
        case "EventCategoriesList":
            if err := json.Unmarshal([]byte(v), &strct.EventCategoriesList); err != nil {
                return err
             }
        case "Severity":
            if err := json.Unmarshal([]byte(v), &strct.Severity); err != nil {
                return err
             }
        case "SnsTopicArn":
            if err := json.Unmarshal([]byte(v), &strct.SnsTopicArn); err != nil {
                return err
             }
        case "SourceIds":
            if err := json.Unmarshal([]byte(v), &strct.SourceIds); err != nil {
                return err
             }
        case "SourceIdsList":
            if err := json.Unmarshal([]byte(v), &strct.SourceIdsList); err != nil {
                return err
             }
        case "SourceType":
            if err := json.Unmarshal([]byte(v), &strct.SourceType); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "SubscriptionCreationTime":
            if err := json.Unmarshal([]byte(v), &strct.SubscriptionCreationTime); err != nil {
                return err
             }
        case "SubscriptionName":
            if err := json.Unmarshal([]byte(v), &strct.SubscriptionName); err != nil {
                return err
             }
            SubscriptionNameReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SubscriptionName (a required property) was received
    if !SubscriptionNameReceived {
        return errors.New("\"SubscriptionName\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
