// Code generated by schema-generate. DO NOT EDIT.

package flowsource

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Encryption Information about the encryption of the flow.
type Encryption struct {

  // The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
  Algorithm string `json:"Algorithm"`

  // A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
  ConstantInitializationVector string `json:"ConstantInitializationVector,omitempty"`

  // The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
  DeviceId string `json:"DeviceId,omitempty"`

  // The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
  KeyType string `json:"KeyType,omitempty"`

  // The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
  Region string `json:"Region,omitempty"`

  // An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
  ResourceId string `json:"ResourceId,omitempty"`

  // The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
  RoleArn string `json:"RoleArn"`

  //  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
  SecretArn string `json:"SecretArn,omitempty"`

  // The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
  Url string `json:"Url,omitempty"`
}

// Resource Resource schema for AWS::MediaConnect::FlowSource
type Resource struct {

  // The type of encryption that is used on the content ingested from this source.
  Decryption *Encryption `json:"Decryption,omitempty"`

  // A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
  Description string `json:"Description"`

  // The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
  EntitlementArn string `json:"EntitlementArn,omitempty"`

  // The ARN of the flow.
  FlowArn string `json:"FlowArn,omitempty"`

  // The IP address that the flow will be listening on for incoming content.
  IngestIp string `json:"IngestIp,omitempty"`

  // The port that the flow will be listening on for incoming content.
  IngestPort int `json:"IngestPort,omitempty"`

  // The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
  MaxBitrate int `json:"MaxBitrate,omitempty"`

  // The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
  MaxLatency int `json:"MaxLatency,omitempty"`

  // The name of the source.
  Name string `json:"Name"`

  // The protocol that is used by the source.
  Protocol string `json:"Protocol,omitempty"`

  // The ARN of the source.
  SourceArn string `json:"SourceArn,omitempty"`

  // The port that the flow will be listening on for incoming content.(ReadOnly)
  SourceIngestPort string `json:"SourceIngestPort,omitempty"`

  // The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
  StreamId string `json:"StreamId,omitempty"`

  // The name of the VPC Interface this Source is configured with.
  VpcInterfaceName string `json:"VpcInterfaceName,omitempty"`

  // The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
  WhitelistCidr string `json:"WhitelistCidr,omitempty"`
}

func (strct *Encryption) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Algorithm" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Algorithm" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Algorithm\": ")
	if tmp, err := json.Marshal(strct.Algorithm); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ConstantInitializationVector" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConstantInitializationVector\": ")
	if tmp, err := json.Marshal(strct.ConstantInitializationVector); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeviceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeviceId\": ")
	if tmp, err := json.Marshal(strct.DeviceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "KeyType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KeyType\": ")
	if tmp, err := json.Marshal(strct.KeyType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Region" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Region\": ")
	if tmp, err := json.Marshal(strct.Region); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ResourceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceId\": ")
	if tmp, err := json.Marshal(strct.ResourceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecretArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecretArn\": ")
	if tmp, err := json.Marshal(strct.SecretArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Encryption) UnmarshalJSON(b []byte) error {
    AlgorithmReceived := false
    RoleArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Algorithm":
            if err := json.Unmarshal([]byte(v), &strct.Algorithm); err != nil {
                return err
             }
            AlgorithmReceived = true
        case "ConstantInitializationVector":
            if err := json.Unmarshal([]byte(v), &strct.ConstantInitializationVector); err != nil {
                return err
             }
        case "DeviceId":
            if err := json.Unmarshal([]byte(v), &strct.DeviceId); err != nil {
                return err
             }
        case "KeyType":
            if err := json.Unmarshal([]byte(v), &strct.KeyType); err != nil {
                return err
             }
        case "Region":
            if err := json.Unmarshal([]byte(v), &strct.Region); err != nil {
                return err
             }
        case "ResourceId":
            if err := json.Unmarshal([]byte(v), &strct.ResourceId); err != nil {
                return err
             }
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
            RoleArnReceived = true
        case "SecretArn":
            if err := json.Unmarshal([]byte(v), &strct.SecretArn); err != nil {
                return err
             }
        case "Url":
            if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Algorithm (a required property) was received
    if !AlgorithmReceived {
        return errors.New("\"Algorithm\" is required but was not present")
    }
    // check if RoleArn (a required property) was received
    if !RoleArnReceived {
        return errors.New("\"RoleArn\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Decryption" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Decryption\": ")
	if tmp, err := json.Marshal(strct.Decryption); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Description" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EntitlementArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EntitlementArn\": ")
	if tmp, err := json.Marshal(strct.EntitlementArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FlowArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FlowArn\": ")
	if tmp, err := json.Marshal(strct.FlowArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IngestIp" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IngestIp\": ")
	if tmp, err := json.Marshal(strct.IngestIp); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IngestPort" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IngestPort\": ")
	if tmp, err := json.Marshal(strct.IngestPort); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaxBitrate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxBitrate\": ")
	if tmp, err := json.Marshal(strct.MaxBitrate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaxLatency" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxLatency\": ")
	if tmp, err := json.Marshal(strct.MaxLatency); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Protocol" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Protocol\": ")
	if tmp, err := json.Marshal(strct.Protocol); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SourceArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceArn\": ")
	if tmp, err := json.Marshal(strct.SourceArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SourceIngestPort" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceIngestPort\": ")
	if tmp, err := json.Marshal(strct.SourceIngestPort); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StreamId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StreamId\": ")
	if tmp, err := json.Marshal(strct.StreamId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpcInterfaceName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcInterfaceName\": ")
	if tmp, err := json.Marshal(strct.VpcInterfaceName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "WhitelistCidr" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WhitelistCidr\": ")
	if tmp, err := json.Marshal(strct.WhitelistCidr); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DescriptionReceived := false
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Decryption":
            if err := json.Unmarshal([]byte(v), &strct.Decryption); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
            DescriptionReceived = true
        case "EntitlementArn":
            if err := json.Unmarshal([]byte(v), &strct.EntitlementArn); err != nil {
                return err
             }
        case "FlowArn":
            if err := json.Unmarshal([]byte(v), &strct.FlowArn); err != nil {
                return err
             }
        case "IngestIp":
            if err := json.Unmarshal([]byte(v), &strct.IngestIp); err != nil {
                return err
             }
        case "IngestPort":
            if err := json.Unmarshal([]byte(v), &strct.IngestPort); err != nil {
                return err
             }
        case "MaxBitrate":
            if err := json.Unmarshal([]byte(v), &strct.MaxBitrate); err != nil {
                return err
             }
        case "MaxLatency":
            if err := json.Unmarshal([]byte(v), &strct.MaxLatency); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Protocol":
            if err := json.Unmarshal([]byte(v), &strct.Protocol); err != nil {
                return err
             }
        case "SourceArn":
            if err := json.Unmarshal([]byte(v), &strct.SourceArn); err != nil {
                return err
             }
        case "SourceIngestPort":
            if err := json.Unmarshal([]byte(v), &strct.SourceIngestPort); err != nil {
                return err
             }
        case "StreamId":
            if err := json.Unmarshal([]byte(v), &strct.StreamId); err != nil {
                return err
             }
        case "VpcInterfaceName":
            if err := json.Unmarshal([]byte(v), &strct.VpcInterfaceName); err != nil {
                return err
             }
        case "WhitelistCidr":
            if err := json.Unmarshal([]byte(v), &strct.WhitelistCidr); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Description (a required property) was received
    if !DescriptionReceived {
        return errors.New("\"Description\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}
