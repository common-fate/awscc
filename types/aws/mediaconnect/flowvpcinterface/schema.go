// Code generated by schema-generate. DO NOT EDIT.

package flowvpcinterface

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource schema for AWS::MediaConnect::FlowVpcInterface
type Resource struct {

  // The Amazon Resource Name (ARN), a unique identifier for any AWS resource, of the flow.
  FlowArn string `json:"FlowArn"`

  // Immutable and has to be a unique against other VpcInterfaces in this Flow.
  Name string `json:"Name"`

  // IDs of the network interfaces created in customer's account by MediaConnect.
  NetworkInterfaceIds []string `json:"NetworkInterfaceIds,omitempty"`

  // Role Arn MediaConnect can assumes to create ENIs in customer's account.
  RoleArn string `json:"RoleArn"`

  // Security Group IDs to be used on ENI.
  SecurityGroupIds []string `json:"SecurityGroupIds"`

  // Subnet must be in the AZ of the Flow
  SubnetId string `json:"SubnetId"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "FlowArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "FlowArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FlowArn\": ")
	if tmp, err := json.Marshal(strct.FlowArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NetworkInterfaceIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetworkInterfaceIds\": ")
	if tmp, err := json.Marshal(strct.NetworkInterfaceIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecurityGroupIds" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SecurityGroupIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecurityGroupIds\": ")
	if tmp, err := json.Marshal(strct.SecurityGroupIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SubnetId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SubnetId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubnetId\": ")
	if tmp, err := json.Marshal(strct.SubnetId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    FlowArnReceived := false
    NameReceived := false
    RoleArnReceived := false
    SecurityGroupIdsReceived := false
    SubnetIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "FlowArn":
            if err := json.Unmarshal([]byte(v), &strct.FlowArn); err != nil {
                return err
             }
            FlowArnReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "NetworkInterfaceIds":
            if err := json.Unmarshal([]byte(v), &strct.NetworkInterfaceIds); err != nil {
                return err
             }
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
            RoleArnReceived = true
        case "SecurityGroupIds":
            if err := json.Unmarshal([]byte(v), &strct.SecurityGroupIds); err != nil {
                return err
             }
            SecurityGroupIdsReceived = true
        case "SubnetId":
            if err := json.Unmarshal([]byte(v), &strct.SubnetId); err != nil {
                return err
             }
            SubnetIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if FlowArn (a required property) was received
    if !FlowArnReceived {
        return errors.New("\"FlowArn\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if RoleArn (a required property) was received
    if !RoleArnReceived {
        return errors.New("\"RoleArn\" is required but was not present")
    }
    // check if SecurityGroupIds (a required property) was received
    if !SecurityGroupIdsReceived {
        return errors.New("\"SecurityGroupIds\" is required but was not present")
    }
    // check if SubnetId (a required property) was received
    if !SubnetIdReceived {
        return errors.New("\"SubnetId\" is required but was not present")
    }
    return nil
}
