// Code generated by schema-generate. DO NOT EDIT.

package flowentitlement

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Encryption Information about the encryption of the flow.
type Encryption struct {

  // The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
  Algorithm string `json:"Algorithm"`

  // A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
  ConstantInitializationVector string `json:"ConstantInitializationVector,omitempty"`

  // The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
  DeviceId string `json:"DeviceId,omitempty"`

  // The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
  KeyType string `json:"KeyType,omitempty"`

  // The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
  Region string `json:"Region,omitempty"`

  // An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
  ResourceId string `json:"ResourceId,omitempty"`

  // The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
  RoleArn string `json:"RoleArn"`

  //  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
  SecretArn string `json:"SecretArn,omitempty"`

  // The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
  Url string `json:"Url,omitempty"`
}

// Resource Resource schema for AWS::MediaConnect::FlowEntitlement
type Resource struct {

  // Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
  DataTransferSubscriberFeePercent int `json:"DataTransferSubscriberFeePercent,omitempty"`

  // A description of the entitlement.
  Description string `json:"Description"`

  // The type of encryption that will be used on the output that is associated with this entitlement.
  Encryption *Encryption `json:"Encryption,omitempty"`

  // The ARN of the entitlement.
  EntitlementArn string `json:"EntitlementArn,omitempty"`

  //  An indication of whether the entitlement is enabled.
  EntitlementStatus string `json:"EntitlementStatus,omitempty"`

  // The ARN of the flow.
  FlowArn string `json:"FlowArn"`

  // The name of the entitlement.
  Name string `json:"Name"`

  // The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
  Subscribers []string `json:"Subscribers"`
}

func (strct *Encryption) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Algorithm" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Algorithm" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Algorithm\": ")
	if tmp, err := json.Marshal(strct.Algorithm); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ConstantInitializationVector" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConstantInitializationVector\": ")
	if tmp, err := json.Marshal(strct.ConstantInitializationVector); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeviceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeviceId\": ")
	if tmp, err := json.Marshal(strct.DeviceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "KeyType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KeyType\": ")
	if tmp, err := json.Marshal(strct.KeyType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Region" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Region\": ")
	if tmp, err := json.Marshal(strct.Region); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ResourceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceId\": ")
	if tmp, err := json.Marshal(strct.ResourceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecretArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecretArn\": ")
	if tmp, err := json.Marshal(strct.SecretArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Encryption) UnmarshalJSON(b []byte) error {
    AlgorithmReceived := false
    RoleArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Algorithm":
            if err := json.Unmarshal([]byte(v), &strct.Algorithm); err != nil {
                return err
             }
            AlgorithmReceived = true
        case "ConstantInitializationVector":
            if err := json.Unmarshal([]byte(v), &strct.ConstantInitializationVector); err != nil {
                return err
             }
        case "DeviceId":
            if err := json.Unmarshal([]byte(v), &strct.DeviceId); err != nil {
                return err
             }
        case "KeyType":
            if err := json.Unmarshal([]byte(v), &strct.KeyType); err != nil {
                return err
             }
        case "Region":
            if err := json.Unmarshal([]byte(v), &strct.Region); err != nil {
                return err
             }
        case "ResourceId":
            if err := json.Unmarshal([]byte(v), &strct.ResourceId); err != nil {
                return err
             }
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
            RoleArnReceived = true
        case "SecretArn":
            if err := json.Unmarshal([]byte(v), &strct.SecretArn); err != nil {
                return err
             }
        case "Url":
            if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Algorithm (a required property) was received
    if !AlgorithmReceived {
        return errors.New("\"Algorithm\" is required but was not present")
    }
    // check if RoleArn (a required property) was received
    if !RoleArnReceived {
        return errors.New("\"RoleArn\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DataTransferSubscriberFeePercent" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DataTransferSubscriberFeePercent\": ")
	if tmp, err := json.Marshal(strct.DataTransferSubscriberFeePercent); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Description" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Encryption" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Encryption\": ")
	if tmp, err := json.Marshal(strct.Encryption); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EntitlementArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EntitlementArn\": ")
	if tmp, err := json.Marshal(strct.EntitlementArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EntitlementStatus" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EntitlementStatus\": ")
	if tmp, err := json.Marshal(strct.EntitlementStatus); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "FlowArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "FlowArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FlowArn\": ")
	if tmp, err := json.Marshal(strct.FlowArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Subscribers" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Subscribers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Subscribers\": ")
	if tmp, err := json.Marshal(strct.Subscribers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DescriptionReceived := false
    FlowArnReceived := false
    NameReceived := false
    SubscribersReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DataTransferSubscriberFeePercent":
            if err := json.Unmarshal([]byte(v), &strct.DataTransferSubscriberFeePercent); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
            DescriptionReceived = true
        case "Encryption":
            if err := json.Unmarshal([]byte(v), &strct.Encryption); err != nil {
                return err
             }
        case "EntitlementArn":
            if err := json.Unmarshal([]byte(v), &strct.EntitlementArn); err != nil {
                return err
             }
        case "EntitlementStatus":
            if err := json.Unmarshal([]byte(v), &strct.EntitlementStatus); err != nil {
                return err
             }
        case "FlowArn":
            if err := json.Unmarshal([]byte(v), &strct.FlowArn); err != nil {
                return err
             }
            FlowArnReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Subscribers":
            if err := json.Unmarshal([]byte(v), &strct.Subscribers); err != nil {
                return err
             }
            SubscribersReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Description (a required property) was received
    if !DescriptionReceived {
        return errors.New("\"Description\" is required but was not present")
    }
    // check if FlowArn (a required property) was received
    if !FlowArnReceived {
        return errors.New("\"FlowArn\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if Subscribers (a required property) was received
    if !SubscribersReceived {
        return errors.New("\"Subscribers\" is required but was not present")
    }
    return nil
}
