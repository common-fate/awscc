// Code generated by schema-generate. DO NOT EDIT.

package contactchannel

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// Resource Resource Type definition for AWS::SSMContacts::ContactChannel
type Resource struct {

  // The Amazon Resource Name (ARN) of the engagement to a contact channel.
  Arn string `json:"Arn,omitempty"`

  // The details that SSM Incident Manager uses when trying to engage the contact channel.
  ChannelAddress string `json:"ChannelAddress,omitempty"`

  // The device name. String of 6 to 50 alphabetical, numeric, dash, and underscore characters.
  ChannelName string `json:"ChannelName,omitempty"`

  // Device type, which specify notification channel. Currently supported values: ?SMS?, ?VOICE?, ?EMAIL?, ?CHATBOT.
  ChannelType string `json:"ChannelType,omitempty"`

  // ARN of the contact resource
  ContactId string `json:"ContactId,omitempty"`

  // If you want to activate the channel at a later time, you can choose to defer activation. SSM Incident Manager can't engage your contact channel until it has been activated.
  DeferActivation bool `json:"DeferActivation,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ChannelAddress" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ChannelAddress\": ")
	if tmp, err := json.Marshal(strct.ChannelAddress); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ChannelName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ChannelName\": ")
	if tmp, err := json.Marshal(strct.ChannelName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ChannelType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ChannelType\": ")
	if tmp, err := json.Marshal(strct.ChannelType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ContactId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ContactId\": ")
	if tmp, err := json.Marshal(strct.ContactId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeferActivation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeferActivation\": ")
	if tmp, err := json.Marshal(strct.DeferActivation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "ChannelAddress":
            if err := json.Unmarshal([]byte(v), &strct.ChannelAddress); err != nil {
                return err
             }
        case "ChannelName":
            if err := json.Unmarshal([]byte(v), &strct.ChannelName); err != nil {
                return err
             }
        case "ChannelType":
            if err := json.Unmarshal([]byte(v), &strct.ChannelType); err != nil {
                return err
             }
        case "ContactId":
            if err := json.Unmarshal([]byte(v), &strct.ContactId); err != nil {
                return err
             }
        case "DeferActivation":
            if err := json.Unmarshal([]byte(v), &strct.DeferActivation); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
