// Code generated by schema-generate. DO NOT EDIT.

package contact

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// ChannelTargetInfo Information about the contact channel that SSM Incident Manager uses to engage the contact.
type ChannelTargetInfo struct {

  // The Amazon Resource Name (ARN) of the contact channel.
  ChannelId string `json:"ChannelId"`

  // The number of minutes to wait to retry sending engagement in the case the engagement initially fails.
  RetryIntervalInMinutes int `json:"RetryIntervalInMinutes"`
}

// ContactTargetInfo The contact that SSM Incident Manager is engaging during an incident.
type ContactTargetInfo struct {

  // The Amazon Resource Name (ARN) of the contact.
  ContactId string `json:"ContactId"`

  // A Boolean value determining if the contact's acknowledgement stops the progress of stages in the plan.
  IsEssential bool `json:"IsEssential"`
}

// Resource Resource Type definition for AWS::SSMContacts::Contact
type Resource struct {

  // Alias of the contact. String value with 20 to 256 characters. Only alphabetical, numeric characters, dash, or underscore allowed.
  Alias string `json:"Alias"`

  // The Amazon Resource Name (ARN) of the contact.
  Arn string `json:"Arn,omitempty"`

  // Name of the contact. String value with 3 to 256 characters. Only alphabetical, space, numeric characters, dash, or underscore allowed.
  DisplayName string `json:"DisplayName"`

  // The stages that an escalation plan or engagement plan engages contacts and contact methods in.
  Plan []*Stage `json:"Plan"`

  // Contact type, which specify type of contact. Currently supported values: ?PERSONAL?, ?SHARED?, ?OTHER?.
  Type string `json:"Type"`
}

// Stage A set amount of time that an escalation plan or engagement plan engages the specified contacts or contact methods.
type Stage struct {

  // The time to wait until beginning the next stage.
  DurationInMinutes int `json:"DurationInMinutes"`

  // The contacts or contact methods that the escalation plan or engagement plan is engaging.
  Targets []*Targets `json:"Targets,omitempty"`
}

// Targets The contacts or contact methods that the escalation plan or engagement plan is engaging.
type Targets struct {
  ChannelTargetInfo *ChannelTargetInfo `json:"ChannelTargetInfo,omitempty"`
  ContactTargetInfo *ContactTargetInfo `json:"ContactTargetInfo,omitempty"`
}

func (strct *ChannelTargetInfo) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ChannelId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ChannelId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ChannelId\": ")
	if tmp, err := json.Marshal(strct.ChannelId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RetryIntervalInMinutes" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RetryIntervalInMinutes" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RetryIntervalInMinutes\": ")
	if tmp, err := json.Marshal(strct.RetryIntervalInMinutes); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ChannelTargetInfo) UnmarshalJSON(b []byte) error {
    ChannelIdReceived := false
    RetryIntervalInMinutesReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ChannelId":
            if err := json.Unmarshal([]byte(v), &strct.ChannelId); err != nil {
                return err
             }
            ChannelIdReceived = true
        case "RetryIntervalInMinutes":
            if err := json.Unmarshal([]byte(v), &strct.RetryIntervalInMinutes); err != nil {
                return err
             }
            RetryIntervalInMinutesReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ChannelId (a required property) was received
    if !ChannelIdReceived {
        return errors.New("\"ChannelId\" is required but was not present")
    }
    // check if RetryIntervalInMinutes (a required property) was received
    if !RetryIntervalInMinutesReceived {
        return errors.New("\"RetryIntervalInMinutes\" is required but was not present")
    }
    return nil
}

func (strct *ContactTargetInfo) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ContactId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ContactId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ContactId\": ")
	if tmp, err := json.Marshal(strct.ContactId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IsEssential" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IsEssential" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsEssential\": ")
	if tmp, err := json.Marshal(strct.IsEssential); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ContactTargetInfo) UnmarshalJSON(b []byte) error {
    ContactIdReceived := false
    IsEssentialReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ContactId":
            if err := json.Unmarshal([]byte(v), &strct.ContactId); err != nil {
                return err
             }
            ContactIdReceived = true
        case "IsEssential":
            if err := json.Unmarshal([]byte(v), &strct.IsEssential); err != nil {
                return err
             }
            IsEssentialReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ContactId (a required property) was received
    if !ContactIdReceived {
        return errors.New("\"ContactId\" is required but was not present")
    }
    // check if IsEssential (a required property) was received
    if !IsEssentialReceived {
        return errors.New("\"IsEssential\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Alias" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Alias" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Alias\": ")
	if tmp, err := json.Marshal(strct.Alias); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DisplayName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DisplayName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DisplayName\": ")
	if tmp, err := json.Marshal(strct.DisplayName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Plan" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Plan" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Plan\": ")
	if tmp, err := json.Marshal(strct.Plan); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AliasReceived := false
    DisplayNameReceived := false
    PlanReceived := false
    TypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Alias":
            if err := json.Unmarshal([]byte(v), &strct.Alias); err != nil {
                return err
             }
            AliasReceived = true
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "DisplayName":
            if err := json.Unmarshal([]byte(v), &strct.DisplayName); err != nil {
                return err
             }
            DisplayNameReceived = true
        case "Plan":
            if err := json.Unmarshal([]byte(v), &strct.Plan); err != nil {
                return err
             }
            PlanReceived = true
        case "Type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            TypeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Alias (a required property) was received
    if !AliasReceived {
        return errors.New("\"Alias\" is required but was not present")
    }
    // check if DisplayName (a required property) was received
    if !DisplayNameReceived {
        return errors.New("\"DisplayName\" is required but was not present")
    }
    // check if Plan (a required property) was received
    if !PlanReceived {
        return errors.New("\"Plan\" is required but was not present")
    }
    // check if Type (a required property) was received
    if !TypeReceived {
        return errors.New("\"Type\" is required but was not present")
    }
    return nil
}

func (strct *Stage) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "DurationInMinutes" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DurationInMinutes" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DurationInMinutes\": ")
	if tmp, err := json.Marshal(strct.DurationInMinutes); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Targets" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Targets\": ")
	if tmp, err := json.Marshal(strct.Targets); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Stage) UnmarshalJSON(b []byte) error {
    DurationInMinutesReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DurationInMinutes":
            if err := json.Unmarshal([]byte(v), &strct.DurationInMinutes); err != nil {
                return err
             }
            DurationInMinutesReceived = true
        case "Targets":
            if err := json.Unmarshal([]byte(v), &strct.Targets); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DurationInMinutes (a required property) was received
    if !DurationInMinutesReceived {
        return errors.New("\"DurationInMinutes\" is required but was not present")
    }
    return nil
}

func (strct *Targets) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ChannelTargetInfo" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ChannelTargetInfo\": ")
	if tmp, err := json.Marshal(strct.ChannelTargetInfo); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ContactTargetInfo" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ContactTargetInfo\": ")
	if tmp, err := json.Marshal(strct.ContactTargetInfo); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Targets) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ChannelTargetInfo":
            if err := json.Unmarshal([]byte(v), &strct.ChannelTargetInfo); err != nil {
                return err
             }
        case "ContactTargetInfo":
            if err := json.Unmarshal([]byte(v), &strct.ContactTargetInfo); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
