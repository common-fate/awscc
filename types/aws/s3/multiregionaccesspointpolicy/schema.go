// Code generated by schema-generate. DO NOT EDIT.

package multiregionaccesspointpolicy

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// Policy Policy document to apply to a Multi Region Access Point
type Policy struct {
}

// PolicyStatus The Policy Status associated with this Multi Region Access Point
type PolicyStatus struct {

  // Specifies whether the policy is public or not.
  IsPublic string `json:"IsPublic"`
}

// Resource The policy to be attached to a Multi Region Access Point
type Resource struct {

  // The name of the Multi Region Access Point to apply policy
  MrapName string `json:"MrapName"`

  // Policy document to apply to a Multi Region Access Point
  Policy *Policy `json:"Policy"`

  // The Policy Status associated with this Multi Region Access Point
  PolicyStatus *PolicyStatus `json:"PolicyStatus,omitempty"`
}

func (strct *PolicyStatus) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "IsPublic" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IsPublic" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsPublic\": ")
	if tmp, err := json.Marshal(strct.IsPublic); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PolicyStatus) UnmarshalJSON(b []byte) error {
    IsPublicReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "IsPublic":
            if err := json.Unmarshal([]byte(v), &strct.IsPublic); err != nil {
                return err
             }
            IsPublicReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if IsPublic (a required property) was received
    if !IsPublicReceived {
        return errors.New("\"IsPublic\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "MrapName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MrapName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MrapName\": ")
	if tmp, err := json.Marshal(strct.MrapName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Policy" field is required
    if strct.Policy == nil {
        return nil, errors.New("Policy is a required field")
    }
    // Marshal the "Policy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Policy\": ")
	if tmp, err := json.Marshal(strct.Policy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PolicyStatus" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PolicyStatus\": ")
	if tmp, err := json.Marshal(strct.PolicyStatus); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    MrapNameReceived := false
    PolicyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "MrapName":
            if err := json.Unmarshal([]byte(v), &strct.MrapName); err != nil {
                return err
             }
            MrapNameReceived = true
        case "Policy":
            if err := json.Unmarshal([]byte(v), &strct.Policy); err != nil {
                return err
             }
            PolicyReceived = true
        case "PolicyStatus":
            if err := json.Unmarshal([]byte(v), &strct.PolicyStatus); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if MrapName (a required property) was received
    if !MrapNameReceived {
        return errors.New("\"MrapName\" is required but was not present")
    }
    // check if Policy (a required property) was received
    if !PolicyReceived {
        return errors.New("\"Policy\" is required but was not present")
    }
    return nil
}
