// Code generated by schema-generate. DO NOT EDIT.

package serviceaction

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// DefinitionParameter 
type DefinitionParameter struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

// Resource Resource Schema for AWS::ServiceCatalog::ServiceAction
type Resource struct {
  AcceptLanguage string `json:"AcceptLanguage,omitempty"`
  Definition []*DefinitionParameter `json:"Definition"`
  DefinitionType string `json:"DefinitionType"`
  Description string `json:"Description,omitempty"`
  Id string `json:"Id,omitempty"`
  Name string `json:"Name"`
}

func (strct *DefinitionParameter) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DefinitionParameter) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AcceptLanguage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AcceptLanguage\": ")
	if tmp, err := json.Marshal(strct.AcceptLanguage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Definition" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Definition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Definition\": ")
	if tmp, err := json.Marshal(strct.Definition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DefinitionType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DefinitionType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefinitionType\": ")
	if tmp, err := json.Marshal(strct.DefinitionType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DefinitionReceived := false
    DefinitionTypeReceived := false
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AcceptLanguage":
            if err := json.Unmarshal([]byte(v), &strct.AcceptLanguage); err != nil {
                return err
             }
        case "Definition":
            if err := json.Unmarshal([]byte(v), &strct.Definition); err != nil {
                return err
             }
            DefinitionReceived = true
        case "DefinitionType":
            if err := json.Unmarshal([]byte(v), &strct.DefinitionType); err != nil {
                return err
             }
            DefinitionTypeReceived = true
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Definition (a required property) was received
    if !DefinitionReceived {
        return errors.New("\"Definition\" is required but was not present")
    }
    // check if DefinitionType (a required property) was received
    if !DefinitionTypeReceived {
        return errors.New("\"DefinitionType\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}
