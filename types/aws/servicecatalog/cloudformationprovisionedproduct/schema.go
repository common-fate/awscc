// Code generated by schema-generate. DO NOT EDIT.

package cloudformationprovisionedproduct

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Outputs List of key-value pair outputs.
type Outputs struct {
}

// ProvisioningParameter 
type ProvisioningParameter struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

// ProvisioningPreferences 
type ProvisioningPreferences struct {
  StackSetAccounts []string `json:"StackSetAccounts,omitempty"`
  StackSetFailureToleranceCount int `json:"StackSetFailureToleranceCount,omitempty"`
  StackSetFailureTolerancePercentage int `json:"StackSetFailureTolerancePercentage,omitempty"`
  StackSetMaxConcurrencyCount int `json:"StackSetMaxConcurrencyCount,omitempty"`
  StackSetMaxConcurrencyPercentage int `json:"StackSetMaxConcurrencyPercentage,omitempty"`
  StackSetOperationType string `json:"StackSetOperationType,omitempty"`
  StackSetRegions []string `json:"StackSetRegions,omitempty"`
}

// Resource Resource Schema for AWS::ServiceCatalog::CloudFormationProvisionedProduct
type Resource struct {
  AcceptLanguage string `json:"AcceptLanguage,omitempty"`
  CloudformationStackArn string `json:"CloudformationStackArn,omitempty"`
  NotificationArns []string `json:"NotificationArns,omitempty"`

  // List of key-value pair outputs.
  Outputs *Outputs `json:"Outputs,omitempty"`
  PathId string `json:"PathId,omitempty"`
  PathName string `json:"PathName,omitempty"`
  ProductId string `json:"ProductId,omitempty"`
  ProductName string `json:"ProductName,omitempty"`
  ProvisionedProductId string `json:"ProvisionedProductId,omitempty"`
  ProvisionedProductName string `json:"ProvisionedProductName,omitempty"`
  ProvisioningArtifactId string `json:"ProvisioningArtifactId,omitempty"`
  ProvisioningArtifactName string `json:"ProvisioningArtifactName,omitempty"`
  ProvisioningParameters []*ProvisioningParameter `json:"ProvisioningParameters,omitempty"`
  ProvisioningPreferences *ProvisioningPreferences `json:"ProvisioningPreferences,omitempty"`
  RecordId string `json:"RecordId,omitempty"`
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *Outputs) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Outputs) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ProvisioningParameter) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ProvisioningParameter) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *ProvisioningPreferences) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "StackSetAccounts" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StackSetAccounts\": ")
	if tmp, err := json.Marshal(strct.StackSetAccounts); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StackSetFailureToleranceCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StackSetFailureToleranceCount\": ")
	if tmp, err := json.Marshal(strct.StackSetFailureToleranceCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StackSetFailureTolerancePercentage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StackSetFailureTolerancePercentage\": ")
	if tmp, err := json.Marshal(strct.StackSetFailureTolerancePercentage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StackSetMaxConcurrencyCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StackSetMaxConcurrencyCount\": ")
	if tmp, err := json.Marshal(strct.StackSetMaxConcurrencyCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StackSetMaxConcurrencyPercentage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StackSetMaxConcurrencyPercentage\": ")
	if tmp, err := json.Marshal(strct.StackSetMaxConcurrencyPercentage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StackSetOperationType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StackSetOperationType\": ")
	if tmp, err := json.Marshal(strct.StackSetOperationType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StackSetRegions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StackSetRegions\": ")
	if tmp, err := json.Marshal(strct.StackSetRegions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ProvisioningPreferences) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "StackSetAccounts":
            if err := json.Unmarshal([]byte(v), &strct.StackSetAccounts); err != nil {
                return err
             }
        case "StackSetFailureToleranceCount":
            if err := json.Unmarshal([]byte(v), &strct.StackSetFailureToleranceCount); err != nil {
                return err
             }
        case "StackSetFailureTolerancePercentage":
            if err := json.Unmarshal([]byte(v), &strct.StackSetFailureTolerancePercentage); err != nil {
                return err
             }
        case "StackSetMaxConcurrencyCount":
            if err := json.Unmarshal([]byte(v), &strct.StackSetMaxConcurrencyCount); err != nil {
                return err
             }
        case "StackSetMaxConcurrencyPercentage":
            if err := json.Unmarshal([]byte(v), &strct.StackSetMaxConcurrencyPercentage); err != nil {
                return err
             }
        case "StackSetOperationType":
            if err := json.Unmarshal([]byte(v), &strct.StackSetOperationType); err != nil {
                return err
             }
        case "StackSetRegions":
            if err := json.Unmarshal([]byte(v), &strct.StackSetRegions); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AcceptLanguage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AcceptLanguage\": ")
	if tmp, err := json.Marshal(strct.AcceptLanguage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CloudformationStackArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CloudformationStackArn\": ")
	if tmp, err := json.Marshal(strct.CloudformationStackArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NotificationArns" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NotificationArns\": ")
	if tmp, err := json.Marshal(strct.NotificationArns); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Outputs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Outputs\": ")
	if tmp, err := json.Marshal(strct.Outputs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PathId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PathId\": ")
	if tmp, err := json.Marshal(strct.PathId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PathName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PathName\": ")
	if tmp, err := json.Marshal(strct.PathName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProductId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProductId\": ")
	if tmp, err := json.Marshal(strct.ProductId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProductName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProductName\": ")
	if tmp, err := json.Marshal(strct.ProductName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProvisionedProductId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProvisionedProductId\": ")
	if tmp, err := json.Marshal(strct.ProvisionedProductId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProvisionedProductName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProvisionedProductName\": ")
	if tmp, err := json.Marshal(strct.ProvisionedProductName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProvisioningArtifactId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProvisioningArtifactId\": ")
	if tmp, err := json.Marshal(strct.ProvisioningArtifactId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProvisioningArtifactName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProvisioningArtifactName\": ")
	if tmp, err := json.Marshal(strct.ProvisioningArtifactName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProvisioningParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProvisioningParameters\": ")
	if tmp, err := json.Marshal(strct.ProvisioningParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProvisioningPreferences" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProvisioningPreferences\": ")
	if tmp, err := json.Marshal(strct.ProvisioningPreferences); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RecordId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RecordId\": ")
	if tmp, err := json.Marshal(strct.RecordId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AcceptLanguage":
            if err := json.Unmarshal([]byte(v), &strct.AcceptLanguage); err != nil {
                return err
             }
        case "CloudformationStackArn":
            if err := json.Unmarshal([]byte(v), &strct.CloudformationStackArn); err != nil {
                return err
             }
        case "NotificationArns":
            if err := json.Unmarshal([]byte(v), &strct.NotificationArns); err != nil {
                return err
             }
        case "Outputs":
            if err := json.Unmarshal([]byte(v), &strct.Outputs); err != nil {
                return err
             }
        case "PathId":
            if err := json.Unmarshal([]byte(v), &strct.PathId); err != nil {
                return err
             }
        case "PathName":
            if err := json.Unmarshal([]byte(v), &strct.PathName); err != nil {
                return err
             }
        case "ProductId":
            if err := json.Unmarshal([]byte(v), &strct.ProductId); err != nil {
                return err
             }
        case "ProductName":
            if err := json.Unmarshal([]byte(v), &strct.ProductName); err != nil {
                return err
             }
        case "ProvisionedProductId":
            if err := json.Unmarshal([]byte(v), &strct.ProvisionedProductId); err != nil {
                return err
             }
        case "ProvisionedProductName":
            if err := json.Unmarshal([]byte(v), &strct.ProvisionedProductName); err != nil {
                return err
             }
        case "ProvisioningArtifactId":
            if err := json.Unmarshal([]byte(v), &strct.ProvisioningArtifactId); err != nil {
                return err
             }
        case "ProvisioningArtifactName":
            if err := json.Unmarshal([]byte(v), &strct.ProvisioningArtifactName); err != nil {
                return err
             }
        case "ProvisioningParameters":
            if err := json.Unmarshal([]byte(v), &strct.ProvisioningParameters); err != nil {
                return err
             }
        case "ProvisioningPreferences":
            if err := json.Unmarshal([]byte(v), &strct.ProvisioningPreferences); err != nil {
                return err
             }
        case "RecordId":
            if err := json.Unmarshal([]byte(v), &strct.RecordId); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
