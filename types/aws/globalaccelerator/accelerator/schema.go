// Code generated by schema-generate. DO NOT EDIT.

package accelerator

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource Type definition for AWS::GlobalAccelerator::Accelerator
type Resource struct {

  // The Amazon Resource Name (ARN) of the accelerator.
  AcceleratorArn string `json:"AcceleratorArn,omitempty"`

  // The Domain Name System (DNS) name that Global Accelerator creates that points to your accelerator's static IPv4 addresses.
  DnsName string `json:"DnsName,omitempty"`

  // The Domain Name System (DNS) name that Global Accelerator creates that points to your accelerator's static IPv4 and IPv6 addresses.
  DualStackDnsName string `json:"DualStackDnsName,omitempty"`

  // Indicates whether an accelerator is enabled. The value is true or false.
  Enabled bool `json:"Enabled,omitempty"`

  // IP Address type.
  IpAddressType string `json:"IpAddressType,omitempty"`

  // The IP addresses from BYOIP Prefix pool.
  IpAddresses []string `json:"IpAddresses,omitempty"`

  // The IPv4 addresses assigned to the accelerator.
  Ipv4Addresses []string `json:"Ipv4Addresses,omitempty"`

  // The IPv6 addresses assigned if the accelerator is dualstack
  Ipv6Addresses []string `json:"Ipv6Addresses,omitempty"`

  // Name of accelerator.
  Name string `json:"Name"`
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag Tag is a key-value pair associated with accelerator.
type Tag struct {

  // Key of the tag. Value can be 1 to 127 characters.
  Key string `json:"Key"`

  // Value for the tag. Value can be 1 to 255 characters.
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AcceleratorArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AcceleratorArn\": ")
	if tmp, err := json.Marshal(strct.AcceleratorArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DnsName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DnsName\": ")
	if tmp, err := json.Marshal(strct.DnsName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DualStackDnsName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DualStackDnsName\": ")
	if tmp, err := json.Marshal(strct.DualStackDnsName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Enabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enabled\": ")
	if tmp, err := json.Marshal(strct.Enabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IpAddressType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IpAddressType\": ")
	if tmp, err := json.Marshal(strct.IpAddressType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IpAddresses" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IpAddresses\": ")
	if tmp, err := json.Marshal(strct.IpAddresses); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Ipv4Addresses" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Ipv4Addresses\": ")
	if tmp, err := json.Marshal(strct.Ipv4Addresses); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Ipv6Addresses" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Ipv6Addresses\": ")
	if tmp, err := json.Marshal(strct.Ipv6Addresses); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AcceleratorArn":
            if err := json.Unmarshal([]byte(v), &strct.AcceleratorArn); err != nil {
                return err
             }
        case "DnsName":
            if err := json.Unmarshal([]byte(v), &strct.DnsName); err != nil {
                return err
             }
        case "DualStackDnsName":
            if err := json.Unmarshal([]byte(v), &strct.DualStackDnsName); err != nil {
                return err
             }
        case "Enabled":
            if err := json.Unmarshal([]byte(v), &strct.Enabled); err != nil {
                return err
             }
        case "IpAddressType":
            if err := json.Unmarshal([]byte(v), &strct.IpAddressType); err != nil {
                return err
             }
        case "IpAddresses":
            if err := json.Unmarshal([]byte(v), &strct.IpAddresses); err != nil {
                return err
             }
        case "Ipv4Addresses":
            if err := json.Unmarshal([]byte(v), &strct.Ipv4Addresses); err != nil {
                return err
             }
        case "Ipv6Addresses":
            if err := json.Unmarshal([]byte(v), &strct.Ipv6Addresses); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
