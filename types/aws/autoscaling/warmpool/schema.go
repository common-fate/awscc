// Code generated by schema-generate. DO NOT EDIT.

package warmpool

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// InstanceReusePolicy 
type InstanceReusePolicy struct {
  ReuseOnScaleIn bool `json:"ReuseOnScaleIn,omitempty"`
}

// Resource Resource schema for AWS::AutoScaling::WarmPool.
type Resource struct {
  AutoScalingGroupName string `json:"AutoScalingGroupName"`
  InstanceReusePolicy *InstanceReusePolicy `json:"InstanceReusePolicy,omitempty"`
  MaxGroupPreparedCapacity int `json:"MaxGroupPreparedCapacity,omitempty"`
  MinSize int `json:"MinSize,omitempty"`
  PoolState string `json:"PoolState,omitempty"`
}

func (strct *InstanceReusePolicy) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ReuseOnScaleIn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ReuseOnScaleIn\": ")
	if tmp, err := json.Marshal(strct.ReuseOnScaleIn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *InstanceReusePolicy) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ReuseOnScaleIn":
            if err := json.Unmarshal([]byte(v), &strct.ReuseOnScaleIn); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AutoScalingGroupName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AutoScalingGroupName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AutoScalingGroupName\": ")
	if tmp, err := json.Marshal(strct.AutoScalingGroupName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InstanceReusePolicy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceReusePolicy\": ")
	if tmp, err := json.Marshal(strct.InstanceReusePolicy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaxGroupPreparedCapacity" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxGroupPreparedCapacity\": ")
	if tmp, err := json.Marshal(strct.MaxGroupPreparedCapacity); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MinSize" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MinSize\": ")
	if tmp, err := json.Marshal(strct.MinSize); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PoolState" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PoolState\": ")
	if tmp, err := json.Marshal(strct.PoolState); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AutoScalingGroupNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AutoScalingGroupName":
            if err := json.Unmarshal([]byte(v), &strct.AutoScalingGroupName); err != nil {
                return err
             }
            AutoScalingGroupNameReceived = true
        case "InstanceReusePolicy":
            if err := json.Unmarshal([]byte(v), &strct.InstanceReusePolicy); err != nil {
                return err
             }
        case "MaxGroupPreparedCapacity":
            if err := json.Unmarshal([]byte(v), &strct.MaxGroupPreparedCapacity); err != nil {
                return err
             }
        case "MinSize":
            if err := json.Unmarshal([]byte(v), &strct.MinSize); err != nil {
                return err
             }
        case "PoolState":
            if err := json.Unmarshal([]byte(v), &strct.PoolState); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AutoScalingGroupName (a required property) was received
    if !AutoScalingGroupNameReceived {
        return errors.New("\"AutoScalingGroupName\" is required but was not present")
    }
    return nil
}
