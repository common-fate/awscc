// Code generated by schema-generate. DO NOT EDIT.

package lifecyclehook

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Resource Resource Type definition for AWS::AutoScaling::LifecycleHook
type Resource struct {

  // The name of the Auto Scaling group for the lifecycle hook.
  AutoScalingGroupName string `json:"AutoScalingGroupName"`

  // The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The valid values are CONTINUE and ABANDON (default).
  DefaultResult string `json:"DefaultResult,omitempty"`

  // The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds. The default value is 3600 seconds (1 hour). If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the DefaultResult property.
  HeartbeatTimeout int `json:"HeartbeatTimeout,omitempty"`

  // The name of the lifecycle hook.
  LifecycleHookName string `json:"LifecycleHookName,omitempty"`

  // The instance state to which you want to attach the lifecycle hook.
  LifecycleTransition string `json:"LifecycleTransition"`

  // Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the notification target.
  NotificationMetadata string `json:"NotificationMetadata,omitempty"`

  // The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. You can specify an Amazon SQS queue or an Amazon SNS topic. The notification message includes the following information: lifecycle action token, user account ID, Auto Scaling group name, lifecycle hook name, instance ID, lifecycle transition, and notification metadata.
  NotificationTargetARN string `json:"NotificationTargetARN,omitempty"`

  // The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.
  RoleARN string `json:"RoleARN,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AutoScalingGroupName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AutoScalingGroupName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AutoScalingGroupName\": ")
	if tmp, err := json.Marshal(strct.AutoScalingGroupName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DefaultResult" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultResult\": ")
	if tmp, err := json.Marshal(strct.DefaultResult); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HeartbeatTimeout" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HeartbeatTimeout\": ")
	if tmp, err := json.Marshal(strct.HeartbeatTimeout); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LifecycleHookName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LifecycleHookName\": ")
	if tmp, err := json.Marshal(strct.LifecycleHookName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "LifecycleTransition" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LifecycleTransition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LifecycleTransition\": ")
	if tmp, err := json.Marshal(strct.LifecycleTransition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NotificationMetadata" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NotificationMetadata\": ")
	if tmp, err := json.Marshal(strct.NotificationMetadata); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NotificationTargetARN" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NotificationTargetARN\": ")
	if tmp, err := json.Marshal(strct.NotificationTargetARN); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RoleARN" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleARN\": ")
	if tmp, err := json.Marshal(strct.RoleARN); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AutoScalingGroupNameReceived := false
    LifecycleTransitionReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AutoScalingGroupName":
            if err := json.Unmarshal([]byte(v), &strct.AutoScalingGroupName); err != nil {
                return err
             }
            AutoScalingGroupNameReceived = true
        case "DefaultResult":
            if err := json.Unmarshal([]byte(v), &strct.DefaultResult); err != nil {
                return err
             }
        case "HeartbeatTimeout":
            if err := json.Unmarshal([]byte(v), &strct.HeartbeatTimeout); err != nil {
                return err
             }
        case "LifecycleHookName":
            if err := json.Unmarshal([]byte(v), &strct.LifecycleHookName); err != nil {
                return err
             }
        case "LifecycleTransition":
            if err := json.Unmarshal([]byte(v), &strct.LifecycleTransition); err != nil {
                return err
             }
            LifecycleTransitionReceived = true
        case "NotificationMetadata":
            if err := json.Unmarshal([]byte(v), &strct.NotificationMetadata); err != nil {
                return err
             }
        case "NotificationTargetARN":
            if err := json.Unmarshal([]byte(v), &strct.NotificationTargetARN); err != nil {
                return err
             }
        case "RoleARN":
            if err := json.Unmarshal([]byte(v), &strct.RoleARN); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AutoScalingGroupName (a required property) was received
    if !AutoScalingGroupNameReceived {
        return errors.New("\"AutoScalingGroupName\" is required but was not present")
    }
    // check if LifecycleTransition (a required property) was received
    if !LifecycleTransitionReceived {
        return errors.New("\"LifecycleTransition\" is required but was not present")
    }
    return nil
}
