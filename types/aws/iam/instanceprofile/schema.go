// Code generated by schema-generate. DO NOT EDIT.

package instanceprofile

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource Type definition for AWS::IAM::InstanceProfile
type Resource struct {

  // The Amazon Resource Name (ARN) of the instance profile.
  Arn string `json:"Arn,omitempty"`

  // The name of the instance profile to create.
  InstanceProfileName string `json:"InstanceProfileName,omitempty"`

  // The path to the instance profile.
  Path string `json:"Path,omitempty"`

  // The name of the role to associate with the instance profile. Only one role can be assigned to an EC2 instance at a time, and all applications on the instance share the same role and permissions.
  Roles []string `json:"Roles"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InstanceProfileName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceProfileName\": ")
	if tmp, err := json.Marshal(strct.InstanceProfileName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Path" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Path\": ")
	if tmp, err := json.Marshal(strct.Path); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Roles" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Roles" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Roles\": ")
	if tmp, err := json.Marshal(strct.Roles); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    RolesReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "InstanceProfileName":
            if err := json.Unmarshal([]byte(v), &strct.InstanceProfileName); err != nil {
                return err
             }
        case "Path":
            if err := json.Unmarshal([]byte(v), &strct.Path); err != nil {
                return err
             }
        case "Roles":
            if err := json.Unmarshal([]byte(v), &strct.Roles); err != nil {
                return err
             }
            RolesReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Roles (a required property) was received
    if !RolesReceived {
        return errors.New("\"Roles\" is required but was not present")
    }
    return nil
}
