// Code generated by schema-generate. DO NOT EDIT.

package webaclassociation

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Associates WebACL to Application Load Balancer, CloudFront or API Gateway.
type Resource struct {
  ResourceArn string `json:"ResourceArn"`
  WebACLArn string `json:"WebACLArn"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ResourceArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ResourceArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceArn\": ")
	if tmp, err := json.Marshal(strct.ResourceArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "WebACLArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "WebACLArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WebACLArn\": ")
	if tmp, err := json.Marshal(strct.WebACLArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ResourceArnReceived := false
    WebACLArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ResourceArn":
            if err := json.Unmarshal([]byte(v), &strct.ResourceArn); err != nil {
                return err
             }
            ResourceArnReceived = true
        case "WebACLArn":
            if err := json.Unmarshal([]byte(v), &strct.WebACLArn); err != nil {
                return err
             }
            WebACLArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ResourceArn (a required property) was received
    if !ResourceArnReceived {
        return errors.New("\"ResourceArn\" is required but was not present")
    }
    // check if WebACLArn (a required property) was received
    if !WebACLArnReceived {
        return errors.New("\"WebACLArn\" is required but was not present")
    }
    return nil
}
