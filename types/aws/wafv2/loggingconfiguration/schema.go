// Code generated by schema-generate. DO NOT EDIT.

package loggingconfiguration

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// ActionCondition A single action condition.
type ActionCondition struct {

  // Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
  Action string `json:"Action"`
}

// All Match all of the elements. See also MatchScope in JsonBody. You must specify either this setting or the IncludedPaths setting, but not both.
type All struct {
}

// Condition 
type Condition struct {

  // A single action condition.
  ActionCondition *ActionCondition `json:"ActionCondition,omitempty"`

  // A single label name condition.
  LabelNameCondition *LabelNameCondition `json:"LabelNameCondition,omitempty"`
}

// FieldToMatch A key-value pair to associate with a resource.
type FieldToMatch struct {

  // Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 
  JsonBody *JsonBody `json:"JsonBody,omitempty"`

  // Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 
  Method *Method `json:"Method,omitempty"`

  // Inspect the query string. This is the part of a URL that appears after a ? character, if any. 
  QueryString *QueryString `json:"QueryString,omitempty"`

  // Inspect a single header. Provide the name of the header to inspect, for example, User-Agent or Referer. This setting isn't case sensitive.
  SingleHeader *SingleHeader `json:"SingleHeader,omitempty"`

  // Inspect the request URI path. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg. 
  UriPath *UriPath `json:"UriPath,omitempty"`
}

// Filter 
type Filter struct {

  // How to handle logs that satisfy the filter's conditions and requirement. 
  Behavior string `json:"Behavior"`

  // Match conditions for the filter.
  Conditions []*Condition `json:"Conditions"`

  // Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
  Requirement string `json:"Requirement"`
}

// JsonBody Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 
type JsonBody struct {

  // What AWS WAF should do if it fails to completely parse the JSON body.
  InvalidFallbackBehavior string `json:"InvalidFallbackBehavior,omitempty"`

  // The patterns to look for in the JSON body. AWS WAF inspects the results of these pattern matches against the rule inspection criteria. 
  MatchPattern *MatchPattern `json:"MatchPattern"`

  // The parts of the JSON to match against using the MatchPattern. If you specify All, AWS WAF matches against keys and values. 
  MatchScope string `json:"MatchScope"`
}

// LabelNameCondition A single label name condition.
type LabelNameCondition struct {

  // The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. 
  LabelName string `json:"LabelName"`
}

// LoggingFilter Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.
type LoggingFilter struct {

  // Default handling for logs that don't match any of the specified filtering conditions.
  DefaultBehavior string `json:"DefaultBehavior"`

  // The filters that you want to apply to the logs.
  Filters []*Filter `json:"Filters"`
}

// MatchPattern The patterns to look for in the JSON body. AWS WAF inspects the results of these pattern matches against the rule inspection criteria. 
type MatchPattern struct {

  // Match all of the elements. See also MatchScope in JsonBody. You must specify either this setting or the IncludedPaths setting, but not both.
  All *All `json:"All,omitempty"`

  // Match only the specified include paths. See also MatchScope in JsonBody.
  IncludedPaths []string `json:"IncludedPaths,omitempty"`
}

// Method Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 
type Method struct {
}

// QueryString Inspect the query string. This is the part of a URL that appears after a ? character, if any. 
type QueryString struct {
}

// Resource A WAFv2 Logging Configuration Resource Provider
type Resource struct {

  // The Amazon Resource Names (ARNs) of the logging destinations that you want to associate with the web ACL.
  LogDestinationConfigs []string `json:"LogDestinationConfigs"`

  // Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.
  LoggingFilter *LoggingFilter `json:"LoggingFilter,omitempty"`

  // Indicates whether the logging configuration was created by AWS Firewall Manager, as part of an AWS WAF policy configuration. If true, only Firewall Manager can modify or delete the configuration.
  ManagedByFirewallManager bool `json:"ManagedByFirewallManager,omitempty"`

  // The parts of the request that you want to keep out of the logs. For example, if you redact the HEADER field, the HEADER field in the firehose will be xxx.
  RedactedFields []*FieldToMatch `json:"RedactedFields,omitempty"`

  // The Amazon Resource Name (ARN) of the web ACL that you want to associate with LogDestinationConfigs.
  ResourceArn string `json:"ResourceArn"`
}

// SingleHeader Inspect a single header. Provide the name of the header to inspect, for example, User-Agent or Referer. This setting isn't case sensitive.
type SingleHeader struct {

  // The name of the query header to inspect.
  Name string `json:"Name"`
}

// UriPath Inspect the request URI path. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg. 
type UriPath struct {
}

func (strct *ActionCondition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Action" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Action" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Action\": ")
	if tmp, err := json.Marshal(strct.Action); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ActionCondition) UnmarshalJSON(b []byte) error {
    ActionReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Action":
            if err := json.Unmarshal([]byte(v), &strct.Action); err != nil {
                return err
             }
            ActionReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Action (a required property) was received
    if !ActionReceived {
        return errors.New("\"Action\" is required but was not present")
    }
    return nil
}

func (strct *Condition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ActionCondition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ActionCondition\": ")
	if tmp, err := json.Marshal(strct.ActionCondition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LabelNameCondition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LabelNameCondition\": ")
	if tmp, err := json.Marshal(strct.LabelNameCondition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Condition) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ActionCondition":
            if err := json.Unmarshal([]byte(v), &strct.ActionCondition); err != nil {
                return err
             }
        case "LabelNameCondition":
            if err := json.Unmarshal([]byte(v), &strct.LabelNameCondition); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *FieldToMatch) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "JsonBody" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"JsonBody\": ")
	if tmp, err := json.Marshal(strct.JsonBody); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Method" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Method\": ")
	if tmp, err := json.Marshal(strct.Method); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "QueryString" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"QueryString\": ")
	if tmp, err := json.Marshal(strct.QueryString); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SingleHeader" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SingleHeader\": ")
	if tmp, err := json.Marshal(strct.SingleHeader); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UriPath" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UriPath\": ")
	if tmp, err := json.Marshal(strct.UriPath); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *FieldToMatch) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "JsonBody":
            if err := json.Unmarshal([]byte(v), &strct.JsonBody); err != nil {
                return err
             }
        case "Method":
            if err := json.Unmarshal([]byte(v), &strct.Method); err != nil {
                return err
             }
        case "QueryString":
            if err := json.Unmarshal([]byte(v), &strct.QueryString); err != nil {
                return err
             }
        case "SingleHeader":
            if err := json.Unmarshal([]byte(v), &strct.SingleHeader); err != nil {
                return err
             }
        case "UriPath":
            if err := json.Unmarshal([]byte(v), &strct.UriPath); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Filter) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Behavior" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Behavior" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Behavior\": ")
	if tmp, err := json.Marshal(strct.Behavior); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Conditions" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Conditions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Conditions\": ")
	if tmp, err := json.Marshal(strct.Conditions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Requirement" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Requirement" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Requirement\": ")
	if tmp, err := json.Marshal(strct.Requirement); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Filter) UnmarshalJSON(b []byte) error {
    BehaviorReceived := false
    ConditionsReceived := false
    RequirementReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Behavior":
            if err := json.Unmarshal([]byte(v), &strct.Behavior); err != nil {
                return err
             }
            BehaviorReceived = true
        case "Conditions":
            if err := json.Unmarshal([]byte(v), &strct.Conditions); err != nil {
                return err
             }
            ConditionsReceived = true
        case "Requirement":
            if err := json.Unmarshal([]byte(v), &strct.Requirement); err != nil {
                return err
             }
            RequirementReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Behavior (a required property) was received
    if !BehaviorReceived {
        return errors.New("\"Behavior\" is required but was not present")
    }
    // check if Conditions (a required property) was received
    if !ConditionsReceived {
        return errors.New("\"Conditions\" is required but was not present")
    }
    // check if Requirement (a required property) was received
    if !RequirementReceived {
        return errors.New("\"Requirement\" is required but was not present")
    }
    return nil
}

func (strct *JsonBody) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "InvalidFallbackBehavior" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InvalidFallbackBehavior\": ")
	if tmp, err := json.Marshal(strct.InvalidFallbackBehavior); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MatchPattern" field is required
    if strct.MatchPattern == nil {
        return nil, errors.New("MatchPattern is a required field")
    }
    // Marshal the "MatchPattern" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MatchPattern\": ")
	if tmp, err := json.Marshal(strct.MatchPattern); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MatchScope" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MatchScope" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MatchScope\": ")
	if tmp, err := json.Marshal(strct.MatchScope); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *JsonBody) UnmarshalJSON(b []byte) error {
    MatchPatternReceived := false
    MatchScopeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "InvalidFallbackBehavior":
            if err := json.Unmarshal([]byte(v), &strct.InvalidFallbackBehavior); err != nil {
                return err
             }
        case "MatchPattern":
            if err := json.Unmarshal([]byte(v), &strct.MatchPattern); err != nil {
                return err
             }
            MatchPatternReceived = true
        case "MatchScope":
            if err := json.Unmarshal([]byte(v), &strct.MatchScope); err != nil {
                return err
             }
            MatchScopeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if MatchPattern (a required property) was received
    if !MatchPatternReceived {
        return errors.New("\"MatchPattern\" is required but was not present")
    }
    // check if MatchScope (a required property) was received
    if !MatchScopeReceived {
        return errors.New("\"MatchScope\" is required but was not present")
    }
    return nil
}

func (strct *LabelNameCondition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "LabelName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LabelName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LabelName\": ")
	if tmp, err := json.Marshal(strct.LabelName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *LabelNameCondition) UnmarshalJSON(b []byte) error {
    LabelNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "LabelName":
            if err := json.Unmarshal([]byte(v), &strct.LabelName); err != nil {
                return err
             }
            LabelNameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if LabelName (a required property) was received
    if !LabelNameReceived {
        return errors.New("\"LabelName\" is required but was not present")
    }
    return nil
}

func (strct *LoggingFilter) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "DefaultBehavior" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DefaultBehavior" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultBehavior\": ")
	if tmp, err := json.Marshal(strct.DefaultBehavior); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Filters" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Filters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Filters\": ")
	if tmp, err := json.Marshal(strct.Filters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *LoggingFilter) UnmarshalJSON(b []byte) error {
    DefaultBehaviorReceived := false
    FiltersReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DefaultBehavior":
            if err := json.Unmarshal([]byte(v), &strct.DefaultBehavior); err != nil {
                return err
             }
            DefaultBehaviorReceived = true
        case "Filters":
            if err := json.Unmarshal([]byte(v), &strct.Filters); err != nil {
                return err
             }
            FiltersReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DefaultBehavior (a required property) was received
    if !DefaultBehaviorReceived {
        return errors.New("\"DefaultBehavior\" is required but was not present")
    }
    // check if Filters (a required property) was received
    if !FiltersReceived {
        return errors.New("\"Filters\" is required but was not present")
    }
    return nil
}

func (strct *MatchPattern) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "All" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"All\": ")
	if tmp, err := json.Marshal(strct.All); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IncludedPaths" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IncludedPaths\": ")
	if tmp, err := json.Marshal(strct.IncludedPaths); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MatchPattern) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "All":
            if err := json.Unmarshal([]byte(v), &strct.All); err != nil {
                return err
             }
        case "IncludedPaths":
            if err := json.Unmarshal([]byte(v), &strct.IncludedPaths); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "LogDestinationConfigs" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LogDestinationConfigs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LogDestinationConfigs\": ")
	if tmp, err := json.Marshal(strct.LogDestinationConfigs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoggingFilter" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoggingFilter\": ")
	if tmp, err := json.Marshal(strct.LoggingFilter); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ManagedByFirewallManager" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ManagedByFirewallManager\": ")
	if tmp, err := json.Marshal(strct.ManagedByFirewallManager); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RedactedFields" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RedactedFields\": ")
	if tmp, err := json.Marshal(strct.RedactedFields); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ResourceArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceArn\": ")
	if tmp, err := json.Marshal(strct.ResourceArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    LogDestinationConfigsReceived := false
    ResourceArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "LogDestinationConfigs":
            if err := json.Unmarshal([]byte(v), &strct.LogDestinationConfigs); err != nil {
                return err
             }
            LogDestinationConfigsReceived = true
        case "LoggingFilter":
            if err := json.Unmarshal([]byte(v), &strct.LoggingFilter); err != nil {
                return err
             }
        case "ManagedByFirewallManager":
            if err := json.Unmarshal([]byte(v), &strct.ManagedByFirewallManager); err != nil {
                return err
             }
        case "RedactedFields":
            if err := json.Unmarshal([]byte(v), &strct.RedactedFields); err != nil {
                return err
             }
        case "ResourceArn":
            if err := json.Unmarshal([]byte(v), &strct.ResourceArn); err != nil {
                return err
             }
            ResourceArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if LogDestinationConfigs (a required property) was received
    if !LogDestinationConfigsReceived {
        return errors.New("\"LogDestinationConfigs\" is required but was not present")
    }
    // check if ResourceArn (a required property) was received
    if !ResourceArnReceived {
        return errors.New("\"ResourceArn\" is required but was not present")
    }
    return nil
}

func (strct *SingleHeader) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SingleHeader) UnmarshalJSON(b []byte) error {
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}
