// Code generated by schema-generate. DO NOT EDIT.

package ipset

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// Resource Contains a list of IP addresses. This can be either IPV4 or IPV6. The list will be mutually
type Resource struct {

  // List of IPAddresses.
  Addresses []string `json:"Addresses"`
  Arn string `json:"Arn,omitempty"`
  Description string `json:"Description,omitempty"`
  IPAddressVersion string `json:"IPAddressVersion"`
  Id string `json:"Id,omitempty"`
  Name string `json:"Name,omitempty"`
  Scope string `json:"Scope"`
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key,omitempty"`
  Value string `json:"Value,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Addresses" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Addresses" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Addresses\": ")
	if tmp, err := json.Marshal(strct.Addresses); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IPAddressVersion" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IPAddressVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IPAddressVersion\": ")
	if tmp, err := json.Marshal(strct.IPAddressVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Scope" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Scope" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Scope\": ")
	if tmp, err := json.Marshal(strct.Scope); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AddressesReceived := false
    IPAddressVersionReceived := false
    ScopeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Addresses":
            if err := json.Unmarshal([]byte(v), &strct.Addresses); err != nil {
                return err
             }
            AddressesReceived = true
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "IPAddressVersion":
            if err := json.Unmarshal([]byte(v), &strct.IPAddressVersion); err != nil {
                return err
             }
            IPAddressVersionReceived = true
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "Scope":
            if err := json.Unmarshal([]byte(v), &strct.Scope); err != nil {
                return err
             }
            ScopeReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Addresses (a required property) was received
    if !AddressesReceived {
        return errors.New("\"Addresses\" is required but was not present")
    }
    // check if IPAddressVersion (a required property) was received
    if !IPAddressVersionReceived {
        return errors.New("\"IPAddressVersion\" is required but was not present")
    }
    // check if Scope (a required property) was received
    if !ScopeReceived {
        return errors.New("\"Scope\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
