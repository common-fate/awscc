// Code generated by schema-generate. DO NOT EDIT.

package inapptemplate

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// BodyConfig 
type BodyConfig struct {
  Alignment string `json:"Alignment,omitempty"`
  Body string `json:"Body,omitempty"`
  TextColor string `json:"TextColor,omitempty"`
}

// ButtonConfig 
type ButtonConfig struct {
  Android *OverrideButtonConfiguration `json:"Android,omitempty"`
  DefaultConfig *DefaultButtonConfiguration `json:"DefaultConfig,omitempty"`
  IOS *OverrideButtonConfiguration `json:"IOS,omitempty"`
  Web *OverrideButtonConfiguration `json:"Web,omitempty"`
}

// CustomConfig 
type CustomConfig struct {
}

// DefaultButtonConfiguration 
type DefaultButtonConfiguration struct {
  BackgroundColor string `json:"BackgroundColor,omitempty"`
  BorderRadius int `json:"BorderRadius,omitempty"`
  ButtonAction string `json:"ButtonAction,omitempty"`
  Link string `json:"Link,omitempty"`
  Text string `json:"Text,omitempty"`
  TextColor string `json:"TextColor,omitempty"`
}

// HeaderConfig 
type HeaderConfig struct {
  Alignment string `json:"Alignment,omitempty"`
  Header string `json:"Header,omitempty"`
  TextColor string `json:"TextColor,omitempty"`
}

// InAppMessageContent 
type InAppMessageContent struct {
  BackgroundColor string `json:"BackgroundColor,omitempty"`
  BodyConfig *BodyConfig `json:"BodyConfig,omitempty"`
  HeaderConfig *HeaderConfig `json:"HeaderConfig,omitempty"`
  ImageUrl string `json:"ImageUrl,omitempty"`
  PrimaryBtn *ButtonConfig `json:"PrimaryBtn,omitempty"`
  SecondaryBtn *ButtonConfig `json:"SecondaryBtn,omitempty"`
}

// OverrideButtonConfiguration 
type OverrideButtonConfiguration struct {
  ButtonAction string `json:"ButtonAction,omitempty"`
  Link string `json:"Link,omitempty"`
}

// Resource Resource Type definition for AWS::Pinpoint::InAppTemplate
type Resource struct {
  Arn string `json:"Arn,omitempty"`
  Content []*InAppMessageContent `json:"Content,omitempty"`
  CustomConfig *CustomConfig `json:"CustomConfig,omitempty"`
  Layout string `json:"Layout,omitempty"`
  Tags *Tags `json:"Tags,omitempty"`
  TemplateDescription string `json:"TemplateDescription,omitempty"`
  TemplateName string `json:"TemplateName"`
}

// Tags 
type Tags struct {
}

func (strct *BodyConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Alignment" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Alignment\": ")
	if tmp, err := json.Marshal(strct.Alignment); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Body" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Body\": ")
	if tmp, err := json.Marshal(strct.Body); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TextColor" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TextColor\": ")
	if tmp, err := json.Marshal(strct.TextColor); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *BodyConfig) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Alignment":
            if err := json.Unmarshal([]byte(v), &strct.Alignment); err != nil {
                return err
             }
        case "Body":
            if err := json.Unmarshal([]byte(v), &strct.Body); err != nil {
                return err
             }
        case "TextColor":
            if err := json.Unmarshal([]byte(v), &strct.TextColor); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ButtonConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Android" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Android\": ")
	if tmp, err := json.Marshal(strct.Android); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DefaultConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultConfig\": ")
	if tmp, err := json.Marshal(strct.DefaultConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IOS" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IOS\": ")
	if tmp, err := json.Marshal(strct.IOS); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Web" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Web\": ")
	if tmp, err := json.Marshal(strct.Web); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ButtonConfig) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Android":
            if err := json.Unmarshal([]byte(v), &strct.Android); err != nil {
                return err
             }
        case "DefaultConfig":
            if err := json.Unmarshal([]byte(v), &strct.DefaultConfig); err != nil {
                return err
             }
        case "IOS":
            if err := json.Unmarshal([]byte(v), &strct.IOS); err != nil {
                return err
             }
        case "Web":
            if err := json.Unmarshal([]byte(v), &strct.Web); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *DefaultButtonConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "BackgroundColor" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BackgroundColor\": ")
	if tmp, err := json.Marshal(strct.BackgroundColor); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BorderRadius" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BorderRadius\": ")
	if tmp, err := json.Marshal(strct.BorderRadius); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ButtonAction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ButtonAction\": ")
	if tmp, err := json.Marshal(strct.ButtonAction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Link" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Link\": ")
	if tmp, err := json.Marshal(strct.Link); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TextColor" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TextColor\": ")
	if tmp, err := json.Marshal(strct.TextColor); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DefaultButtonConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "BackgroundColor":
            if err := json.Unmarshal([]byte(v), &strct.BackgroundColor); err != nil {
                return err
             }
        case "BorderRadius":
            if err := json.Unmarshal([]byte(v), &strct.BorderRadius); err != nil {
                return err
             }
        case "ButtonAction":
            if err := json.Unmarshal([]byte(v), &strct.ButtonAction); err != nil {
                return err
             }
        case "Link":
            if err := json.Unmarshal([]byte(v), &strct.Link); err != nil {
                return err
             }
        case "Text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        case "TextColor":
            if err := json.Unmarshal([]byte(v), &strct.TextColor); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *HeaderConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Alignment" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Alignment\": ")
	if tmp, err := json.Marshal(strct.Alignment); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Header" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Header\": ")
	if tmp, err := json.Marshal(strct.Header); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TextColor" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TextColor\": ")
	if tmp, err := json.Marshal(strct.TextColor); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *HeaderConfig) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Alignment":
            if err := json.Unmarshal([]byte(v), &strct.Alignment); err != nil {
                return err
             }
        case "Header":
            if err := json.Unmarshal([]byte(v), &strct.Header); err != nil {
                return err
             }
        case "TextColor":
            if err := json.Unmarshal([]byte(v), &strct.TextColor); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *InAppMessageContent) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "BackgroundColor" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BackgroundColor\": ")
	if tmp, err := json.Marshal(strct.BackgroundColor); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BodyConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BodyConfig\": ")
	if tmp, err := json.Marshal(strct.BodyConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HeaderConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HeaderConfig\": ")
	if tmp, err := json.Marshal(strct.HeaderConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ImageUrl" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ImageUrl\": ")
	if tmp, err := json.Marshal(strct.ImageUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PrimaryBtn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PrimaryBtn\": ")
	if tmp, err := json.Marshal(strct.PrimaryBtn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecondaryBtn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecondaryBtn\": ")
	if tmp, err := json.Marshal(strct.SecondaryBtn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *InAppMessageContent) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "BackgroundColor":
            if err := json.Unmarshal([]byte(v), &strct.BackgroundColor); err != nil {
                return err
             }
        case "BodyConfig":
            if err := json.Unmarshal([]byte(v), &strct.BodyConfig); err != nil {
                return err
             }
        case "HeaderConfig":
            if err := json.Unmarshal([]byte(v), &strct.HeaderConfig); err != nil {
                return err
             }
        case "ImageUrl":
            if err := json.Unmarshal([]byte(v), &strct.ImageUrl); err != nil {
                return err
             }
        case "PrimaryBtn":
            if err := json.Unmarshal([]byte(v), &strct.PrimaryBtn); err != nil {
                return err
             }
        case "SecondaryBtn":
            if err := json.Unmarshal([]byte(v), &strct.SecondaryBtn); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *OverrideButtonConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ButtonAction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ButtonAction\": ")
	if tmp, err := json.Marshal(strct.ButtonAction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Link" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Link\": ")
	if tmp, err := json.Marshal(strct.Link); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OverrideButtonConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ButtonAction":
            if err := json.Unmarshal([]byte(v), &strct.ButtonAction); err != nil {
                return err
             }
        case "Link":
            if err := json.Unmarshal([]byte(v), &strct.Link); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Content" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Content\": ")
	if tmp, err := json.Marshal(strct.Content); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CustomConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CustomConfig\": ")
	if tmp, err := json.Marshal(strct.CustomConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Layout" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Layout\": ")
	if tmp, err := json.Marshal(strct.Layout); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TemplateDescription" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TemplateDescription\": ")
	if tmp, err := json.Marshal(strct.TemplateDescription); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TemplateName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TemplateName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TemplateName\": ")
	if tmp, err := json.Marshal(strct.TemplateName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    TemplateNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Content":
            if err := json.Unmarshal([]byte(v), &strct.Content); err != nil {
                return err
             }
        case "CustomConfig":
            if err := json.Unmarshal([]byte(v), &strct.CustomConfig); err != nil {
                return err
             }
        case "Layout":
            if err := json.Unmarshal([]byte(v), &strct.Layout); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TemplateDescription":
            if err := json.Unmarshal([]byte(v), &strct.TemplateDescription); err != nil {
                return err
             }
        case "TemplateName":
            if err := json.Unmarshal([]byte(v), &strct.TemplateName); err != nil {
                return err
             }
            TemplateNameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if TemplateName (a required property) was received
    if !TemplateNameReceived {
        return errors.New("\"TemplateName\" is required but was not present")
    }
    return nil
}
