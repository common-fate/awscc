// Code generated by schema-generate. DO NOT EDIT.

package memberinvitation

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Resource Resource schema for AWS::Detective::MemberInvitation
type Resource struct {

  // When set to true, invitation emails are not sent to the member accounts. Member accounts must still accept the invitation before they are added to the behavior graph. Updating this field has no effect.
  DisableEmailNotification bool `json:"DisableEmailNotification,omitempty"`

  // The ARN of the graph to which the member account will be invited
  GraphArn string `json:"GraphArn"`

  // The root email address for the account to be invited, for validation. Updating this field has no effect.
  MemberEmailAddress string `json:"MemberEmailAddress"`

  // The AWS account ID to be invited to join the graph as a member
  MemberId string `json:"MemberId"`

  // A message to be included in the email invitation sent to the invited account. Updating this field has no effect.
  Message string `json:"Message,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DisableEmailNotification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DisableEmailNotification\": ")
	if tmp, err := json.Marshal(strct.DisableEmailNotification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "GraphArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "GraphArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"GraphArn\": ")
	if tmp, err := json.Marshal(strct.GraphArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MemberEmailAddress" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MemberEmailAddress" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MemberEmailAddress\": ")
	if tmp, err := json.Marshal(strct.MemberEmailAddress); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MemberId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MemberId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MemberId\": ")
	if tmp, err := json.Marshal(strct.MemberId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Message" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Message\": ")
	if tmp, err := json.Marshal(strct.Message); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    GraphArnReceived := false
    MemberEmailAddressReceived := false
    MemberIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DisableEmailNotification":
            if err := json.Unmarshal([]byte(v), &strct.DisableEmailNotification); err != nil {
                return err
             }
        case "GraphArn":
            if err := json.Unmarshal([]byte(v), &strct.GraphArn); err != nil {
                return err
             }
            GraphArnReceived = true
        case "MemberEmailAddress":
            if err := json.Unmarshal([]byte(v), &strct.MemberEmailAddress); err != nil {
                return err
             }
            MemberEmailAddressReceived = true
        case "MemberId":
            if err := json.Unmarshal([]byte(v), &strct.MemberId); err != nil {
                return err
             }
            MemberIdReceived = true
        case "Message":
            if err := json.Unmarshal([]byte(v), &strct.Message); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if GraphArn (a required property) was received
    if !GraphArnReceived {
        return errors.New("\"GraphArn\" is required but was not present")
    }
    // check if MemberEmailAddress (a required property) was received
    if !MemberEmailAddressReceived {
        return errors.New("\"MemberEmailAddress\" is required but was not present")
    }
    // check if MemberId (a required property) was received
    if !MemberIdReceived {
        return errors.New("\"MemberId\" is required but was not present")
    }
    return nil
}
