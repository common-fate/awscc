// Code generated by schema-generate. DO NOT EDIT.

package connector

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// ConnectorProvisioningConfig Contains information about the configuration of the connector being registered.
type ConnectorProvisioningConfig struct {

  // Contains information about the configuration of the lambda which is being registered as the connector.
  Lambda *LambdaConnectorProvisioningConfig `json:"Lambda,omitempty"`
}

// LambdaConnectorProvisioningConfig Contains information about the configuration of the lambda which is being registered as the connector.
type LambdaConnectorProvisioningConfig struct {

  // Lambda ARN of the connector being registered.
  LambdaArn string `json:"LambdaArn"`
}

// Resource Resource schema for AWS::AppFlow::Connector
type Resource struct {

  //  The arn of the connector. The arn is unique for each ConnectorRegistration in your AWS account.
  ConnectorArn string `json:"ConnectorArn,omitempty"`

  //  The name of the connector. The name is unique for each ConnectorRegistration in your AWS account.
  ConnectorLabel string `json:"ConnectorLabel,omitempty"`

  // Contains information about the configuration of the connector being registered.
  ConnectorProvisioningConfig *ConnectorProvisioningConfig `json:"ConnectorProvisioningConfig"`

  // The provisioning type of the connector. Currently the only supported value is LAMBDA. 
  ConnectorProvisioningType string `json:"ConnectorProvisioningType"`

  // A description about the connector that's being registered.
  Description string `json:"Description,omitempty"`
}

func (strct *ConnectorProvisioningConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Lambda" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Lambda\": ")
	if tmp, err := json.Marshal(strct.Lambda); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ConnectorProvisioningConfig) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Lambda":
            if err := json.Unmarshal([]byte(v), &strct.Lambda); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *LambdaConnectorProvisioningConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "LambdaArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LambdaArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LambdaArn\": ")
	if tmp, err := json.Marshal(strct.LambdaArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *LambdaConnectorProvisioningConfig) UnmarshalJSON(b []byte) error {
    LambdaArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "LambdaArn":
            if err := json.Unmarshal([]byte(v), &strct.LambdaArn); err != nil {
                return err
             }
            LambdaArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if LambdaArn (a required property) was received
    if !LambdaArnReceived {
        return errors.New("\"LambdaArn\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ConnectorArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConnectorArn\": ")
	if tmp, err := json.Marshal(strct.ConnectorArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ConnectorLabel" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConnectorLabel\": ")
	if tmp, err := json.Marshal(strct.ConnectorLabel); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ConnectorProvisioningConfig" field is required
    if strct.ConnectorProvisioningConfig == nil {
        return nil, errors.New("ConnectorProvisioningConfig is a required field")
    }
    // Marshal the "ConnectorProvisioningConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConnectorProvisioningConfig\": ")
	if tmp, err := json.Marshal(strct.ConnectorProvisioningConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ConnectorProvisioningType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ConnectorProvisioningType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConnectorProvisioningType\": ")
	if tmp, err := json.Marshal(strct.ConnectorProvisioningType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ConnectorProvisioningConfigReceived := false
    ConnectorProvisioningTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ConnectorArn":
            if err := json.Unmarshal([]byte(v), &strct.ConnectorArn); err != nil {
                return err
             }
        case "ConnectorLabel":
            if err := json.Unmarshal([]byte(v), &strct.ConnectorLabel); err != nil {
                return err
             }
        case "ConnectorProvisioningConfig":
            if err := json.Unmarshal([]byte(v), &strct.ConnectorProvisioningConfig); err != nil {
                return err
             }
            ConnectorProvisioningConfigReceived = true
        case "ConnectorProvisioningType":
            if err := json.Unmarshal([]byte(v), &strct.ConnectorProvisioningType); err != nil {
                return err
             }
            ConnectorProvisioningTypeReceived = true
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ConnectorProvisioningConfig (a required property) was received
    if !ConnectorProvisioningConfigReceived {
        return errors.New("\"ConnectorProvisioningConfig\" is required but was not present")
    }
    // check if ConnectorProvisioningType (a required property) was received
    if !ConnectorProvisioningTypeReceived {
        return errors.New("\"ConnectorProvisioningType\" is required but was not present")
    }
    return nil
}
