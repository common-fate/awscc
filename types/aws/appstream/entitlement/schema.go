// Code generated by schema-generate. DO NOT EDIT.

package entitlement

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Attribute 
type Attribute struct {
  Name string `json:"Name"`
  Value string `json:"Value"`
}

// Resource Resource Type definition for AWS::AppStream::Entitlement
type Resource struct {
  AppVisibility string `json:"AppVisibility"`
  Attributes []*Attribute `json:"Attributes"`
  CreatedTime string `json:"CreatedTime,omitempty"`
  Description string `json:"Description,omitempty"`
  LastModifiedTime string `json:"LastModifiedTime,omitempty"`
  Name string `json:"Name"`
  StackName string `json:"StackName"`
}

func (strct *Attribute) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Attribute) UnmarshalJSON(b []byte) error {
    NameReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AppVisibility" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AppVisibility" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AppVisibility\": ")
	if tmp, err := json.Marshal(strct.AppVisibility); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Attributes" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Attributes" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Attributes\": ")
	if tmp, err := json.Marshal(strct.Attributes); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CreatedTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreatedTime\": ")
	if tmp, err := json.Marshal(strct.CreatedTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LastModifiedTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LastModifiedTime\": ")
	if tmp, err := json.Marshal(strct.LastModifiedTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "StackName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "StackName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StackName\": ")
	if tmp, err := json.Marshal(strct.StackName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AppVisibilityReceived := false
    AttributesReceived := false
    NameReceived := false
    StackNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AppVisibility":
            if err := json.Unmarshal([]byte(v), &strct.AppVisibility); err != nil {
                return err
             }
            AppVisibilityReceived = true
        case "Attributes":
            if err := json.Unmarshal([]byte(v), &strct.Attributes); err != nil {
                return err
             }
            AttributesReceived = true
        case "CreatedTime":
            if err := json.Unmarshal([]byte(v), &strct.CreatedTime); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "LastModifiedTime":
            if err := json.Unmarshal([]byte(v), &strct.LastModifiedTime); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "StackName":
            if err := json.Unmarshal([]byte(v), &strct.StackName); err != nil {
                return err
             }
            StackNameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AppVisibility (a required property) was received
    if !AppVisibilityReceived {
        return errors.New("\"AppVisibility\" is required but was not present")
    }
    // check if Attributes (a required property) was received
    if !AttributesReceived {
        return errors.New("\"Attributes\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if StackName (a required property) was received
    if !StackNameReceived {
        return errors.New("\"StackName\" is required but was not present")
    }
    return nil
}
