// Code generated by schema-generate. DO NOT EDIT.

package application

import (
    "encoding/json"
    "fmt"
    "bytes"
    "errors"
)

// Resource Resource Type definition for AWS::AppStream::Application
type Resource struct {
  AppBlockArn string `json:"AppBlockArn"`
  Arn string `json:"Arn,omitempty"`
  AttributesToDelete []string `json:"AttributesToDelete,omitempty"`
  CreatedTime string `json:"CreatedTime,omitempty"`
  Description string `json:"Description,omitempty"`
  DisplayName string `json:"DisplayName,omitempty"`
  IconS3Location *S3Location `json:"IconS3Location"`
  InstanceFamilies []string `json:"InstanceFamilies"`
  LaunchParameters string `json:"LaunchParameters,omitempty"`
  LaunchPath string `json:"LaunchPath"`
  Name string `json:"Name"`
  Platforms []string `json:"Platforms"`
  Tags []*Tag `json:"Tags,omitempty"`
  WorkingDirectory string `json:"WorkingDirectory,omitempty"`
}

// S3Location 
type S3Location struct {
  S3Bucket string `json:"S3Bucket"`
  S3Key string `json:"S3Key"`
}

// Tag 
type Tag struct {
  TagKey string `json:"TagKey"`
  TagValue string `json:"TagValue"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AppBlockArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AppBlockArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AppBlockArn\": ")
	if tmp, err := json.Marshal(strct.AppBlockArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AttributesToDelete" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AttributesToDelete\": ")
	if tmp, err := json.Marshal(strct.AttributesToDelete); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CreatedTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreatedTime\": ")
	if tmp, err := json.Marshal(strct.CreatedTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DisplayName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DisplayName\": ")
	if tmp, err := json.Marshal(strct.DisplayName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IconS3Location" field is required
    if strct.IconS3Location == nil {
        return nil, errors.New("IconS3Location is a required field")
    }
    // Marshal the "IconS3Location" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IconS3Location\": ")
	if tmp, err := json.Marshal(strct.IconS3Location); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "InstanceFamilies" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "InstanceFamilies" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceFamilies\": ")
	if tmp, err := json.Marshal(strct.InstanceFamilies); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LaunchParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LaunchParameters\": ")
	if tmp, err := json.Marshal(strct.LaunchParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "LaunchPath" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LaunchPath" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LaunchPath\": ")
	if tmp, err := json.Marshal(strct.LaunchPath); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Platforms" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Platforms" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Platforms\": ")
	if tmp, err := json.Marshal(strct.Platforms); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "WorkingDirectory" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WorkingDirectory\": ")
	if tmp, err := json.Marshal(strct.WorkingDirectory); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AppBlockArnReceived := false
    IconS3LocationReceived := false
    InstanceFamiliesReceived := false
    LaunchPathReceived := false
    NameReceived := false
    PlatformsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AppBlockArn":
            if err := json.Unmarshal([]byte(v), &strct.AppBlockArn); err != nil {
                return err
             }
            AppBlockArnReceived = true
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "AttributesToDelete":
            if err := json.Unmarshal([]byte(v), &strct.AttributesToDelete); err != nil {
                return err
             }
        case "CreatedTime":
            if err := json.Unmarshal([]byte(v), &strct.CreatedTime); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "DisplayName":
            if err := json.Unmarshal([]byte(v), &strct.DisplayName); err != nil {
                return err
             }
        case "IconS3Location":
            if err := json.Unmarshal([]byte(v), &strct.IconS3Location); err != nil {
                return err
             }
            IconS3LocationReceived = true
        case "InstanceFamilies":
            if err := json.Unmarshal([]byte(v), &strct.InstanceFamilies); err != nil {
                return err
             }
            InstanceFamiliesReceived = true
        case "LaunchParameters":
            if err := json.Unmarshal([]byte(v), &strct.LaunchParameters); err != nil {
                return err
             }
        case "LaunchPath":
            if err := json.Unmarshal([]byte(v), &strct.LaunchPath); err != nil {
                return err
             }
            LaunchPathReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Platforms":
            if err := json.Unmarshal([]byte(v), &strct.Platforms); err != nil {
                return err
             }
            PlatformsReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "WorkingDirectory":
            if err := json.Unmarshal([]byte(v), &strct.WorkingDirectory); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AppBlockArn (a required property) was received
    if !AppBlockArnReceived {
        return errors.New("\"AppBlockArn\" is required but was not present")
    }
    // check if IconS3Location (a required property) was received
    if !IconS3LocationReceived {
        return errors.New("\"IconS3Location\" is required but was not present")
    }
    // check if InstanceFamilies (a required property) was received
    if !InstanceFamiliesReceived {
        return errors.New("\"InstanceFamilies\" is required but was not present")
    }
    // check if LaunchPath (a required property) was received
    if !LaunchPathReceived {
        return errors.New("\"LaunchPath\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if Platforms (a required property) was received
    if !PlatformsReceived {
        return errors.New("\"Platforms\" is required but was not present")
    }
    return nil
}

func (strct *S3Location) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "S3Bucket" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "S3Bucket" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3Bucket\": ")
	if tmp, err := json.Marshal(strct.S3Bucket); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "S3Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "S3Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3Key\": ")
	if tmp, err := json.Marshal(strct.S3Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *S3Location) UnmarshalJSON(b []byte) error {
    S3BucketReceived := false
    S3KeyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "S3Bucket":
            if err := json.Unmarshal([]byte(v), &strct.S3Bucket); err != nil {
                return err
             }
            S3BucketReceived = true
        case "S3Key":
            if err := json.Unmarshal([]byte(v), &strct.S3Key); err != nil {
                return err
             }
            S3KeyReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if S3Bucket (a required property) was received
    if !S3BucketReceived {
        return errors.New("\"S3Bucket\" is required but was not present")
    }
    // check if S3Key (a required property) was received
    if !S3KeyReceived {
        return errors.New("\"S3Key\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "TagKey" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TagKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TagKey\": ")
	if tmp, err := json.Marshal(strct.TagKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TagValue" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TagValue" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TagValue\": ")
	if tmp, err := json.Marshal(strct.TagValue); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    TagKeyReceived := false
    TagValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "TagKey":
            if err := json.Unmarshal([]byte(v), &strct.TagKey); err != nil {
                return err
             }
            TagKeyReceived = true
        case "TagValue":
            if err := json.Unmarshal([]byte(v), &strct.TagValue); err != nil {
                return err
             }
            TagValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if TagKey (a required property) was received
    if !TagKeyReceived {
        return errors.New("\"TagKey\" is required but was not present")
    }
    // check if TagValue (a required property) was received
    if !TagValueReceived {
        return errors.New("\"TagValue\" is required but was not present")
    }
    return nil
}
