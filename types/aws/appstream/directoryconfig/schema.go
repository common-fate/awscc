// Code generated by schema-generate. DO NOT EDIT.

package directoryconfig

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// CertificateBasedAuthProperties 
type CertificateBasedAuthProperties struct {
  CertificateAuthorityArn string `json:"CertificateAuthorityArn,omitempty"`
  Status string `json:"Status,omitempty"`
}

// Resource Resource Type definition for AWS::AppStream::DirectoryConfig
type Resource struct {
  CertificateBasedAuthProperties *CertificateBasedAuthProperties `json:"CertificateBasedAuthProperties,omitempty"`
  DirectoryName string `json:"DirectoryName"`
  OrganizationalUnitDistinguishedNames []string `json:"OrganizationalUnitDistinguishedNames"`
  ServiceAccountCredentials *ServiceAccountCredentials `json:"ServiceAccountCredentials"`
}

// ServiceAccountCredentials 
type ServiceAccountCredentials struct {
  AccountName string `json:"AccountName"`
  AccountPassword string `json:"AccountPassword"`
}

func (strct *CertificateBasedAuthProperties) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CertificateAuthorityArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CertificateAuthorityArn\": ")
	if tmp, err := json.Marshal(strct.CertificateAuthorityArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CertificateBasedAuthProperties) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CertificateAuthorityArn":
            if err := json.Unmarshal([]byte(v), &strct.CertificateAuthorityArn); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CertificateBasedAuthProperties" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CertificateBasedAuthProperties\": ")
	if tmp, err := json.Marshal(strct.CertificateBasedAuthProperties); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DirectoryName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DirectoryName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DirectoryName\": ")
	if tmp, err := json.Marshal(strct.DirectoryName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "OrganizationalUnitDistinguishedNames" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "OrganizationalUnitDistinguishedNames" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OrganizationalUnitDistinguishedNames\": ")
	if tmp, err := json.Marshal(strct.OrganizationalUnitDistinguishedNames); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ServiceAccountCredentials" field is required
    if strct.ServiceAccountCredentials == nil {
        return nil, errors.New("ServiceAccountCredentials is a required field")
    }
    // Marshal the "ServiceAccountCredentials" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServiceAccountCredentials\": ")
	if tmp, err := json.Marshal(strct.ServiceAccountCredentials); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DirectoryNameReceived := false
    OrganizationalUnitDistinguishedNamesReceived := false
    ServiceAccountCredentialsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CertificateBasedAuthProperties":
            if err := json.Unmarshal([]byte(v), &strct.CertificateBasedAuthProperties); err != nil {
                return err
             }
        case "DirectoryName":
            if err := json.Unmarshal([]byte(v), &strct.DirectoryName); err != nil {
                return err
             }
            DirectoryNameReceived = true
        case "OrganizationalUnitDistinguishedNames":
            if err := json.Unmarshal([]byte(v), &strct.OrganizationalUnitDistinguishedNames); err != nil {
                return err
             }
            OrganizationalUnitDistinguishedNamesReceived = true
        case "ServiceAccountCredentials":
            if err := json.Unmarshal([]byte(v), &strct.ServiceAccountCredentials); err != nil {
                return err
             }
            ServiceAccountCredentialsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DirectoryName (a required property) was received
    if !DirectoryNameReceived {
        return errors.New("\"DirectoryName\" is required but was not present")
    }
    // check if OrganizationalUnitDistinguishedNames (a required property) was received
    if !OrganizationalUnitDistinguishedNamesReceived {
        return errors.New("\"OrganizationalUnitDistinguishedNames\" is required but was not present")
    }
    // check if ServiceAccountCredentials (a required property) was received
    if !ServiceAccountCredentialsReceived {
        return errors.New("\"ServiceAccountCredentials\" is required but was not present")
    }
    return nil
}

func (strct *ServiceAccountCredentials) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AccountName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AccountName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AccountName\": ")
	if tmp, err := json.Marshal(strct.AccountName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "AccountPassword" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AccountPassword" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AccountPassword\": ")
	if tmp, err := json.Marshal(strct.AccountPassword); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ServiceAccountCredentials) UnmarshalJSON(b []byte) error {
    AccountNameReceived := false
    AccountPasswordReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AccountName":
            if err := json.Unmarshal([]byte(v), &strct.AccountName); err != nil {
                return err
             }
            AccountNameReceived = true
        case "AccountPassword":
            if err := json.Unmarshal([]byte(v), &strct.AccountPassword); err != nil {
                return err
             }
            AccountPasswordReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AccountName (a required property) was received
    if !AccountNameReceived {
        return errors.New("\"AccountName\" is required but was not present")
    }
    // check if AccountPassword (a required property) was received
    if !AccountPasswordReceived {
        return errors.New("\"AccountPassword\" is required but was not present")
    }
    return nil
}
