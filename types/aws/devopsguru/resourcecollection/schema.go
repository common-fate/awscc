// Code generated by schema-generate. DO NOT EDIT.

package resourcecollection

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// CloudFormationCollectionFilter CloudFormation resource for DevOps Guru to monitor
type CloudFormationCollectionFilter struct {

  // An array of CloudFormation stack names.
  StackNames []string `json:"StackNames,omitempty"`
}

// Resource This resource schema represents the ResourceCollection resource in the Amazon DevOps Guru.
type Resource struct {
  ResourceCollectionFilter *ResourceCollectionFilter `json:"ResourceCollectionFilter"`

  // The type of ResourceCollection
  ResourceCollectionType string `json:"ResourceCollectionType,omitempty"`
}

// ResourceCollectionFilter Information about a filter used to specify which AWS resources are analyzed for anomalous behavior by DevOps Guru.
type ResourceCollectionFilter struct {
  CloudFormation *CloudFormationCollectionFilter `json:"CloudFormation,omitempty"`
  Tags []*TagCollection `json:"Tags,omitempty"`
}

// TagCollection Tagged resource for DevOps Guru to monitor
type TagCollection struct {

  // A Tag key for DevOps Guru app boundary.
  AppBoundaryKey string `json:"AppBoundaryKey,omitempty"`

  // Tag values of DevOps Guru app boundary.
  TagValues []string `json:"TagValues,omitempty"`
}

func (strct *CloudFormationCollectionFilter) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "StackNames" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StackNames\": ")
	if tmp, err := json.Marshal(strct.StackNames); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CloudFormationCollectionFilter) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "StackNames":
            if err := json.Unmarshal([]byte(v), &strct.StackNames); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ResourceCollectionFilter" field is required
    if strct.ResourceCollectionFilter == nil {
        return nil, errors.New("ResourceCollectionFilter is a required field")
    }
    // Marshal the "ResourceCollectionFilter" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceCollectionFilter\": ")
	if tmp, err := json.Marshal(strct.ResourceCollectionFilter); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ResourceCollectionType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceCollectionType\": ")
	if tmp, err := json.Marshal(strct.ResourceCollectionType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ResourceCollectionFilterReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ResourceCollectionFilter":
            if err := json.Unmarshal([]byte(v), &strct.ResourceCollectionFilter); err != nil {
                return err
             }
            ResourceCollectionFilterReceived = true
        case "ResourceCollectionType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceCollectionType); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ResourceCollectionFilter (a required property) was received
    if !ResourceCollectionFilterReceived {
        return errors.New("\"ResourceCollectionFilter\" is required but was not present")
    }
    return nil
}

func (strct *ResourceCollectionFilter) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CloudFormation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CloudFormation\": ")
	if tmp, err := json.Marshal(strct.CloudFormation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ResourceCollectionFilter) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CloudFormation":
            if err := json.Unmarshal([]byte(v), &strct.CloudFormation); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *TagCollection) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AppBoundaryKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AppBoundaryKey\": ")
	if tmp, err := json.Marshal(strct.AppBoundaryKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TagValues" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TagValues\": ")
	if tmp, err := json.Marshal(strct.TagValues); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TagCollection) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AppBoundaryKey":
            if err := json.Unmarshal([]byte(v), &strct.AppBoundaryKey); err != nil {
                return err
             }
        case "TagValues":
            if err := json.Unmarshal([]byte(v), &strct.TagValues); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
