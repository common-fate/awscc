// Code generated by schema-generate. DO NOT EDIT.

package configurationaggregator

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// AccountAggregationSource 
type AccountAggregationSource struct {
  AccountIds []string `json:"AccountIds"`
  AllAwsRegions bool `json:"AllAwsRegions,omitempty"`
  AwsRegions []string `json:"AwsRegions,omitempty"`
}

// OrganizationAggregationSource 
type OrganizationAggregationSource struct {
  AllAwsRegions bool `json:"AllAwsRegions,omitempty"`
  AwsRegions []string `json:"AwsRegions,omitempty"`
  RoleArn string `json:"RoleArn"`
}

// Resource Resource Type definition for AWS::Config::ConfigurationAggregator
type Resource struct {
  AccountAggregationSources []*AccountAggregationSource `json:"AccountAggregationSources,omitempty"`

  // The Amazon Resource Name (ARN) of the aggregator.
  ConfigurationAggregatorArn string `json:"ConfigurationAggregatorArn,omitempty"`

  // The name of the aggregator.
  ConfigurationAggregatorName string `json:"ConfigurationAggregatorName,omitempty"`
  OrganizationAggregationSource *OrganizationAggregationSource `json:"OrganizationAggregationSource,omitempty"`

  // The tags for the configuration aggregator.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Value string `json:"Value"`
}

func (strct *AccountAggregationSource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AccountIds" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AccountIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AccountIds\": ")
	if tmp, err := json.Marshal(strct.AccountIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AllAwsRegions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllAwsRegions\": ")
	if tmp, err := json.Marshal(strct.AllAwsRegions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AwsRegions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AwsRegions\": ")
	if tmp, err := json.Marshal(strct.AwsRegions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AccountAggregationSource) UnmarshalJSON(b []byte) error {
    AccountIdsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AccountIds":
            if err := json.Unmarshal([]byte(v), &strct.AccountIds); err != nil {
                return err
             }
            AccountIdsReceived = true
        case "AllAwsRegions":
            if err := json.Unmarshal([]byte(v), &strct.AllAwsRegions); err != nil {
                return err
             }
        case "AwsRegions":
            if err := json.Unmarshal([]byte(v), &strct.AwsRegions); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AccountIds (a required property) was received
    if !AccountIdsReceived {
        return errors.New("\"AccountIds\" is required but was not present")
    }
    return nil
}

func (strct *OrganizationAggregationSource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllAwsRegions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllAwsRegions\": ")
	if tmp, err := json.Marshal(strct.AllAwsRegions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AwsRegions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AwsRegions\": ")
	if tmp, err := json.Marshal(strct.AwsRegions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OrganizationAggregationSource) UnmarshalJSON(b []byte) error {
    RoleArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllAwsRegions":
            if err := json.Unmarshal([]byte(v), &strct.AllAwsRegions); err != nil {
                return err
             }
        case "AwsRegions":
            if err := json.Unmarshal([]byte(v), &strct.AwsRegions); err != nil {
                return err
             }
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
            RoleArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if RoleArn (a required property) was received
    if !RoleArnReceived {
        return errors.New("\"RoleArn\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AccountAggregationSources" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AccountAggregationSources\": ")
	if tmp, err := json.Marshal(strct.AccountAggregationSources); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ConfigurationAggregatorArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConfigurationAggregatorArn\": ")
	if tmp, err := json.Marshal(strct.ConfigurationAggregatorArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ConfigurationAggregatorName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConfigurationAggregatorName\": ")
	if tmp, err := json.Marshal(strct.ConfigurationAggregatorName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OrganizationAggregationSource" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OrganizationAggregationSource\": ")
	if tmp, err := json.Marshal(strct.OrganizationAggregationSource); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AccountAggregationSources":
            if err := json.Unmarshal([]byte(v), &strct.AccountAggregationSources); err != nil {
                return err
             }
        case "ConfigurationAggregatorArn":
            if err := json.Unmarshal([]byte(v), &strct.ConfigurationAggregatorArn); err != nil {
                return err
             }
        case "ConfigurationAggregatorName":
            if err := json.Unmarshal([]byte(v), &strct.ConfigurationAggregatorName); err != nil {
                return err
             }
        case "OrganizationAggregationSource":
            if err := json.Unmarshal([]byte(v), &strct.OrganizationAggregationSource); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
