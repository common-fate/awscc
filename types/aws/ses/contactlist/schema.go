// Code generated by schema-generate. DO NOT EDIT.

package contactlist

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// Resource Resource schema for AWS::SES::ContactList.
type Resource struct {

  // The name of the contact list.
  ContactListName string `json:"ContactListName,omitempty"`

  // The description of the contact list.
  Description string `json:"Description,omitempty"`

  // The tags (keys and values) associated with the contact list.
  Tags []*Tag `json:"Tags,omitempty"`

  // The topics associated with the contact list.
  Topics []*Topic `json:"Topics,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

// Topic 
type Topic struct {
  DefaultSubscriptionStatus string `json:"DefaultSubscriptionStatus"`

  // The description of the topic.
  Description string `json:"Description,omitempty"`

  // The display name of the topic.
  DisplayName string `json:"DisplayName"`

  // The name of the topic.
  TopicName string `json:"TopicName"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ContactListName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ContactListName\": ")
	if tmp, err := json.Marshal(strct.ContactListName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Topics" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Topics\": ")
	if tmp, err := json.Marshal(strct.Topics); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ContactListName":
            if err := json.Unmarshal([]byte(v), &strct.ContactListName); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "Topics":
            if err := json.Unmarshal([]byte(v), &strct.Topics); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *Topic) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "DefaultSubscriptionStatus" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DefaultSubscriptionStatus" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultSubscriptionStatus\": ")
	if tmp, err := json.Marshal(strct.DefaultSubscriptionStatus); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DisplayName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DisplayName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DisplayName\": ")
	if tmp, err := json.Marshal(strct.DisplayName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TopicName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TopicName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TopicName\": ")
	if tmp, err := json.Marshal(strct.TopicName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Topic) UnmarshalJSON(b []byte) error {
    DefaultSubscriptionStatusReceived := false
    DisplayNameReceived := false
    TopicNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DefaultSubscriptionStatus":
            if err := json.Unmarshal([]byte(v), &strct.DefaultSubscriptionStatus); err != nil {
                return err
             }
            DefaultSubscriptionStatusReceived = true
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "DisplayName":
            if err := json.Unmarshal([]byte(v), &strct.DisplayName); err != nil {
                return err
             }
            DisplayNameReceived = true
        case "TopicName":
            if err := json.Unmarshal([]byte(v), &strct.TopicName); err != nil {
                return err
             }
            TopicNameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DefaultSubscriptionStatus (a required property) was received
    if !DefaultSubscriptionStatusReceived {
        return errors.New("\"DefaultSubscriptionStatus\" is required but was not present")
    }
    // check if DisplayName (a required property) was received
    if !DisplayNameReceived {
        return errors.New("\"DisplayName\" is required but was not present")
    }
    // check if TopicName (a required property) was received
    if !TopicNameReceived {
        return errors.New("\"TopicName\" is required but was not present")
    }
    return nil
}
