// Code generated by schema-generate. DO NOT EDIT.

package authorizer

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Represents an authorization layer for methods. If enabled on a method, API Gateway will activate the authorizer when a client calls the method.
type Resource struct {

  // Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
  AuthType string `json:"AuthType,omitempty"`

  // Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer.
  AuthorizerCredentials string `json:"AuthorizerCredentials,omitempty"`
  AuthorizerId string `json:"AuthorizerId,omitempty"`

  // The TTL in seconds of cached authorizer results.
  AuthorizerResultTtlInSeconds int `json:"AuthorizerResultTtlInSeconds,omitempty"`

  // Specifies the authorizer's Uniform Resource Identifier (URI).
  AuthorizerUri string `json:"AuthorizerUri,omitempty"`

  // The identity source for which authorization is requested.
  IdentitySource string `json:"IdentitySource,omitempty"`

  // A validation expression for the incoming identity token.
  IdentityValidationExpression string `json:"IdentityValidationExpression,omitempty"`

  // The name of the authorizer.
  Name string `json:"Name"`

  // A list of the Amazon Cognito user pool ARNs for the COGNITO_USER_POOLS authorizer.
  ProviderARNs []string `json:"ProviderARNs,omitempty"`

  // The identifier of the API.
  RestApiId string `json:"RestApiId"`

  // The authorizer type.
  Type string `json:"Type"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AuthType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AuthType\": ")
	if tmp, err := json.Marshal(strct.AuthType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AuthorizerCredentials" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AuthorizerCredentials\": ")
	if tmp, err := json.Marshal(strct.AuthorizerCredentials); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AuthorizerId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AuthorizerId\": ")
	if tmp, err := json.Marshal(strct.AuthorizerId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AuthorizerResultTtlInSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AuthorizerResultTtlInSeconds\": ")
	if tmp, err := json.Marshal(strct.AuthorizerResultTtlInSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AuthorizerUri" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AuthorizerUri\": ")
	if tmp, err := json.Marshal(strct.AuthorizerUri); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IdentitySource" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IdentitySource\": ")
	if tmp, err := json.Marshal(strct.IdentitySource); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IdentityValidationExpression" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IdentityValidationExpression\": ")
	if tmp, err := json.Marshal(strct.IdentityValidationExpression); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProviderARNs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProviderARNs\": ")
	if tmp, err := json.Marshal(strct.ProviderARNs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RestApiId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RestApiId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RestApiId\": ")
	if tmp, err := json.Marshal(strct.RestApiId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    NameReceived := false
    RestApiIdReceived := false
    TypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AuthType":
            if err := json.Unmarshal([]byte(v), &strct.AuthType); err != nil {
                return err
             }
        case "AuthorizerCredentials":
            if err := json.Unmarshal([]byte(v), &strct.AuthorizerCredentials); err != nil {
                return err
             }
        case "AuthorizerId":
            if err := json.Unmarshal([]byte(v), &strct.AuthorizerId); err != nil {
                return err
             }
        case "AuthorizerResultTtlInSeconds":
            if err := json.Unmarshal([]byte(v), &strct.AuthorizerResultTtlInSeconds); err != nil {
                return err
             }
        case "AuthorizerUri":
            if err := json.Unmarshal([]byte(v), &strct.AuthorizerUri); err != nil {
                return err
             }
        case "IdentitySource":
            if err := json.Unmarshal([]byte(v), &strct.IdentitySource); err != nil {
                return err
             }
        case "IdentityValidationExpression":
            if err := json.Unmarshal([]byte(v), &strct.IdentityValidationExpression); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "ProviderARNs":
            if err := json.Unmarshal([]byte(v), &strct.ProviderARNs); err != nil {
                return err
             }
        case "RestApiId":
            if err := json.Unmarshal([]byte(v), &strct.RestApiId); err != nil {
                return err
             }
            RestApiIdReceived = true
        case "Type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            TypeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if RestApiId (a required property) was received
    if !RestApiIdReceived {
        return errors.New("\"RestApiId\" is required but was not present")
    }
    // check if Type (a required property) was received
    if !TypeReceived {
        return errors.New("\"Type\" is required but was not present")
    }
    return nil
}
