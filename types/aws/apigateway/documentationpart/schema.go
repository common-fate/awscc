// Code generated by schema-generate. DO NOT EDIT.

package documentationpart

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// Location 
type Location struct {

  // The HTTP verb of a method.
  Method string `json:"Method,omitempty"`

  // The name of the targeted API entity.
  Name string `json:"Name,omitempty"`

  // The URL path of the target.
  Path string `json:"Path,omitempty"`

  // The HTTP status code of a response.
  StatusCode string `json:"StatusCode,omitempty"`

  // The type of API entity that the documentation content applies to.
  Type string `json:"Type,omitempty"`
}

// Resource Resource Type definition for AWS::ApiGateway::DocumentationPart
type Resource struct {

  // The identifier of the documentation Part.
  DocumentationPartId string `json:"DocumentationPartId,omitempty"`

  // The location of the API entity that the documentation applies to.
  Location *Location `json:"Location"`

  // The documentation content map of the targeted API entity.
  Properties string `json:"Properties"`

  // Identifier of the targeted API entity
  RestApiId string `json:"RestApiId"`
}

func (strct *Location) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Method" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Method\": ")
	if tmp, err := json.Marshal(strct.Method); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Path" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Path\": ")
	if tmp, err := json.Marshal(strct.Path); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StatusCode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StatusCode\": ")
	if tmp, err := json.Marshal(strct.StatusCode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Location) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Method":
            if err := json.Unmarshal([]byte(v), &strct.Method); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "Path":
            if err := json.Unmarshal([]byte(v), &strct.Path); err != nil {
                return err
             }
        case "StatusCode":
            if err := json.Unmarshal([]byte(v), &strct.StatusCode); err != nil {
                return err
             }
        case "Type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DocumentationPartId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DocumentationPartId\": ")
	if tmp, err := json.Marshal(strct.DocumentationPartId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Location" field is required
    if strct.Location == nil {
        return nil, errors.New("Location is a required field")
    }
    // Marshal the "Location" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Location\": ")
	if tmp, err := json.Marshal(strct.Location); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Properties" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Properties" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Properties\": ")
	if tmp, err := json.Marshal(strct.Properties); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RestApiId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RestApiId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RestApiId\": ")
	if tmp, err := json.Marshal(strct.RestApiId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    LocationReceived := false
    PropertiesReceived := false
    RestApiIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DocumentationPartId":
            if err := json.Unmarshal([]byte(v), &strct.DocumentationPartId); err != nil {
                return err
             }
        case "Location":
            if err := json.Unmarshal([]byte(v), &strct.Location); err != nil {
                return err
             }
            LocationReceived = true
        case "Properties":
            if err := json.Unmarshal([]byte(v), &strct.Properties); err != nil {
                return err
             }
            PropertiesReceived = true
        case "RestApiId":
            if err := json.Unmarshal([]byte(v), &strct.RestApiId); err != nil {
                return err
             }
            RestApiIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Location (a required property) was received
    if !LocationReceived {
        return errors.New("\"Location\" is required but was not present")
    }
    // check if Properties (a required property) was received
    if !PropertiesReceived {
        return errors.New("\"Properties\" is required but was not present")
    }
    // check if RestApiId (a required property) was received
    if !RestApiIdReceived {
        return errors.New("\"RestApiId\" is required but was not present")
    }
    return nil
}
