// Code generated by schema-generate. DO NOT EDIT.

package requestvalidator

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// Resource Resource Type definition for AWS::ApiGateway::RequestValidator
type Resource struct {

  // Name of the request validator.
  Name string `json:"Name,omitempty"`

  // ID of the request validator.
  RequestValidatorId string `json:"RequestValidatorId,omitempty"`

  // The identifier of the targeted API entity.
  RestApiId string `json:"RestApiId"`

  // Indicates whether to validate the request body according to the configured schema for the targeted API and method. 
  ValidateRequestBody bool `json:"ValidateRequestBody,omitempty"`

  // Indicates whether to validate request parameters.
  ValidateRequestParameters bool `json:"ValidateRequestParameters,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RequestValidatorId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RequestValidatorId\": ")
	if tmp, err := json.Marshal(strct.RequestValidatorId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RestApiId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RestApiId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RestApiId\": ")
	if tmp, err := json.Marshal(strct.RestApiId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ValidateRequestBody" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ValidateRequestBody\": ")
	if tmp, err := json.Marshal(strct.ValidateRequestBody); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ValidateRequestParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ValidateRequestParameters\": ")
	if tmp, err := json.Marshal(strct.ValidateRequestParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    RestApiIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "RequestValidatorId":
            if err := json.Unmarshal([]byte(v), &strct.RequestValidatorId); err != nil {
                return err
             }
        case "RestApiId":
            if err := json.Unmarshal([]byte(v), &strct.RestApiId); err != nil {
                return err
             }
            RestApiIdReceived = true
        case "ValidateRequestBody":
            if err := json.Unmarshal([]byte(v), &strct.ValidateRequestBody); err != nil {
                return err
             }
        case "ValidateRequestParameters":
            if err := json.Unmarshal([]byte(v), &strct.ValidateRequestParameters); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if RestApiId (a required property) was received
    if !RestApiIdReceived {
        return errors.New("\"RestApiId\" is required but was not present")
    }
    return nil
}
