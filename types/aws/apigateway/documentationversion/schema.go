// Code generated by schema-generate. DO NOT EDIT.

package documentationversion

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Resource A snapshot of the documentation of an API.
type Resource struct {

  // The description of the API documentation snapshot.
  Description string `json:"Description,omitempty"`

  // The version identifier of the API documentation snapshot.
  DocumentationVersion string `json:"DocumentationVersion"`

  // The identifier of the API.
  RestApiId string `json:"RestApiId"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DocumentationVersion" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DocumentationVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DocumentationVersion\": ")
	if tmp, err := json.Marshal(strct.DocumentationVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RestApiId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RestApiId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RestApiId\": ")
	if tmp, err := json.Marshal(strct.RestApiId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DocumentationVersionReceived := false
    RestApiIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "DocumentationVersion":
            if err := json.Unmarshal([]byte(v), &strct.DocumentationVersion); err != nil {
                return err
             }
            DocumentationVersionReceived = true
        case "RestApiId":
            if err := json.Unmarshal([]byte(v), &strct.RestApiId); err != nil {
                return err
             }
            RestApiIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DocumentationVersion (a required property) was received
    if !DocumentationVersionReceived {
        return errors.New("\"DocumentationVersion\" is required but was not present")
    }
    // check if RestApiId (a required property) was received
    if !RestApiIdReceived {
        return errors.New("\"RestApiId\" is required but was not present")
    }
    return nil
}
