// Code generated by schema-generate. DO NOT EDIT.

package stage

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// AccessLogSetting Specifies settings for logging access in this stage.
type AccessLogSetting struct {

  // The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with amazon-apigateway-. This parameter is required to enable access logging.
  DestinationArn string `json:"DestinationArn,omitempty"`

  // A single line format of the access logs of data, as specified by selected $context variables (https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference). The format must include at least $context.requestId. This parameter is required to enable access logging.
  Format string `json:"Format,omitempty"`
}

// CanarySetting Specifies settings for the canary deployment in this stage.
type CanarySetting struct {

  // The identifier of the deployment that the stage points to.
  DeploymentId string `json:"DeploymentId,omitempty"`

  // The percentage (0-100) of traffic diverted to a canary deployment.
  PercentTraffic float64 `json:"PercentTraffic,omitempty"`

  // Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
  StageVariableOverrides *StageVariableOverrides `json:"StageVariableOverrides,omitempty"`

  // Whether the canary deployment uses the stage cache or not.
  UseStageCache bool `json:"UseStageCache,omitempty"`
}

// MethodSetting Configures settings for all methods in a stage.
type MethodSetting struct {

  // Indicates whether the cached responses are encrypted.
  CacheDataEncrypted bool `json:"CacheDataEncrypted,omitempty"`

  // The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
  CacheTtlInSeconds int `json:"CacheTtlInSeconds,omitempty"`

  // Indicates whether responses are cached and returned for requests. You must enable a cache cluster on the stage to cache responses.
  CachingEnabled bool `json:"CachingEnabled,omitempty"`

  // Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs.
  DataTraceEnabled bool `json:"DataTraceEnabled,omitempty"`

  // The HTTP method. You can use an asterisk (*) as a wildcard to apply method settings to multiple methods.
  HttpMethod string `json:"HttpMethod,omitempty"`

  // The logging level for this method. For valid values, see the loggingLevel property of the Stage (https://docs.aws.amazon.com/apigateway/api-reference/resource/stage/#loggingLevel) resource in the Amazon API Gateway API Reference.
  LoggingLevel string `json:"LoggingLevel,omitempty"`

  // Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage.
  MetricsEnabled bool `json:"MetricsEnabled,omitempty"`

  // The resource path for this method. Forward slashes (/) are encoded as ~1 and the initial slash must include a forward slash. For example, the path value /resource/subresource must be encoded as /~1resource~1subresource. To specify the root path, use only a slash (/). You can use an asterisk (*) as a wildcard to apply method settings to multiple methods.
  ResourcePath string `json:"ResourcePath,omitempty"`

  // The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
  ThrottlingBurstLimit int `json:"ThrottlingBurstLimit,omitempty"`

  // The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
  ThrottlingRateLimit float64 `json:"ThrottlingRateLimit,omitempty"`
}

// Resource Resource Type definition for AWS::ApiGateway::Stage
type Resource struct {

  // Specifies settings for logging access in this stage.
  AccessLogSetting *AccessLogSetting `json:"AccessLogSetting,omitempty"`

  // Indicates whether cache clustering is enabled for the stage.
  CacheClusterEnabled bool `json:"CacheClusterEnabled,omitempty"`

  // The stage's cache cluster size.
  CacheClusterSize string `json:"CacheClusterSize,omitempty"`

  // Specifies settings for the canary deployment in this stage.
  CanarySetting *CanarySetting `json:"CanarySetting,omitempty"`

  // The ID of the client certificate that API Gateway uses to call your integration endpoints in the stage. 
  ClientCertificateId string `json:"ClientCertificateId,omitempty"`

  // The ID of the deployment that the stage is associated with. This parameter is required to create a stage. 
  DeploymentId string `json:"DeploymentId,omitempty"`

  // A description of the stage.
  Description string `json:"Description,omitempty"`

  // The version ID of the API documentation snapshot.
  DocumentationVersion string `json:"DocumentationVersion,omitempty"`

  // Settings for all methods in the stage.
  MethodSettings []*MethodSetting `json:"MethodSettings,omitempty"`

  // The ID of the RestApi resource that you're deploying with this stage.
  RestApiId string `json:"RestApiId"`

  // The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI).
  StageName string `json:"StageName,omitempty"`

  // An array of arbitrary tags (key-value pairs) to associate with the stage.
  Tags []*Tag `json:"Tags,omitempty"`

  // Specifies whether active X-Ray tracing is enabled for this stage.
  TracingEnabled bool `json:"TracingEnabled,omitempty"`

  // A map (string-to-string map) that defines the stage variables, where the variable name is the key and the variable value is the value.
  Variables *Variables `json:"Variables,omitempty"`
}

// StageVariableOverrides Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
type StageVariableOverrides struct {
}

// Tag Identify and categorize resources.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:.
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:.
  Value string `json:"Value"`
}

// Variables A map (string-to-string map) that defines the stage variables, where the variable name is the key and the variable value is the value.
type Variables struct {
}

func (strct *AccessLogSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DestinationArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DestinationArn\": ")
	if tmp, err := json.Marshal(strct.DestinationArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Format" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Format\": ")
	if tmp, err := json.Marshal(strct.Format); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AccessLogSetting) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DestinationArn":
            if err := json.Unmarshal([]byte(v), &strct.DestinationArn); err != nil {
                return err
             }
        case "Format":
            if err := json.Unmarshal([]byte(v), &strct.Format); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *CanarySetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DeploymentId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeploymentId\": ")
	if tmp, err := json.Marshal(strct.DeploymentId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PercentTraffic" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PercentTraffic\": ")
	if tmp, err := json.Marshal(strct.PercentTraffic); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StageVariableOverrides" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StageVariableOverrides\": ")
	if tmp, err := json.Marshal(strct.StageVariableOverrides); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UseStageCache" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UseStageCache\": ")
	if tmp, err := json.Marshal(strct.UseStageCache); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CanarySetting) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DeploymentId":
            if err := json.Unmarshal([]byte(v), &strct.DeploymentId); err != nil {
                return err
             }
        case "PercentTraffic":
            if err := json.Unmarshal([]byte(v), &strct.PercentTraffic); err != nil {
                return err
             }
        case "StageVariableOverrides":
            if err := json.Unmarshal([]byte(v), &strct.StageVariableOverrides); err != nil {
                return err
             }
        case "UseStageCache":
            if err := json.Unmarshal([]byte(v), &strct.UseStageCache); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *MethodSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CacheDataEncrypted" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CacheDataEncrypted\": ")
	if tmp, err := json.Marshal(strct.CacheDataEncrypted); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CacheTtlInSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CacheTtlInSeconds\": ")
	if tmp, err := json.Marshal(strct.CacheTtlInSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CachingEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CachingEnabled\": ")
	if tmp, err := json.Marshal(strct.CachingEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DataTraceEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DataTraceEnabled\": ")
	if tmp, err := json.Marshal(strct.DataTraceEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HttpMethod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HttpMethod\": ")
	if tmp, err := json.Marshal(strct.HttpMethod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoggingLevel" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoggingLevel\": ")
	if tmp, err := json.Marshal(strct.LoggingLevel); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MetricsEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MetricsEnabled\": ")
	if tmp, err := json.Marshal(strct.MetricsEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ResourcePath" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourcePath\": ")
	if tmp, err := json.Marshal(strct.ResourcePath); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ThrottlingBurstLimit" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ThrottlingBurstLimit\": ")
	if tmp, err := json.Marshal(strct.ThrottlingBurstLimit); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ThrottlingRateLimit" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ThrottlingRateLimit\": ")
	if tmp, err := json.Marshal(strct.ThrottlingRateLimit); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MethodSetting) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CacheDataEncrypted":
            if err := json.Unmarshal([]byte(v), &strct.CacheDataEncrypted); err != nil {
                return err
             }
        case "CacheTtlInSeconds":
            if err := json.Unmarshal([]byte(v), &strct.CacheTtlInSeconds); err != nil {
                return err
             }
        case "CachingEnabled":
            if err := json.Unmarshal([]byte(v), &strct.CachingEnabled); err != nil {
                return err
             }
        case "DataTraceEnabled":
            if err := json.Unmarshal([]byte(v), &strct.DataTraceEnabled); err != nil {
                return err
             }
        case "HttpMethod":
            if err := json.Unmarshal([]byte(v), &strct.HttpMethod); err != nil {
                return err
             }
        case "LoggingLevel":
            if err := json.Unmarshal([]byte(v), &strct.LoggingLevel); err != nil {
                return err
             }
        case "MetricsEnabled":
            if err := json.Unmarshal([]byte(v), &strct.MetricsEnabled); err != nil {
                return err
             }
        case "ResourcePath":
            if err := json.Unmarshal([]byte(v), &strct.ResourcePath); err != nil {
                return err
             }
        case "ThrottlingBurstLimit":
            if err := json.Unmarshal([]byte(v), &strct.ThrottlingBurstLimit); err != nil {
                return err
             }
        case "ThrottlingRateLimit":
            if err := json.Unmarshal([]byte(v), &strct.ThrottlingRateLimit); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AccessLogSetting" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AccessLogSetting\": ")
	if tmp, err := json.Marshal(strct.AccessLogSetting); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CacheClusterEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CacheClusterEnabled\": ")
	if tmp, err := json.Marshal(strct.CacheClusterEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CacheClusterSize" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CacheClusterSize\": ")
	if tmp, err := json.Marshal(strct.CacheClusterSize); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CanarySetting" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CanarySetting\": ")
	if tmp, err := json.Marshal(strct.CanarySetting); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ClientCertificateId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ClientCertificateId\": ")
	if tmp, err := json.Marshal(strct.ClientCertificateId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeploymentId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeploymentId\": ")
	if tmp, err := json.Marshal(strct.DeploymentId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DocumentationVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DocumentationVersion\": ")
	if tmp, err := json.Marshal(strct.DocumentationVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MethodSettings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MethodSettings\": ")
	if tmp, err := json.Marshal(strct.MethodSettings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RestApiId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RestApiId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RestApiId\": ")
	if tmp, err := json.Marshal(strct.RestApiId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StageName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StageName\": ")
	if tmp, err := json.Marshal(strct.StageName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TracingEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TracingEnabled\": ")
	if tmp, err := json.Marshal(strct.TracingEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Variables" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Variables\": ")
	if tmp, err := json.Marshal(strct.Variables); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    RestApiIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AccessLogSetting":
            if err := json.Unmarshal([]byte(v), &strct.AccessLogSetting); err != nil {
                return err
             }
        case "CacheClusterEnabled":
            if err := json.Unmarshal([]byte(v), &strct.CacheClusterEnabled); err != nil {
                return err
             }
        case "CacheClusterSize":
            if err := json.Unmarshal([]byte(v), &strct.CacheClusterSize); err != nil {
                return err
             }
        case "CanarySetting":
            if err := json.Unmarshal([]byte(v), &strct.CanarySetting); err != nil {
                return err
             }
        case "ClientCertificateId":
            if err := json.Unmarshal([]byte(v), &strct.ClientCertificateId); err != nil {
                return err
             }
        case "DeploymentId":
            if err := json.Unmarshal([]byte(v), &strct.DeploymentId); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "DocumentationVersion":
            if err := json.Unmarshal([]byte(v), &strct.DocumentationVersion); err != nil {
                return err
             }
        case "MethodSettings":
            if err := json.Unmarshal([]byte(v), &strct.MethodSettings); err != nil {
                return err
             }
        case "RestApiId":
            if err := json.Unmarshal([]byte(v), &strct.RestApiId); err != nil {
                return err
             }
            RestApiIdReceived = true
        case "StageName":
            if err := json.Unmarshal([]byte(v), &strct.StageName); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TracingEnabled":
            if err := json.Unmarshal([]byte(v), &strct.TracingEnabled); err != nil {
                return err
             }
        case "Variables":
            if err := json.Unmarshal([]byte(v), &strct.Variables); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if RestApiId (a required property) was received
    if !RestApiIdReceived {
        return errors.New("\"RestApiId\" is required but was not present")
    }
    return nil
}

func (strct *StageVariableOverrides) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *StageVariableOverrides) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *Variables) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Variables) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
