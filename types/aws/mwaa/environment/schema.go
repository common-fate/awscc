// Code generated by schema-generate. DO NOT EDIT.

package environment

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// AirflowConfigurationOptions Key/value pairs representing Airflow configuration variables.
//     Keys are prefixed by their section:
// 
//     [core]
//     dags_folder={AIRFLOW_HOME}/dags
// 
//     Would be represented as
// 
//     "core.dags_folder": "{AIRFLOW_HOME}/dags"
type AirflowConfigurationOptions struct {
}

// LastUpdate Details about the last update performed on the environment.
type LastUpdate struct {
  CreatedAt string `json:"CreatedAt,omitempty"`
  Error *UpdateError `json:"Error,omitempty"`
  Status string `json:"Status,omitempty"`
}

// LoggingConfiguration Logging configuration for the environment.
type LoggingConfiguration struct {
  DagProcessingLogs *ModuleLoggingConfiguration `json:"DagProcessingLogs,omitempty"`
  SchedulerLogs *ModuleLoggingConfiguration `json:"SchedulerLogs,omitempty"`
  TaskLogs *ModuleLoggingConfiguration `json:"TaskLogs,omitempty"`
  WebserverLogs *ModuleLoggingConfiguration `json:"WebserverLogs,omitempty"`
  WorkerLogs *ModuleLoggingConfiguration `json:"WorkerLogs,omitempty"`
}

// LoggingConfigurationInput Configures logging for the environment.
type LoggingConfigurationInput struct {
  DagProcessingLogs *ModuleLoggingConfigurationInput `json:"DagProcessingLogs,omitempty"`
  SchedulerLogs *ModuleLoggingConfigurationInput `json:"SchedulerLogs,omitempty"`
  TaskLogs *ModuleLoggingConfigurationInput `json:"TaskLogs,omitempty"`
  WebserverLogs *ModuleLoggingConfigurationInput `json:"WebserverLogs,omitempty"`
  WorkerLogs *ModuleLoggingConfigurationInput `json:"WorkerLogs,omitempty"`
}

// ModuleLoggingConfiguration Logging configuration for a specific airflow component.
type ModuleLoggingConfiguration struct {
  CloudWatchLogGroupArn string `json:"CloudWatchLogGroupArn,omitempty"`
  Enabled bool `json:"Enabled,omitempty"`
  LogLevel string `json:"LogLevel,omitempty"`
}

// ModuleLoggingConfigurationInput Configures airflow component logging for the environment.
type ModuleLoggingConfigurationInput struct {
  Enabled bool `json:"Enabled,omitempty"`
  LogLevel string `json:"LogLevel,omitempty"`
}

// NetworkConfiguration Configures the network resources of the environment.
type NetworkConfiguration struct {

  // A list of security groups to use for the environment.
  SecurityGroupIds []string `json:"SecurityGroupIds,omitempty"`

  // A list of subnets to use for the environment. These must be private subnets, in the same VPC, in two different availability zones.
  SubnetIds []string `json:"SubnetIds,omitempty"`
}

// Resource Resource schema for AWS::MWAA::Environment
type Resource struct {

  // Key/value pairs representing Airflow configuration variables.
  //     Keys are prefixed by their section:
  // 
  //     [core]
  //     dags_folder={AIRFLOW_HOME}/dags
  // 
  //     Would be represented as
  // 
  //     "core.dags_folder": "{AIRFLOW_HOME}/dags"
  AirflowConfigurationOptions *AirflowConfigurationOptions `json:"AirflowConfigurationOptions,omitempty"`
  AirflowVersion string `json:"AirflowVersion,omitempty"`
  Arn string `json:"Arn,omitempty"`
  DagS3Path string `json:"DagS3Path,omitempty"`
  EnvironmentClass string `json:"EnvironmentClass,omitempty"`
  ExecutionRoleArn string `json:"ExecutionRoleArn,omitempty"`
  KmsKey string `json:"KmsKey,omitempty"`
  LoggingConfiguration *LoggingConfiguration `json:"LoggingConfiguration,omitempty"`
  MaxWorkers int `json:"MaxWorkers,omitempty"`
  MinWorkers int `json:"MinWorkers,omitempty"`
  Name string `json:"Name"`
  NetworkConfiguration *NetworkConfiguration `json:"NetworkConfiguration,omitempty"`
  PluginsS3ObjectVersion string `json:"PluginsS3ObjectVersion,omitempty"`
  PluginsS3Path string `json:"PluginsS3Path,omitempty"`
  RequirementsS3ObjectVersion string `json:"RequirementsS3ObjectVersion,omitempty"`
  RequirementsS3Path string `json:"RequirementsS3Path,omitempty"`
  Schedulers int `json:"Schedulers,omitempty"`
  SourceBucketArn string `json:"SourceBucketArn,omitempty"`

  // A map of tags for the environment.
  Tags *Tags `json:"Tags,omitempty"`
  WebserverAccessMode string `json:"WebserverAccessMode,omitempty"`
  WebserverUrl string `json:"WebserverUrl,omitempty"`
  WeeklyMaintenanceWindowStart string `json:"WeeklyMaintenanceWindowStart,omitempty"`
}

// Tags A map of tags for the environment.
type Tags struct {
}

// UpdateError The error associated with an update request.
type UpdateError struct {
  ErrorCode string `json:"ErrorCode,omitempty"`
  ErrorMessage string `json:"ErrorMessage,omitempty"`
}

func (strct *LastUpdate) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CreatedAt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreatedAt\": ")
	if tmp, err := json.Marshal(strct.CreatedAt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Error" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Error\": ")
	if tmp, err := json.Marshal(strct.Error); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *LastUpdate) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CreatedAt":
            if err := json.Unmarshal([]byte(v), &strct.CreatedAt); err != nil {
                return err
             }
        case "Error":
            if err := json.Unmarshal([]byte(v), &strct.Error); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *LoggingConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DagProcessingLogs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DagProcessingLogs\": ")
	if tmp, err := json.Marshal(strct.DagProcessingLogs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SchedulerLogs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SchedulerLogs\": ")
	if tmp, err := json.Marshal(strct.SchedulerLogs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TaskLogs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TaskLogs\": ")
	if tmp, err := json.Marshal(strct.TaskLogs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "WebserverLogs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WebserverLogs\": ")
	if tmp, err := json.Marshal(strct.WebserverLogs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "WorkerLogs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WorkerLogs\": ")
	if tmp, err := json.Marshal(strct.WorkerLogs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *LoggingConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DagProcessingLogs":
            if err := json.Unmarshal([]byte(v), &strct.DagProcessingLogs); err != nil {
                return err
             }
        case "SchedulerLogs":
            if err := json.Unmarshal([]byte(v), &strct.SchedulerLogs); err != nil {
                return err
             }
        case "TaskLogs":
            if err := json.Unmarshal([]byte(v), &strct.TaskLogs); err != nil {
                return err
             }
        case "WebserverLogs":
            if err := json.Unmarshal([]byte(v), &strct.WebserverLogs); err != nil {
                return err
             }
        case "WorkerLogs":
            if err := json.Unmarshal([]byte(v), &strct.WorkerLogs); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *LoggingConfigurationInput) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DagProcessingLogs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DagProcessingLogs\": ")
	if tmp, err := json.Marshal(strct.DagProcessingLogs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SchedulerLogs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SchedulerLogs\": ")
	if tmp, err := json.Marshal(strct.SchedulerLogs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TaskLogs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TaskLogs\": ")
	if tmp, err := json.Marshal(strct.TaskLogs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "WebserverLogs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WebserverLogs\": ")
	if tmp, err := json.Marshal(strct.WebserverLogs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "WorkerLogs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WorkerLogs\": ")
	if tmp, err := json.Marshal(strct.WorkerLogs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *LoggingConfigurationInput) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DagProcessingLogs":
            if err := json.Unmarshal([]byte(v), &strct.DagProcessingLogs); err != nil {
                return err
             }
        case "SchedulerLogs":
            if err := json.Unmarshal([]byte(v), &strct.SchedulerLogs); err != nil {
                return err
             }
        case "TaskLogs":
            if err := json.Unmarshal([]byte(v), &strct.TaskLogs); err != nil {
                return err
             }
        case "WebserverLogs":
            if err := json.Unmarshal([]byte(v), &strct.WebserverLogs); err != nil {
                return err
             }
        case "WorkerLogs":
            if err := json.Unmarshal([]byte(v), &strct.WorkerLogs); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ModuleLoggingConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CloudWatchLogGroupArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CloudWatchLogGroupArn\": ")
	if tmp, err := json.Marshal(strct.CloudWatchLogGroupArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Enabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enabled\": ")
	if tmp, err := json.Marshal(strct.Enabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LogLevel" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LogLevel\": ")
	if tmp, err := json.Marshal(strct.LogLevel); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ModuleLoggingConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CloudWatchLogGroupArn":
            if err := json.Unmarshal([]byte(v), &strct.CloudWatchLogGroupArn); err != nil {
                return err
             }
        case "Enabled":
            if err := json.Unmarshal([]byte(v), &strct.Enabled); err != nil {
                return err
             }
        case "LogLevel":
            if err := json.Unmarshal([]byte(v), &strct.LogLevel); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ModuleLoggingConfigurationInput) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Enabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enabled\": ")
	if tmp, err := json.Marshal(strct.Enabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LogLevel" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LogLevel\": ")
	if tmp, err := json.Marshal(strct.LogLevel); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ModuleLoggingConfigurationInput) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Enabled":
            if err := json.Unmarshal([]byte(v), &strct.Enabled); err != nil {
                return err
             }
        case "LogLevel":
            if err := json.Unmarshal([]byte(v), &strct.LogLevel); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *NetworkConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "SecurityGroupIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecurityGroupIds\": ")
	if tmp, err := json.Marshal(strct.SecurityGroupIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SubnetIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubnetIds\": ")
	if tmp, err := json.Marshal(strct.SubnetIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *NetworkConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "SecurityGroupIds":
            if err := json.Unmarshal([]byte(v), &strct.SecurityGroupIds); err != nil {
                return err
             }
        case "SubnetIds":
            if err := json.Unmarshal([]byte(v), &strct.SubnetIds); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AirflowConfigurationOptions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AirflowConfigurationOptions\": ")
	if tmp, err := json.Marshal(strct.AirflowConfigurationOptions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AirflowVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AirflowVersion\": ")
	if tmp, err := json.Marshal(strct.AirflowVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DagS3Path" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DagS3Path\": ")
	if tmp, err := json.Marshal(strct.DagS3Path); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EnvironmentClass" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnvironmentClass\": ")
	if tmp, err := json.Marshal(strct.EnvironmentClass); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ExecutionRoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ExecutionRoleArn\": ")
	if tmp, err := json.Marshal(strct.ExecutionRoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "KmsKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KmsKey\": ")
	if tmp, err := json.Marshal(strct.KmsKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoggingConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoggingConfiguration\": ")
	if tmp, err := json.Marshal(strct.LoggingConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaxWorkers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxWorkers\": ")
	if tmp, err := json.Marshal(strct.MaxWorkers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MinWorkers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MinWorkers\": ")
	if tmp, err := json.Marshal(strct.MinWorkers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NetworkConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetworkConfiguration\": ")
	if tmp, err := json.Marshal(strct.NetworkConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PluginsS3ObjectVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PluginsS3ObjectVersion\": ")
	if tmp, err := json.Marshal(strct.PluginsS3ObjectVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PluginsS3Path" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PluginsS3Path\": ")
	if tmp, err := json.Marshal(strct.PluginsS3Path); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RequirementsS3ObjectVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RequirementsS3ObjectVersion\": ")
	if tmp, err := json.Marshal(strct.RequirementsS3ObjectVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RequirementsS3Path" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RequirementsS3Path\": ")
	if tmp, err := json.Marshal(strct.RequirementsS3Path); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Schedulers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Schedulers\": ")
	if tmp, err := json.Marshal(strct.Schedulers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SourceBucketArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceBucketArn\": ")
	if tmp, err := json.Marshal(strct.SourceBucketArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "WebserverAccessMode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WebserverAccessMode\": ")
	if tmp, err := json.Marshal(strct.WebserverAccessMode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "WebserverUrl" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WebserverUrl\": ")
	if tmp, err := json.Marshal(strct.WebserverUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "WeeklyMaintenanceWindowStart" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"WeeklyMaintenanceWindowStart\": ")
	if tmp, err := json.Marshal(strct.WeeklyMaintenanceWindowStart); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AirflowConfigurationOptions":
            if err := json.Unmarshal([]byte(v), &strct.AirflowConfigurationOptions); err != nil {
                return err
             }
        case "AirflowVersion":
            if err := json.Unmarshal([]byte(v), &strct.AirflowVersion); err != nil {
                return err
             }
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "DagS3Path":
            if err := json.Unmarshal([]byte(v), &strct.DagS3Path); err != nil {
                return err
             }
        case "EnvironmentClass":
            if err := json.Unmarshal([]byte(v), &strct.EnvironmentClass); err != nil {
                return err
             }
        case "ExecutionRoleArn":
            if err := json.Unmarshal([]byte(v), &strct.ExecutionRoleArn); err != nil {
                return err
             }
        case "KmsKey":
            if err := json.Unmarshal([]byte(v), &strct.KmsKey); err != nil {
                return err
             }
        case "LoggingConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.LoggingConfiguration); err != nil {
                return err
             }
        case "MaxWorkers":
            if err := json.Unmarshal([]byte(v), &strct.MaxWorkers); err != nil {
                return err
             }
        case "MinWorkers":
            if err := json.Unmarshal([]byte(v), &strct.MinWorkers); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "NetworkConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.NetworkConfiguration); err != nil {
                return err
             }
        case "PluginsS3ObjectVersion":
            if err := json.Unmarshal([]byte(v), &strct.PluginsS3ObjectVersion); err != nil {
                return err
             }
        case "PluginsS3Path":
            if err := json.Unmarshal([]byte(v), &strct.PluginsS3Path); err != nil {
                return err
             }
        case "RequirementsS3ObjectVersion":
            if err := json.Unmarshal([]byte(v), &strct.RequirementsS3ObjectVersion); err != nil {
                return err
             }
        case "RequirementsS3Path":
            if err := json.Unmarshal([]byte(v), &strct.RequirementsS3Path); err != nil {
                return err
             }
        case "Schedulers":
            if err := json.Unmarshal([]byte(v), &strct.Schedulers); err != nil {
                return err
             }
        case "SourceBucketArn":
            if err := json.Unmarshal([]byte(v), &strct.SourceBucketArn); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "WebserverAccessMode":
            if err := json.Unmarshal([]byte(v), &strct.WebserverAccessMode); err != nil {
                return err
             }
        case "WebserverUrl":
            if err := json.Unmarshal([]byte(v), &strct.WebserverUrl); err != nil {
                return err
             }
        case "WeeklyMaintenanceWindowStart":
            if err := json.Unmarshal([]byte(v), &strct.WeeklyMaintenanceWindowStart); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}

func (strct *UpdateError) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ErrorCode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ErrorCode\": ")
	if tmp, err := json.Marshal(strct.ErrorCode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ErrorMessage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ErrorMessage\": ")
	if tmp, err := json.Marshal(strct.ErrorMessage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *UpdateError) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ErrorCode":
            if err := json.Unmarshal([]byte(v), &strct.ErrorCode); err != nil {
                return err
             }
        case "ErrorMessage":
            if err := json.Unmarshal([]byte(v), &strct.ErrorMessage); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
