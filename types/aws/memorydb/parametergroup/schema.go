// Code generated by schema-generate. DO NOT EDIT.

package parametergroup

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Parameters An map of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional.
type Parameters struct {
}

// Resource The AWS::MemoryDB::ParameterGroup resource creates an Amazon MemoryDB ParameterGroup.
type Resource struct {

  // The Amazon Resource Name (ARN) of the parameter group.
  ARN string `json:"ARN,omitempty"`

  // A description of the parameter group.
  Description string `json:"Description,omitempty"`

  // The name of the parameter group family that this parameter group is compatible with.
  Family string `json:"Family"`

  // The name of the parameter group.
  ParameterGroupName string `json:"ParameterGroupName"`

  // An map of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional.
  Parameters *Parameters `json:"Parameters,omitempty"`

  // An array of key-value pairs to apply to this parameter group.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key for the tag. May not be null.
  Key string `json:"Key"`

  // The tag's value. May be null.
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ARN" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ARN\": ")
	if tmp, err := json.Marshal(strct.ARN); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Family" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Family" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Family\": ")
	if tmp, err := json.Marshal(strct.Family); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ParameterGroupName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ParameterGroupName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ParameterGroupName\": ")
	if tmp, err := json.Marshal(strct.ParameterGroupName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Parameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Parameters\": ")
	if tmp, err := json.Marshal(strct.Parameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    FamilyReceived := false
    ParameterGroupNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ARN":
            if err := json.Unmarshal([]byte(v), &strct.ARN); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Family":
            if err := json.Unmarshal([]byte(v), &strct.Family); err != nil {
                return err
             }
            FamilyReceived = true
        case "ParameterGroupName":
            if err := json.Unmarshal([]byte(v), &strct.ParameterGroupName); err != nil {
                return err
             }
            ParameterGroupNameReceived = true
        case "Parameters":
            if err := json.Unmarshal([]byte(v), &strct.Parameters); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Family (a required property) was received
    if !FamilyReceived {
        return errors.New("\"Family\" is required but was not present")
    }
    // check if ParameterGroupName (a required property) was received
    if !ParameterGroupNameReceived {
        return errors.New("\"ParameterGroupName\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
