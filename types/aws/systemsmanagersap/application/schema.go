// Code generated by schema-generate. DO NOT EDIT.

package application

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Credential 
type Credential struct {
  CredentialType string `json:"CredentialType,omitempty"`
  DatabaseName string `json:"DatabaseName,omitempty"`
  SecretId string `json:"SecretId,omitempty"`
}

// Resource Resource schema for AWS::SystemsManagerSAP::Application
type Resource struct {
  ApplicationId string `json:"ApplicationId"`
  ApplicationType string `json:"ApplicationType"`

  // The ARN of the Helix application
  Arn string `json:"Arn,omitempty"`
  Credentials []*Credential `json:"Credentials,omitempty"`
  Instances []string `json:"Instances,omitempty"`
  SapInstanceNumber string `json:"SapInstanceNumber,omitempty"`
  Sid string `json:"Sid,omitempty"`

  // The tags of a SystemsManagerSAP application.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Value string `json:"Value"`
}

func (strct *Credential) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CredentialType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CredentialType\": ")
	if tmp, err := json.Marshal(strct.CredentialType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DatabaseName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DatabaseName\": ")
	if tmp, err := json.Marshal(strct.DatabaseName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecretId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecretId\": ")
	if tmp, err := json.Marshal(strct.SecretId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Credential) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CredentialType":
            if err := json.Unmarshal([]byte(v), &strct.CredentialType); err != nil {
                return err
             }
        case "DatabaseName":
            if err := json.Unmarshal([]byte(v), &strct.DatabaseName); err != nil {
                return err
             }
        case "SecretId":
            if err := json.Unmarshal([]byte(v), &strct.SecretId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ApplicationId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ApplicationId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApplicationId\": ")
	if tmp, err := json.Marshal(strct.ApplicationId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ApplicationType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ApplicationType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApplicationType\": ")
	if tmp, err := json.Marshal(strct.ApplicationType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Credentials" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Credentials\": ")
	if tmp, err := json.Marshal(strct.Credentials); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Instances" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Instances\": ")
	if tmp, err := json.Marshal(strct.Instances); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SapInstanceNumber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SapInstanceNumber\": ")
	if tmp, err := json.Marshal(strct.SapInstanceNumber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Sid" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Sid\": ")
	if tmp, err := json.Marshal(strct.Sid); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ApplicationIdReceived := false
    ApplicationTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ApplicationId":
            if err := json.Unmarshal([]byte(v), &strct.ApplicationId); err != nil {
                return err
             }
            ApplicationIdReceived = true
        case "ApplicationType":
            if err := json.Unmarshal([]byte(v), &strct.ApplicationType); err != nil {
                return err
             }
            ApplicationTypeReceived = true
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Credentials":
            if err := json.Unmarshal([]byte(v), &strct.Credentials); err != nil {
                return err
             }
        case "Instances":
            if err := json.Unmarshal([]byte(v), &strct.Instances); err != nil {
                return err
             }
        case "SapInstanceNumber":
            if err := json.Unmarshal([]byte(v), &strct.SapInstanceNumber); err != nil {
                return err
             }
        case "Sid":
            if err := json.Unmarshal([]byte(v), &strct.Sid); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ApplicationId (a required property) was received
    if !ApplicationIdReceived {
        return errors.New("\"ApplicationId\" is required but was not present")
    }
    // check if ApplicationType (a required property) was received
    if !ApplicationTypeReceived {
        return errors.New("\"ApplicationType\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
