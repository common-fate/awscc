// Code generated by schema-generate. DO NOT EDIT.

package branch

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// BasicAuthConfig 
type BasicAuthConfig struct {
  EnableBasicAuth bool `json:"EnableBasicAuth,omitempty"`
  Password string `json:"Password"`
  Username string `json:"Username"`
}

// EnvironmentVariable 
type EnvironmentVariable struct {
  Name string `json:"Name"`
  Value string `json:"Value"`
}

// Resource The AWS::Amplify::Branch resource creates a new branch within an app.
type Resource struct {
  AppId string `json:"AppId"`
  Arn string `json:"Arn,omitempty"`
  BasicAuthConfig *BasicAuthConfig `json:"BasicAuthConfig,omitempty"`
  BranchName string `json:"BranchName"`
  BuildSpec string `json:"BuildSpec,omitempty"`
  Description string `json:"Description,omitempty"`
  EnableAutoBuild bool `json:"EnableAutoBuild,omitempty"`
  EnablePerformanceMode bool `json:"EnablePerformanceMode,omitempty"`
  EnablePullRequestPreview bool `json:"EnablePullRequestPreview,omitempty"`
  EnvironmentVariables []*EnvironmentVariable `json:"EnvironmentVariables,omitempty"`
  Framework string `json:"Framework,omitempty"`
  PullRequestEnvironmentName string `json:"PullRequestEnvironmentName,omitempty"`
  Stage string `json:"Stage,omitempty"`
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *BasicAuthConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "EnableBasicAuth" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnableBasicAuth\": ")
	if tmp, err := json.Marshal(strct.EnableBasicAuth); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Password" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Password" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Password\": ")
	if tmp, err := json.Marshal(strct.Password); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Username" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Username" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Username\": ")
	if tmp, err := json.Marshal(strct.Username); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *BasicAuthConfig) UnmarshalJSON(b []byte) error {
    PasswordReceived := false
    UsernameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "EnableBasicAuth":
            if err := json.Unmarshal([]byte(v), &strct.EnableBasicAuth); err != nil {
                return err
             }
        case "Password":
            if err := json.Unmarshal([]byte(v), &strct.Password); err != nil {
                return err
             }
            PasswordReceived = true
        case "Username":
            if err := json.Unmarshal([]byte(v), &strct.Username); err != nil {
                return err
             }
            UsernameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Password (a required property) was received
    if !PasswordReceived {
        return errors.New("\"Password\" is required but was not present")
    }
    // check if Username (a required property) was received
    if !UsernameReceived {
        return errors.New("\"Username\" is required but was not present")
    }
    return nil
}

func (strct *EnvironmentVariable) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *EnvironmentVariable) UnmarshalJSON(b []byte) error {
    NameReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AppId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AppId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AppId\": ")
	if tmp, err := json.Marshal(strct.AppId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BasicAuthConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BasicAuthConfig\": ")
	if tmp, err := json.Marshal(strct.BasicAuthConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "BranchName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "BranchName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BranchName\": ")
	if tmp, err := json.Marshal(strct.BranchName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BuildSpec" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BuildSpec\": ")
	if tmp, err := json.Marshal(strct.BuildSpec); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EnableAutoBuild" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnableAutoBuild\": ")
	if tmp, err := json.Marshal(strct.EnableAutoBuild); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EnablePerformanceMode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnablePerformanceMode\": ")
	if tmp, err := json.Marshal(strct.EnablePerformanceMode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EnablePullRequestPreview" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnablePullRequestPreview\": ")
	if tmp, err := json.Marshal(strct.EnablePullRequestPreview); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EnvironmentVariables" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnvironmentVariables\": ")
	if tmp, err := json.Marshal(strct.EnvironmentVariables); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Framework" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Framework\": ")
	if tmp, err := json.Marshal(strct.Framework); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PullRequestEnvironmentName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PullRequestEnvironmentName\": ")
	if tmp, err := json.Marshal(strct.PullRequestEnvironmentName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Stage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Stage\": ")
	if tmp, err := json.Marshal(strct.Stage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AppIdReceived := false
    BranchNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AppId":
            if err := json.Unmarshal([]byte(v), &strct.AppId); err != nil {
                return err
             }
            AppIdReceived = true
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "BasicAuthConfig":
            if err := json.Unmarshal([]byte(v), &strct.BasicAuthConfig); err != nil {
                return err
             }
        case "BranchName":
            if err := json.Unmarshal([]byte(v), &strct.BranchName); err != nil {
                return err
             }
            BranchNameReceived = true
        case "BuildSpec":
            if err := json.Unmarshal([]byte(v), &strct.BuildSpec); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "EnableAutoBuild":
            if err := json.Unmarshal([]byte(v), &strct.EnableAutoBuild); err != nil {
                return err
             }
        case "EnablePerformanceMode":
            if err := json.Unmarshal([]byte(v), &strct.EnablePerformanceMode); err != nil {
                return err
             }
        case "EnablePullRequestPreview":
            if err := json.Unmarshal([]byte(v), &strct.EnablePullRequestPreview); err != nil {
                return err
             }
        case "EnvironmentVariables":
            if err := json.Unmarshal([]byte(v), &strct.EnvironmentVariables); err != nil {
                return err
             }
        case "Framework":
            if err := json.Unmarshal([]byte(v), &strct.Framework); err != nil {
                return err
             }
        case "PullRequestEnvironmentName":
            if err := json.Unmarshal([]byte(v), &strct.PullRequestEnvironmentName); err != nil {
                return err
             }
        case "Stage":
            if err := json.Unmarshal([]byte(v), &strct.Stage); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AppId (a required property) was received
    if !AppIdReceived {
        return errors.New("\"AppId\" is required but was not present")
    }
    // check if BranchName (a required property) was received
    if !BranchNameReceived {
        return errors.New("\"BranchName\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
