// Code generated by schema-generate. DO NOT EDIT.

package originendpoint

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Authorization CDN Authorization credentials
type Authorization struct {

  // The Amazon Resource Name (ARN) for the secret in Secrets Manager that your Content Distribution Network (CDN) uses for authorization to access your endpoint.
  CdnIdentifierSecret string `json:"CdnIdentifierSecret"`

  // The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.
  SecretsRoleArn string `json:"SecretsRoleArn"`
}

// CmafEncryption A Common Media Application Format (CMAF) encryption configuration.
type CmafEncryption struct {

  // An optional 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting blocks. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).
  ConstantInitializationVector string `json:"ConstantInitializationVector,omitempty"`

  // The encryption method used
  EncryptionMethod string `json:"EncryptionMethod,omitempty"`

  // Time (in seconds) between each encryption key rotation.
  KeyRotationIntervalSeconds int `json:"KeyRotationIntervalSeconds,omitempty"`
  SpekeKeyProvider *SpekeKeyProvider `json:"SpekeKeyProvider"`
}

// CmafPackage A Common Media Application Format (CMAF) packaging configuration.
type CmafPackage struct {
  Encryption *CmafEncryption `json:"Encryption,omitempty"`

  // A list of HLS manifest configurations
  HlsManifests []*HlsManifest `json:"HlsManifests,omitempty"`

  // Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
  SegmentDurationSeconds int `json:"SegmentDurationSeconds,omitempty"`

  // An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
  SegmentPrefix string `json:"SegmentPrefix,omitempty"`
  StreamSelection *StreamSelection `json:"StreamSelection,omitempty"`
}

// DashEncryption A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
type DashEncryption struct {

  // Time (in seconds) between each encryption key rotation.
  KeyRotationIntervalSeconds int `json:"KeyRotationIntervalSeconds,omitempty"`
  SpekeKeyProvider *SpekeKeyProvider `json:"SpekeKeyProvider"`
}

// DashPackage A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
type DashPackage struct {

  // A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
  AdTriggers []string `json:"AdTriggers,omitempty"`
  AdsOnDeliveryRestrictions string `json:"AdsOnDeliveryRestrictions,omitempty"`
  Encryption *DashEncryption `json:"Encryption,omitempty"`

  // When enabled, an I-Frame only stream will be included in the output.
  IncludeIframeOnlyStream bool `json:"IncludeIframeOnlyStream,omitempty"`

  // Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
  ManifestLayout string `json:"ManifestLayout,omitempty"`

  // Time window (in seconds) contained in each manifest.
  ManifestWindowSeconds int `json:"ManifestWindowSeconds,omitempty"`

  // Minimum duration (in seconds) that a player will buffer media before starting the presentation.
  MinBufferTimeSeconds int `json:"MinBufferTimeSeconds,omitempty"`

  // Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).
  MinUpdatePeriodSeconds int `json:"MinUpdatePeriodSeconds,omitempty"`

  // A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Channel source contains SCTE-35 ad markers.
  PeriodTriggers []string `json:"PeriodTriggers,omitempty"`

  // The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
  Profile string `json:"Profile,omitempty"`

  // Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
  SegmentDurationSeconds int `json:"SegmentDurationSeconds,omitempty"`

  // Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
  SegmentTemplateFormat string `json:"SegmentTemplateFormat,omitempty"`
  StreamSelection *StreamSelection `json:"StreamSelection,omitempty"`

  // Duration (in seconds) to delay live content before presentation.
  SuggestedPresentationDelaySeconds int `json:"SuggestedPresentationDelaySeconds,omitempty"`

  // Determines the type of UTCTiming included in the Media Presentation Description (MPD)
  UtcTiming string `json:"UtcTiming,omitempty"`

  // Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO, HTTP-HEAD or HTTP-XSDATE
  UtcTimingUri string `json:"UtcTimingUri,omitempty"`
}

// EncryptionContractConfiguration The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.
type EncryptionContractConfiguration struct {

  // A collection of audio encryption presets.
  PresetSpeke20Audio string `json:"PresetSpeke20Audio"`

  // A collection of video encryption presets.
  PresetSpeke20Video string `json:"PresetSpeke20Video"`
}

// HlsEncryption An HTTP Live Streaming (HLS) encryption configuration.
type HlsEncryption struct {

  // A constant initialization vector for encryption (optional). When not specified the initialization vector will be periodically rotated.
  ConstantInitializationVector string `json:"ConstantInitializationVector,omitempty"`

  // The encryption method to use.
  EncryptionMethod string `json:"EncryptionMethod,omitempty"`

  // Interval (in seconds) between each encryption key rotation.
  KeyRotationIntervalSeconds int `json:"KeyRotationIntervalSeconds,omitempty"`

  // When enabled, the EXT-X-KEY tag will be repeated in output manifests.
  RepeatExtXKey bool `json:"RepeatExtXKey,omitempty"`
  SpekeKeyProvider *SpekeKeyProvider `json:"SpekeKeyProvider"`
}

// HlsManifest A HTTP Live Streaming (HLS) manifest configuration.
type HlsManifest struct {

  // This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
  AdMarkers string `json:"AdMarkers,omitempty"`

  // A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
  AdTriggers []string `json:"AdTriggers,omitempty"`
  AdsOnDeliveryRestrictions string `json:"AdsOnDeliveryRestrictions,omitempty"`

  // The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created.
  Id string `json:"Id"`

  // When enabled, an I-Frame only stream will be included in the output.
  IncludeIframeOnlyStream bool `json:"IncludeIframeOnlyStream,omitempty"`

  // An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint.
  ManifestName string `json:"ManifestName,omitempty"`

  // The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
  PlaylistType string `json:"PlaylistType,omitempty"`

  // Time window (in seconds) contained in each parent manifest.
  PlaylistWindowSeconds int `json:"PlaylistWindowSeconds,omitempty"`

  // The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
  ProgramDateTimeIntervalSeconds int `json:"ProgramDateTimeIntervalSeconds,omitempty"`

  // The URL of the packaged OriginEndpoint for consumption.
  Url string `json:"Url,omitempty"`
}

// HlsPackage An HTTP Live Streaming (HLS) packaging configuration.
type HlsPackage struct {

  // This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
  AdMarkers string `json:"AdMarkers,omitempty"`

  // A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
  AdTriggers []string `json:"AdTriggers,omitempty"`
  AdsOnDeliveryRestrictions string `json:"AdsOnDeliveryRestrictions,omitempty"`
  Encryption *HlsEncryption `json:"Encryption,omitempty"`

  // When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
  IncludeDvbSubtitles bool `json:"IncludeDvbSubtitles,omitempty"`

  // When enabled, an I-Frame only stream will be included in the output.
  IncludeIframeOnlyStream bool `json:"IncludeIframeOnlyStream,omitempty"`

  // The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
  PlaylistType string `json:"PlaylistType,omitempty"`

  // Time window (in seconds) contained in each parent manifest.
  PlaylistWindowSeconds int `json:"PlaylistWindowSeconds,omitempty"`

  // The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
  ProgramDateTimeIntervalSeconds int `json:"ProgramDateTimeIntervalSeconds,omitempty"`

  // Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
  SegmentDurationSeconds int `json:"SegmentDurationSeconds,omitempty"`
  StreamSelection *StreamSelection `json:"StreamSelection,omitempty"`

  // When enabled, audio streams will be placed in rendition groups in the output.
  UseAudioRenditionGroup bool `json:"UseAudioRenditionGroup,omitempty"`
}

// MssEncryption A Microsoft Smooth Streaming (MSS) encryption configuration.
type MssEncryption struct {
  SpekeKeyProvider *SpekeKeyProvider `json:"SpekeKeyProvider"`
}

// MssPackage A Microsoft Smooth Streaming (MSS) packaging configuration.
type MssPackage struct {
  Encryption *MssEncryption `json:"Encryption,omitempty"`

  // The time window (in seconds) contained in each manifest.
  ManifestWindowSeconds int `json:"ManifestWindowSeconds,omitempty"`

  // The duration (in seconds) of each segment.
  SegmentDurationSeconds int `json:"SegmentDurationSeconds,omitempty"`
  StreamSelection *StreamSelection `json:"StreamSelection,omitempty"`
}

// Resource Resource schema for AWS::MediaPackage::OriginEndpoint
type Resource struct {

  // The Amazon Resource Name (ARN) assigned to the OriginEndpoint.
  Arn string `json:"Arn,omitempty"`
  Authorization *Authorization `json:"Authorization,omitempty"`

  // The ID of the Channel the OriginEndpoint is associated with.
  ChannelId string `json:"ChannelId"`
  CmafPackage *CmafPackage `json:"CmafPackage,omitempty"`
  DashPackage *DashPackage `json:"DashPackage,omitempty"`

  // A short text description of the OriginEndpoint.
  Description string `json:"Description,omitempty"`
  HlsPackage *HlsPackage `json:"HlsPackage,omitempty"`

  // The ID of the OriginEndpoint.
  Id string `json:"Id"`

  // A short string appended to the end of the OriginEndpoint URL.
  ManifestName string `json:"ManifestName,omitempty"`
  MssPackage *MssPackage `json:"MssPackage,omitempty"`

  // Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
  Origination string `json:"Origination,omitempty"`

  // Maximum duration (seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.
  StartoverWindowSeconds int `json:"StartoverWindowSeconds,omitempty"`

  // A collection of tags associated with a resource
  Tags []*Tag `json:"Tags,omitempty"`

  // Amount of delay (seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.
  TimeDelaySeconds int `json:"TimeDelaySeconds,omitempty"`

  // The URL of the packaged OriginEndpoint for consumption.
  Url string `json:"Url,omitempty"`

  // A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
  Whitelist []string `json:"Whitelist,omitempty"`
}

// SpekeKeyProvider A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
type SpekeKeyProvider struct {

  // An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.
  CertificateArn string `json:"CertificateArn,omitempty"`
  EncryptionContractConfiguration *EncryptionContractConfiguration `json:"EncryptionContractConfiguration,omitempty"`

  // The resource ID to include in key requests.
  ResourceId string `json:"ResourceId"`

  // An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.
  RoleArn string `json:"RoleArn"`

  // The system IDs to include in key requests.
  SystemIds []string `json:"SystemIds"`

  // The URL of the external key provider service.
  Url string `json:"Url"`
}

// StreamSelection A StreamSelection configuration.
type StreamSelection struct {

  // The maximum video bitrate (bps) to include in output.
  MaxVideoBitsPerSecond int `json:"MaxVideoBitsPerSecond,omitempty"`

  // The minimum video bitrate (bps) to include in output.
  MinVideoBitsPerSecond int `json:"MinVideoBitsPerSecond,omitempty"`

  // A directive that determines the order of streams in the output.
  StreamOrder string `json:"StreamOrder,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *Authorization) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "CdnIdentifierSecret" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CdnIdentifierSecret" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CdnIdentifierSecret\": ")
	if tmp, err := json.Marshal(strct.CdnIdentifierSecret); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretsRoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SecretsRoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecretsRoleArn\": ")
	if tmp, err := json.Marshal(strct.SecretsRoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Authorization) UnmarshalJSON(b []byte) error {
    CdnIdentifierSecretReceived := false
    SecretsRoleArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CdnIdentifierSecret":
            if err := json.Unmarshal([]byte(v), &strct.CdnIdentifierSecret); err != nil {
                return err
             }
            CdnIdentifierSecretReceived = true
        case "SecretsRoleArn":
            if err := json.Unmarshal([]byte(v), &strct.SecretsRoleArn); err != nil {
                return err
             }
            SecretsRoleArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CdnIdentifierSecret (a required property) was received
    if !CdnIdentifierSecretReceived {
        return errors.New("\"CdnIdentifierSecret\" is required but was not present")
    }
    // check if SecretsRoleArn (a required property) was received
    if !SecretsRoleArnReceived {
        return errors.New("\"SecretsRoleArn\" is required but was not present")
    }
    return nil
}

func (strct *CmafEncryption) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ConstantInitializationVector" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConstantInitializationVector\": ")
	if tmp, err := json.Marshal(strct.ConstantInitializationVector); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EncryptionMethod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EncryptionMethod\": ")
	if tmp, err := json.Marshal(strct.EncryptionMethod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "KeyRotationIntervalSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KeyRotationIntervalSeconds\": ")
	if tmp, err := json.Marshal(strct.KeyRotationIntervalSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SpekeKeyProvider" field is required
    if strct.SpekeKeyProvider == nil {
        return nil, errors.New("SpekeKeyProvider is a required field")
    }
    // Marshal the "SpekeKeyProvider" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SpekeKeyProvider\": ")
	if tmp, err := json.Marshal(strct.SpekeKeyProvider); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CmafEncryption) UnmarshalJSON(b []byte) error {
    SpekeKeyProviderReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ConstantInitializationVector":
            if err := json.Unmarshal([]byte(v), &strct.ConstantInitializationVector); err != nil {
                return err
             }
        case "EncryptionMethod":
            if err := json.Unmarshal([]byte(v), &strct.EncryptionMethod); err != nil {
                return err
             }
        case "KeyRotationIntervalSeconds":
            if err := json.Unmarshal([]byte(v), &strct.KeyRotationIntervalSeconds); err != nil {
                return err
             }
        case "SpekeKeyProvider":
            if err := json.Unmarshal([]byte(v), &strct.SpekeKeyProvider); err != nil {
                return err
             }
            SpekeKeyProviderReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SpekeKeyProvider (a required property) was received
    if !SpekeKeyProviderReceived {
        return errors.New("\"SpekeKeyProvider\" is required but was not present")
    }
    return nil
}

func (strct *CmafPackage) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Encryption" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Encryption\": ")
	if tmp, err := json.Marshal(strct.Encryption); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HlsManifests" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HlsManifests\": ")
	if tmp, err := json.Marshal(strct.HlsManifests); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SegmentDurationSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SegmentDurationSeconds\": ")
	if tmp, err := json.Marshal(strct.SegmentDurationSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SegmentPrefix" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SegmentPrefix\": ")
	if tmp, err := json.Marshal(strct.SegmentPrefix); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StreamSelection" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StreamSelection\": ")
	if tmp, err := json.Marshal(strct.StreamSelection); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CmafPackage) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Encryption":
            if err := json.Unmarshal([]byte(v), &strct.Encryption); err != nil {
                return err
             }
        case "HlsManifests":
            if err := json.Unmarshal([]byte(v), &strct.HlsManifests); err != nil {
                return err
             }
        case "SegmentDurationSeconds":
            if err := json.Unmarshal([]byte(v), &strct.SegmentDurationSeconds); err != nil {
                return err
             }
        case "SegmentPrefix":
            if err := json.Unmarshal([]byte(v), &strct.SegmentPrefix); err != nil {
                return err
             }
        case "StreamSelection":
            if err := json.Unmarshal([]byte(v), &strct.StreamSelection); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *DashEncryption) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "KeyRotationIntervalSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KeyRotationIntervalSeconds\": ")
	if tmp, err := json.Marshal(strct.KeyRotationIntervalSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SpekeKeyProvider" field is required
    if strct.SpekeKeyProvider == nil {
        return nil, errors.New("SpekeKeyProvider is a required field")
    }
    // Marshal the "SpekeKeyProvider" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SpekeKeyProvider\": ")
	if tmp, err := json.Marshal(strct.SpekeKeyProvider); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DashEncryption) UnmarshalJSON(b []byte) error {
    SpekeKeyProviderReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "KeyRotationIntervalSeconds":
            if err := json.Unmarshal([]byte(v), &strct.KeyRotationIntervalSeconds); err != nil {
                return err
             }
        case "SpekeKeyProvider":
            if err := json.Unmarshal([]byte(v), &strct.SpekeKeyProvider); err != nil {
                return err
             }
            SpekeKeyProviderReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SpekeKeyProvider (a required property) was received
    if !SpekeKeyProviderReceived {
        return errors.New("\"SpekeKeyProvider\" is required but was not present")
    }
    return nil
}

func (strct *DashPackage) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AdTriggers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AdTriggers\": ")
	if tmp, err := json.Marshal(strct.AdTriggers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AdsOnDeliveryRestrictions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AdsOnDeliveryRestrictions\": ")
	if tmp, err := json.Marshal(strct.AdsOnDeliveryRestrictions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Encryption" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Encryption\": ")
	if tmp, err := json.Marshal(strct.Encryption); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IncludeIframeOnlyStream" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IncludeIframeOnlyStream\": ")
	if tmp, err := json.Marshal(strct.IncludeIframeOnlyStream); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ManifestLayout" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ManifestLayout\": ")
	if tmp, err := json.Marshal(strct.ManifestLayout); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ManifestWindowSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ManifestWindowSeconds\": ")
	if tmp, err := json.Marshal(strct.ManifestWindowSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MinBufferTimeSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MinBufferTimeSeconds\": ")
	if tmp, err := json.Marshal(strct.MinBufferTimeSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MinUpdatePeriodSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MinUpdatePeriodSeconds\": ")
	if tmp, err := json.Marshal(strct.MinUpdatePeriodSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PeriodTriggers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PeriodTriggers\": ")
	if tmp, err := json.Marshal(strct.PeriodTriggers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Profile" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Profile\": ")
	if tmp, err := json.Marshal(strct.Profile); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SegmentDurationSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SegmentDurationSeconds\": ")
	if tmp, err := json.Marshal(strct.SegmentDurationSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SegmentTemplateFormat" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SegmentTemplateFormat\": ")
	if tmp, err := json.Marshal(strct.SegmentTemplateFormat); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StreamSelection" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StreamSelection\": ")
	if tmp, err := json.Marshal(strct.StreamSelection); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SuggestedPresentationDelaySeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SuggestedPresentationDelaySeconds\": ")
	if tmp, err := json.Marshal(strct.SuggestedPresentationDelaySeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UtcTiming" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UtcTiming\": ")
	if tmp, err := json.Marshal(strct.UtcTiming); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UtcTimingUri" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UtcTimingUri\": ")
	if tmp, err := json.Marshal(strct.UtcTimingUri); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *DashPackage) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AdTriggers":
            if err := json.Unmarshal([]byte(v), &strct.AdTriggers); err != nil {
                return err
             }
        case "AdsOnDeliveryRestrictions":
            if err := json.Unmarshal([]byte(v), &strct.AdsOnDeliveryRestrictions); err != nil {
                return err
             }
        case "Encryption":
            if err := json.Unmarshal([]byte(v), &strct.Encryption); err != nil {
                return err
             }
        case "IncludeIframeOnlyStream":
            if err := json.Unmarshal([]byte(v), &strct.IncludeIframeOnlyStream); err != nil {
                return err
             }
        case "ManifestLayout":
            if err := json.Unmarshal([]byte(v), &strct.ManifestLayout); err != nil {
                return err
             }
        case "ManifestWindowSeconds":
            if err := json.Unmarshal([]byte(v), &strct.ManifestWindowSeconds); err != nil {
                return err
             }
        case "MinBufferTimeSeconds":
            if err := json.Unmarshal([]byte(v), &strct.MinBufferTimeSeconds); err != nil {
                return err
             }
        case "MinUpdatePeriodSeconds":
            if err := json.Unmarshal([]byte(v), &strct.MinUpdatePeriodSeconds); err != nil {
                return err
             }
        case "PeriodTriggers":
            if err := json.Unmarshal([]byte(v), &strct.PeriodTriggers); err != nil {
                return err
             }
        case "Profile":
            if err := json.Unmarshal([]byte(v), &strct.Profile); err != nil {
                return err
             }
        case "SegmentDurationSeconds":
            if err := json.Unmarshal([]byte(v), &strct.SegmentDurationSeconds); err != nil {
                return err
             }
        case "SegmentTemplateFormat":
            if err := json.Unmarshal([]byte(v), &strct.SegmentTemplateFormat); err != nil {
                return err
             }
        case "StreamSelection":
            if err := json.Unmarshal([]byte(v), &strct.StreamSelection); err != nil {
                return err
             }
        case "SuggestedPresentationDelaySeconds":
            if err := json.Unmarshal([]byte(v), &strct.SuggestedPresentationDelaySeconds); err != nil {
                return err
             }
        case "UtcTiming":
            if err := json.Unmarshal([]byte(v), &strct.UtcTiming); err != nil {
                return err
             }
        case "UtcTimingUri":
            if err := json.Unmarshal([]byte(v), &strct.UtcTimingUri); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *EncryptionContractConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "PresetSpeke20Audio" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "PresetSpeke20Audio" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PresetSpeke20Audio\": ")
	if tmp, err := json.Marshal(strct.PresetSpeke20Audio); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PresetSpeke20Video" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "PresetSpeke20Video" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PresetSpeke20Video\": ")
	if tmp, err := json.Marshal(strct.PresetSpeke20Video); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *EncryptionContractConfiguration) UnmarshalJSON(b []byte) error {
    PresetSpeke20AudioReceived := false
    PresetSpeke20VideoReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "PresetSpeke20Audio":
            if err := json.Unmarshal([]byte(v), &strct.PresetSpeke20Audio); err != nil {
                return err
             }
            PresetSpeke20AudioReceived = true
        case "PresetSpeke20Video":
            if err := json.Unmarshal([]byte(v), &strct.PresetSpeke20Video); err != nil {
                return err
             }
            PresetSpeke20VideoReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if PresetSpeke20Audio (a required property) was received
    if !PresetSpeke20AudioReceived {
        return errors.New("\"PresetSpeke20Audio\" is required but was not present")
    }
    // check if PresetSpeke20Video (a required property) was received
    if !PresetSpeke20VideoReceived {
        return errors.New("\"PresetSpeke20Video\" is required but was not present")
    }
    return nil
}

func (strct *HlsEncryption) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ConstantInitializationVector" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConstantInitializationVector\": ")
	if tmp, err := json.Marshal(strct.ConstantInitializationVector); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EncryptionMethod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EncryptionMethod\": ")
	if tmp, err := json.Marshal(strct.EncryptionMethod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "KeyRotationIntervalSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"KeyRotationIntervalSeconds\": ")
	if tmp, err := json.Marshal(strct.KeyRotationIntervalSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RepeatExtXKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RepeatExtXKey\": ")
	if tmp, err := json.Marshal(strct.RepeatExtXKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SpekeKeyProvider" field is required
    if strct.SpekeKeyProvider == nil {
        return nil, errors.New("SpekeKeyProvider is a required field")
    }
    // Marshal the "SpekeKeyProvider" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SpekeKeyProvider\": ")
	if tmp, err := json.Marshal(strct.SpekeKeyProvider); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *HlsEncryption) UnmarshalJSON(b []byte) error {
    SpekeKeyProviderReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ConstantInitializationVector":
            if err := json.Unmarshal([]byte(v), &strct.ConstantInitializationVector); err != nil {
                return err
             }
        case "EncryptionMethod":
            if err := json.Unmarshal([]byte(v), &strct.EncryptionMethod); err != nil {
                return err
             }
        case "KeyRotationIntervalSeconds":
            if err := json.Unmarshal([]byte(v), &strct.KeyRotationIntervalSeconds); err != nil {
                return err
             }
        case "RepeatExtXKey":
            if err := json.Unmarshal([]byte(v), &strct.RepeatExtXKey); err != nil {
                return err
             }
        case "SpekeKeyProvider":
            if err := json.Unmarshal([]byte(v), &strct.SpekeKeyProvider); err != nil {
                return err
             }
            SpekeKeyProviderReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SpekeKeyProvider (a required property) was received
    if !SpekeKeyProviderReceived {
        return errors.New("\"SpekeKeyProvider\" is required but was not present")
    }
    return nil
}

func (strct *HlsManifest) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AdMarkers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AdMarkers\": ")
	if tmp, err := json.Marshal(strct.AdMarkers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AdTriggers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AdTriggers\": ")
	if tmp, err := json.Marshal(strct.AdTriggers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AdsOnDeliveryRestrictions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AdsOnDeliveryRestrictions\": ")
	if tmp, err := json.Marshal(strct.AdsOnDeliveryRestrictions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Id" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IncludeIframeOnlyStream" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IncludeIframeOnlyStream\": ")
	if tmp, err := json.Marshal(strct.IncludeIframeOnlyStream); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ManifestName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ManifestName\": ")
	if tmp, err := json.Marshal(strct.ManifestName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PlaylistType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PlaylistType\": ")
	if tmp, err := json.Marshal(strct.PlaylistType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PlaylistWindowSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PlaylistWindowSeconds\": ")
	if tmp, err := json.Marshal(strct.PlaylistWindowSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProgramDateTimeIntervalSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProgramDateTimeIntervalSeconds\": ")
	if tmp, err := json.Marshal(strct.ProgramDateTimeIntervalSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *HlsManifest) UnmarshalJSON(b []byte) error {
    IdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AdMarkers":
            if err := json.Unmarshal([]byte(v), &strct.AdMarkers); err != nil {
                return err
             }
        case "AdTriggers":
            if err := json.Unmarshal([]byte(v), &strct.AdTriggers); err != nil {
                return err
             }
        case "AdsOnDeliveryRestrictions":
            if err := json.Unmarshal([]byte(v), &strct.AdsOnDeliveryRestrictions); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
            IdReceived = true
        case "IncludeIframeOnlyStream":
            if err := json.Unmarshal([]byte(v), &strct.IncludeIframeOnlyStream); err != nil {
                return err
             }
        case "ManifestName":
            if err := json.Unmarshal([]byte(v), &strct.ManifestName); err != nil {
                return err
             }
        case "PlaylistType":
            if err := json.Unmarshal([]byte(v), &strct.PlaylistType); err != nil {
                return err
             }
        case "PlaylistWindowSeconds":
            if err := json.Unmarshal([]byte(v), &strct.PlaylistWindowSeconds); err != nil {
                return err
             }
        case "ProgramDateTimeIntervalSeconds":
            if err := json.Unmarshal([]byte(v), &strct.ProgramDateTimeIntervalSeconds); err != nil {
                return err
             }
        case "Url":
            if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Id (a required property) was received
    if !IdReceived {
        return errors.New("\"Id\" is required but was not present")
    }
    return nil
}

func (strct *HlsPackage) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AdMarkers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AdMarkers\": ")
	if tmp, err := json.Marshal(strct.AdMarkers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AdTriggers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AdTriggers\": ")
	if tmp, err := json.Marshal(strct.AdTriggers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AdsOnDeliveryRestrictions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AdsOnDeliveryRestrictions\": ")
	if tmp, err := json.Marshal(strct.AdsOnDeliveryRestrictions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Encryption" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Encryption\": ")
	if tmp, err := json.Marshal(strct.Encryption); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IncludeDvbSubtitles" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IncludeDvbSubtitles\": ")
	if tmp, err := json.Marshal(strct.IncludeDvbSubtitles); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IncludeIframeOnlyStream" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IncludeIframeOnlyStream\": ")
	if tmp, err := json.Marshal(strct.IncludeIframeOnlyStream); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PlaylistType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PlaylistType\": ")
	if tmp, err := json.Marshal(strct.PlaylistType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PlaylistWindowSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PlaylistWindowSeconds\": ")
	if tmp, err := json.Marshal(strct.PlaylistWindowSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ProgramDateTimeIntervalSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ProgramDateTimeIntervalSeconds\": ")
	if tmp, err := json.Marshal(strct.ProgramDateTimeIntervalSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SegmentDurationSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SegmentDurationSeconds\": ")
	if tmp, err := json.Marshal(strct.SegmentDurationSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StreamSelection" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StreamSelection\": ")
	if tmp, err := json.Marshal(strct.StreamSelection); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UseAudioRenditionGroup" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UseAudioRenditionGroup\": ")
	if tmp, err := json.Marshal(strct.UseAudioRenditionGroup); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *HlsPackage) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AdMarkers":
            if err := json.Unmarshal([]byte(v), &strct.AdMarkers); err != nil {
                return err
             }
        case "AdTriggers":
            if err := json.Unmarshal([]byte(v), &strct.AdTriggers); err != nil {
                return err
             }
        case "AdsOnDeliveryRestrictions":
            if err := json.Unmarshal([]byte(v), &strct.AdsOnDeliveryRestrictions); err != nil {
                return err
             }
        case "Encryption":
            if err := json.Unmarshal([]byte(v), &strct.Encryption); err != nil {
                return err
             }
        case "IncludeDvbSubtitles":
            if err := json.Unmarshal([]byte(v), &strct.IncludeDvbSubtitles); err != nil {
                return err
             }
        case "IncludeIframeOnlyStream":
            if err := json.Unmarshal([]byte(v), &strct.IncludeIframeOnlyStream); err != nil {
                return err
             }
        case "PlaylistType":
            if err := json.Unmarshal([]byte(v), &strct.PlaylistType); err != nil {
                return err
             }
        case "PlaylistWindowSeconds":
            if err := json.Unmarshal([]byte(v), &strct.PlaylistWindowSeconds); err != nil {
                return err
             }
        case "ProgramDateTimeIntervalSeconds":
            if err := json.Unmarshal([]byte(v), &strct.ProgramDateTimeIntervalSeconds); err != nil {
                return err
             }
        case "SegmentDurationSeconds":
            if err := json.Unmarshal([]byte(v), &strct.SegmentDurationSeconds); err != nil {
                return err
             }
        case "StreamSelection":
            if err := json.Unmarshal([]byte(v), &strct.StreamSelection); err != nil {
                return err
             }
        case "UseAudioRenditionGroup":
            if err := json.Unmarshal([]byte(v), &strct.UseAudioRenditionGroup); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *MssEncryption) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "SpekeKeyProvider" field is required
    if strct.SpekeKeyProvider == nil {
        return nil, errors.New("SpekeKeyProvider is a required field")
    }
    // Marshal the "SpekeKeyProvider" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SpekeKeyProvider\": ")
	if tmp, err := json.Marshal(strct.SpekeKeyProvider); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MssEncryption) UnmarshalJSON(b []byte) error {
    SpekeKeyProviderReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "SpekeKeyProvider":
            if err := json.Unmarshal([]byte(v), &strct.SpekeKeyProvider); err != nil {
                return err
             }
            SpekeKeyProviderReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SpekeKeyProvider (a required property) was received
    if !SpekeKeyProviderReceived {
        return errors.New("\"SpekeKeyProvider\" is required but was not present")
    }
    return nil
}

func (strct *MssPackage) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Encryption" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Encryption\": ")
	if tmp, err := json.Marshal(strct.Encryption); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ManifestWindowSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ManifestWindowSeconds\": ")
	if tmp, err := json.Marshal(strct.ManifestWindowSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SegmentDurationSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SegmentDurationSeconds\": ")
	if tmp, err := json.Marshal(strct.SegmentDurationSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StreamSelection" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StreamSelection\": ")
	if tmp, err := json.Marshal(strct.StreamSelection); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MssPackage) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Encryption":
            if err := json.Unmarshal([]byte(v), &strct.Encryption); err != nil {
                return err
             }
        case "ManifestWindowSeconds":
            if err := json.Unmarshal([]byte(v), &strct.ManifestWindowSeconds); err != nil {
                return err
             }
        case "SegmentDurationSeconds":
            if err := json.Unmarshal([]byte(v), &strct.SegmentDurationSeconds); err != nil {
                return err
             }
        case "StreamSelection":
            if err := json.Unmarshal([]byte(v), &strct.StreamSelection); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Authorization" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Authorization\": ")
	if tmp, err := json.Marshal(strct.Authorization); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ChannelId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ChannelId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ChannelId\": ")
	if tmp, err := json.Marshal(strct.ChannelId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CmafPackage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CmafPackage\": ")
	if tmp, err := json.Marshal(strct.CmafPackage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DashPackage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DashPackage\": ")
	if tmp, err := json.Marshal(strct.DashPackage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HlsPackage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HlsPackage\": ")
	if tmp, err := json.Marshal(strct.HlsPackage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Id" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ManifestName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ManifestName\": ")
	if tmp, err := json.Marshal(strct.ManifestName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MssPackage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MssPackage\": ")
	if tmp, err := json.Marshal(strct.MssPackage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Origination" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Origination\": ")
	if tmp, err := json.Marshal(strct.Origination); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StartoverWindowSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StartoverWindowSeconds\": ")
	if tmp, err := json.Marshal(strct.StartoverWindowSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TimeDelaySeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TimeDelaySeconds\": ")
	if tmp, err := json.Marshal(strct.TimeDelaySeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Whitelist" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Whitelist\": ")
	if tmp, err := json.Marshal(strct.Whitelist); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ChannelIdReceived := false
    IdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Authorization":
            if err := json.Unmarshal([]byte(v), &strct.Authorization); err != nil {
                return err
             }
        case "ChannelId":
            if err := json.Unmarshal([]byte(v), &strct.ChannelId); err != nil {
                return err
             }
            ChannelIdReceived = true
        case "CmafPackage":
            if err := json.Unmarshal([]byte(v), &strct.CmafPackage); err != nil {
                return err
             }
        case "DashPackage":
            if err := json.Unmarshal([]byte(v), &strct.DashPackage); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "HlsPackage":
            if err := json.Unmarshal([]byte(v), &strct.HlsPackage); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
            IdReceived = true
        case "ManifestName":
            if err := json.Unmarshal([]byte(v), &strct.ManifestName); err != nil {
                return err
             }
        case "MssPackage":
            if err := json.Unmarshal([]byte(v), &strct.MssPackage); err != nil {
                return err
             }
        case "Origination":
            if err := json.Unmarshal([]byte(v), &strct.Origination); err != nil {
                return err
             }
        case "StartoverWindowSeconds":
            if err := json.Unmarshal([]byte(v), &strct.StartoverWindowSeconds); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TimeDelaySeconds":
            if err := json.Unmarshal([]byte(v), &strct.TimeDelaySeconds); err != nil {
                return err
             }
        case "Url":
            if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
                return err
             }
        case "Whitelist":
            if err := json.Unmarshal([]byte(v), &strct.Whitelist); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ChannelId (a required property) was received
    if !ChannelIdReceived {
        return errors.New("\"ChannelId\" is required but was not present")
    }
    // check if Id (a required property) was received
    if !IdReceived {
        return errors.New("\"Id\" is required but was not present")
    }
    return nil
}

func (strct *SpekeKeyProvider) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CertificateArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CertificateArn\": ")
	if tmp, err := json.Marshal(strct.CertificateArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EncryptionContractConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EncryptionContractConfiguration\": ")
	if tmp, err := json.Marshal(strct.EncryptionContractConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ResourceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceId\": ")
	if tmp, err := json.Marshal(strct.ResourceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SystemIds" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SystemIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SystemIds\": ")
	if tmp, err := json.Marshal(strct.SystemIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Url" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SpekeKeyProvider) UnmarshalJSON(b []byte) error {
    ResourceIdReceived := false
    RoleArnReceived := false
    SystemIdsReceived := false
    UrlReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CertificateArn":
            if err := json.Unmarshal([]byte(v), &strct.CertificateArn); err != nil {
                return err
             }
        case "EncryptionContractConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.EncryptionContractConfiguration); err != nil {
                return err
             }
        case "ResourceId":
            if err := json.Unmarshal([]byte(v), &strct.ResourceId); err != nil {
                return err
             }
            ResourceIdReceived = true
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
            RoleArnReceived = true
        case "SystemIds":
            if err := json.Unmarshal([]byte(v), &strct.SystemIds); err != nil {
                return err
             }
            SystemIdsReceived = true
        case "Url":
            if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
                return err
             }
            UrlReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ResourceId (a required property) was received
    if !ResourceIdReceived {
        return errors.New("\"ResourceId\" is required but was not present")
    }
    // check if RoleArn (a required property) was received
    if !RoleArnReceived {
        return errors.New("\"RoleArn\" is required but was not present")
    }
    // check if SystemIds (a required property) was received
    if !SystemIdsReceived {
        return errors.New("\"SystemIds\" is required but was not present")
    }
    // check if Url (a required property) was received
    if !UrlReceived {
        return errors.New("\"Url\" is required but was not present")
    }
    return nil
}

func (strct *StreamSelection) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "MaxVideoBitsPerSecond" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxVideoBitsPerSecond\": ")
	if tmp, err := json.Marshal(strct.MaxVideoBitsPerSecond); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MinVideoBitsPerSecond" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MinVideoBitsPerSecond\": ")
	if tmp, err := json.Marshal(strct.MinVideoBitsPerSecond); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StreamOrder" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StreamOrder\": ")
	if tmp, err := json.Marshal(strct.StreamOrder); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *StreamSelection) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "MaxVideoBitsPerSecond":
            if err := json.Unmarshal([]byte(v), &strct.MaxVideoBitsPerSecond); err != nil {
                return err
             }
        case "MinVideoBitsPerSecond":
            if err := json.Unmarshal([]byte(v), &strct.MinVideoBitsPerSecond); err != nil {
                return err
             }
        case "StreamOrder":
            if err := json.Unmarshal([]byte(v), &strct.StreamOrder); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
