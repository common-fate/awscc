// Code generated by schema-generate. DO NOT EDIT.

package agent

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource schema for AWS::DataSync::Agent.
type Resource struct {

  // Activation key of the Agent.
  ActivationKey string `json:"ActivationKey,omitempty"`

  // The DataSync Agent ARN.
  AgentArn string `json:"AgentArn,omitempty"`

  // The name configured for the agent. Text reference used to identify the agent in the console.
  AgentName string `json:"AgentName,omitempty"`

  // The service endpoints that the agent will connect to.
  EndpointType string `json:"EndpointType,omitempty"`

  // The ARNs of the security group used to protect your data transfer task subnets.
  SecurityGroupArns []string `json:"SecurityGroupArns,omitempty"`

  // The ARNs of the subnets in which DataSync will create elastic network interfaces for each data transfer task.
  SubnetArns []string `json:"SubnetArns,omitempty"`

  // An array of key-value pairs to apply to this resource.
  Tags []*Tag `json:"Tags,omitempty"`

  // The ID of the VPC endpoint that the agent has access to.
  VpcEndpointId string `json:"VpcEndpointId,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key for an AWS resource tag.
  Key string `json:"Key"`

  // The value for an AWS resource tag.
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ActivationKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ActivationKey\": ")
	if tmp, err := json.Marshal(strct.ActivationKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AgentArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AgentArn\": ")
	if tmp, err := json.Marshal(strct.AgentArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AgentName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AgentName\": ")
	if tmp, err := json.Marshal(strct.AgentName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EndpointType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EndpointType\": ")
	if tmp, err := json.Marshal(strct.EndpointType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecurityGroupArns" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecurityGroupArns\": ")
	if tmp, err := json.Marshal(strct.SecurityGroupArns); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SubnetArns" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubnetArns\": ")
	if tmp, err := json.Marshal(strct.SubnetArns); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpcEndpointId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcEndpointId\": ")
	if tmp, err := json.Marshal(strct.VpcEndpointId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ActivationKey":
            if err := json.Unmarshal([]byte(v), &strct.ActivationKey); err != nil {
                return err
             }
        case "AgentArn":
            if err := json.Unmarshal([]byte(v), &strct.AgentArn); err != nil {
                return err
             }
        case "AgentName":
            if err := json.Unmarshal([]byte(v), &strct.AgentName); err != nil {
                return err
             }
        case "EndpointType":
            if err := json.Unmarshal([]byte(v), &strct.EndpointType); err != nil {
                return err
             }
        case "SecurityGroupArns":
            if err := json.Unmarshal([]byte(v), &strct.SecurityGroupArns); err != nil {
                return err
             }
        case "SubnetArns":
            if err := json.Unmarshal([]byte(v), &strct.SubnetArns); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "VpcEndpointId":
            if err := json.Unmarshal([]byte(v), &strct.VpcEndpointId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
