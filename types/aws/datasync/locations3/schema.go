// Code generated by schema-generate. DO NOT EDIT.

package locations3

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// Resource Resource schema for AWS::DataSync::LocationS3
type Resource struct {

  // The Amazon Resource Name (ARN) of the Amazon S3 bucket location.
  LocationArn string `json:"LocationArn,omitempty"`

  // The URL of the S3 location that was described.
  LocationUri string `json:"LocationUri,omitempty"`

  // The Amazon Resource Name (ARN) of the Amazon S3 bucket.
  S3BucketArn string `json:"S3BucketArn,omitempty"`
  S3Config *S3Config `json:"S3Config"`

  // The Amazon S3 storage class you want to store your files in when this location is used as a task destination.
  S3StorageClass string `json:"S3StorageClass,omitempty"`

  // A subdirectory in the Amazon S3 bucket. This subdirectory in Amazon S3 is used to read data from the S3 source location or write data to the S3 destination.
  Subdirectory string `json:"Subdirectory,omitempty"`

  // An array of key-value pairs to apply to this resource.
  Tags []*Tag `json:"Tags,omitempty"`
}

// S3Config The Amazon Resource Name (ARN) of the AWS IAM role that is used to access an Amazon S3 bucket.
type S3Config struct {

  // The ARN of the IAM role of the Amazon S3 bucket.
  BucketAccessRoleArn string `json:"BucketAccessRoleArn"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key for an AWS resource tag.
  Key string `json:"Key"`

  // The value for an AWS resource tag.
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "LocationArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocationArn\": ")
	if tmp, err := json.Marshal(strct.LocationArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LocationUri" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocationUri\": ")
	if tmp, err := json.Marshal(strct.LocationUri); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "S3BucketArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3BucketArn\": ")
	if tmp, err := json.Marshal(strct.S3BucketArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "S3Config" field is required
    if strct.S3Config == nil {
        return nil, errors.New("S3Config is a required field")
    }
    // Marshal the "S3Config" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3Config\": ")
	if tmp, err := json.Marshal(strct.S3Config); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "S3StorageClass" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"S3StorageClass\": ")
	if tmp, err := json.Marshal(strct.S3StorageClass); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Subdirectory" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Subdirectory\": ")
	if tmp, err := json.Marshal(strct.Subdirectory); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    S3ConfigReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "LocationArn":
            if err := json.Unmarshal([]byte(v), &strct.LocationArn); err != nil {
                return err
             }
        case "LocationUri":
            if err := json.Unmarshal([]byte(v), &strct.LocationUri); err != nil {
                return err
             }
        case "S3BucketArn":
            if err := json.Unmarshal([]byte(v), &strct.S3BucketArn); err != nil {
                return err
             }
        case "S3Config":
            if err := json.Unmarshal([]byte(v), &strct.S3Config); err != nil {
                return err
             }
            S3ConfigReceived = true
        case "S3StorageClass":
            if err := json.Unmarshal([]byte(v), &strct.S3StorageClass); err != nil {
                return err
             }
        case "Subdirectory":
            if err := json.Unmarshal([]byte(v), &strct.Subdirectory); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if S3Config (a required property) was received
    if !S3ConfigReceived {
        return errors.New("\"S3Config\" is required but was not present")
    }
    return nil
}

func (strct *S3Config) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "BucketAccessRoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "BucketAccessRoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BucketAccessRoleArn\": ")
	if tmp, err := json.Marshal(strct.BucketAccessRoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *S3Config) UnmarshalJSON(b []byte) error {
    BucketAccessRoleArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "BucketAccessRoleArn":
            if err := json.Unmarshal([]byte(v), &strct.BucketAccessRoleArn); err != nil {
                return err
             }
            BucketAccessRoleArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if BucketAccessRoleArn (a required property) was received
    if !BucketAccessRoleArnReceived {
        return errors.New("\"BucketAccessRoleArn\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
