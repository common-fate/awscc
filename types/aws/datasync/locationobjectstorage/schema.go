// Code generated by schema-generate. DO NOT EDIT.

package locationobjectstorage

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Resource Resource schema for AWS::DataSync::LocationObjectStorage.
type Resource struct {

  // Optional. The access key is used if credentials are required to access the self-managed object storage server.
  AccessKey string `json:"AccessKey,omitempty"`

  // The Amazon Resource Name (ARN) of the agents associated with the self-managed object storage server location.
  AgentArns []string `json:"AgentArns"`

  // The name of the bucket on the self-managed object storage server.
  BucketName string `json:"BucketName,omitempty"`

  // The Amazon Resource Name (ARN) of the location that is created.
  LocationArn string `json:"LocationArn,omitempty"`

  // The URL of the object storage location that was described.
  LocationUri string `json:"LocationUri,omitempty"`

  // Optional. The secret key is used if credentials are required to access the self-managed object storage server.
  SecretKey string `json:"SecretKey,omitempty"`

  // X.509 PEM content containing a certificate authority or chain to trust.
  ServerCertificate string `json:"ServerCertificate,omitempty"`

  // The name of the self-managed object storage server. This value is the IP address or Domain Name Service (DNS) name of the object storage server.
  ServerHostname string `json:"ServerHostname,omitempty"`

  // The port that your self-managed server accepts inbound network traffic on.
  ServerPort int `json:"ServerPort,omitempty"`

  // The protocol that the object storage server uses to communicate.
  ServerProtocol string `json:"ServerProtocol,omitempty"`

  // The subdirectory in the self-managed object storage server that is used to read data from.
  Subdirectory string `json:"Subdirectory,omitempty"`

  // An array of key-value pairs to apply to this resource.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key for an AWS resource tag.
  Key string `json:"Key"`

  // The value for an AWS resource tag.
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AccessKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AccessKey\": ")
	if tmp, err := json.Marshal(strct.AccessKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "AgentArns" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AgentArns" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AgentArns\": ")
	if tmp, err := json.Marshal(strct.AgentArns); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BucketName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BucketName\": ")
	if tmp, err := json.Marshal(strct.BucketName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LocationArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocationArn\": ")
	if tmp, err := json.Marshal(strct.LocationArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LocationUri" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocationUri\": ")
	if tmp, err := json.Marshal(strct.LocationUri); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecretKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecretKey\": ")
	if tmp, err := json.Marshal(strct.SecretKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ServerCertificate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServerCertificate\": ")
	if tmp, err := json.Marshal(strct.ServerCertificate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ServerHostname" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServerHostname\": ")
	if tmp, err := json.Marshal(strct.ServerHostname); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ServerPort" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServerPort\": ")
	if tmp, err := json.Marshal(strct.ServerPort); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ServerProtocol" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServerProtocol\": ")
	if tmp, err := json.Marshal(strct.ServerProtocol); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Subdirectory" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Subdirectory\": ")
	if tmp, err := json.Marshal(strct.Subdirectory); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AgentArnsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AccessKey":
            if err := json.Unmarshal([]byte(v), &strct.AccessKey); err != nil {
                return err
             }
        case "AgentArns":
            if err := json.Unmarshal([]byte(v), &strct.AgentArns); err != nil {
                return err
             }
            AgentArnsReceived = true
        case "BucketName":
            if err := json.Unmarshal([]byte(v), &strct.BucketName); err != nil {
                return err
             }
        case "LocationArn":
            if err := json.Unmarshal([]byte(v), &strct.LocationArn); err != nil {
                return err
             }
        case "LocationUri":
            if err := json.Unmarshal([]byte(v), &strct.LocationUri); err != nil {
                return err
             }
        case "SecretKey":
            if err := json.Unmarshal([]byte(v), &strct.SecretKey); err != nil {
                return err
             }
        case "ServerCertificate":
            if err := json.Unmarshal([]byte(v), &strct.ServerCertificate); err != nil {
                return err
             }
        case "ServerHostname":
            if err := json.Unmarshal([]byte(v), &strct.ServerHostname); err != nil {
                return err
             }
        case "ServerPort":
            if err := json.Unmarshal([]byte(v), &strct.ServerPort); err != nil {
                return err
             }
        case "ServerProtocol":
            if err := json.Unmarshal([]byte(v), &strct.ServerProtocol); err != nil {
                return err
             }
        case "Subdirectory":
            if err := json.Unmarshal([]byte(v), &strct.Subdirectory); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AgentArns (a required property) was received
    if !AgentArnsReceived {
        return errors.New("\"AgentArns\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
