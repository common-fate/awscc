// Code generated by schema-generate. DO NOT EDIT.

package locationsmb

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// MountOptions The mount options used by DataSync to access the SMB server.
type MountOptions struct {

  // The specific SMB version that you want DataSync to use to mount your SMB share.
  Version string `json:"Version,omitempty"`
}

// Resource Resource schema for AWS::DataSync::LocationSMB.
type Resource struct {

  // The Amazon Resource Names (ARNs) of agents to use for a Simple Message Block (SMB) location.
  AgentArns []string `json:"AgentArns"`

  // The name of the Windows domain that the SMB server belongs to.
  Domain string `json:"Domain,omitempty"`

  // The Amazon Resource Name (ARN) of the SMB location that is created.
  LocationArn string `json:"LocationArn,omitempty"`

  // The URL of the SMB location that was described.
  LocationUri string `json:"LocationUri,omitempty"`
  MountOptions *MountOptions `json:"MountOptions,omitempty"`

  // The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
  Password string `json:"Password,omitempty"`

  // The name of the SMB server. This value is the IP address or Domain Name Service (DNS) name of the SMB server.
  ServerHostname string `json:"ServerHostname,omitempty"`

  // The subdirectory in the SMB file system that is used to read data from the SMB source location or write data to the SMB destination
  Subdirectory string `json:"Subdirectory,omitempty"`

  // An array of key-value pairs to apply to this resource.
  Tags []*Tag `json:"Tags,omitempty"`

  // The user who can mount the share, has the permissions to access files and folders in the SMB share.
  User string `json:"User"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key for an AWS resource tag.
  Key string `json:"Key"`

  // The value for an AWS resource tag.
  Value string `json:"Value"`
}

func (strct *MountOptions) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Version" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Version\": ")
	if tmp, err := json.Marshal(strct.Version); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MountOptions) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Version":
            if err := json.Unmarshal([]byte(v), &strct.Version); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AgentArns" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AgentArns" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AgentArns\": ")
	if tmp, err := json.Marshal(strct.AgentArns); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Domain" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Domain\": ")
	if tmp, err := json.Marshal(strct.Domain); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LocationArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocationArn\": ")
	if tmp, err := json.Marshal(strct.LocationArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LocationUri" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocationUri\": ")
	if tmp, err := json.Marshal(strct.LocationUri); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MountOptions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MountOptions\": ")
	if tmp, err := json.Marshal(strct.MountOptions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Password" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Password\": ")
	if tmp, err := json.Marshal(strct.Password); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ServerHostname" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServerHostname\": ")
	if tmp, err := json.Marshal(strct.ServerHostname); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Subdirectory" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Subdirectory\": ")
	if tmp, err := json.Marshal(strct.Subdirectory); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "User" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "User" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"User\": ")
	if tmp, err := json.Marshal(strct.User); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AgentArnsReceived := false
    UserReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AgentArns":
            if err := json.Unmarshal([]byte(v), &strct.AgentArns); err != nil {
                return err
             }
            AgentArnsReceived = true
        case "Domain":
            if err := json.Unmarshal([]byte(v), &strct.Domain); err != nil {
                return err
             }
        case "LocationArn":
            if err := json.Unmarshal([]byte(v), &strct.LocationArn); err != nil {
                return err
             }
        case "LocationUri":
            if err := json.Unmarshal([]byte(v), &strct.LocationUri); err != nil {
                return err
             }
        case "MountOptions":
            if err := json.Unmarshal([]byte(v), &strct.MountOptions); err != nil {
                return err
             }
        case "Password":
            if err := json.Unmarshal([]byte(v), &strct.Password); err != nil {
                return err
             }
        case "ServerHostname":
            if err := json.Unmarshal([]byte(v), &strct.ServerHostname); err != nil {
                return err
             }
        case "Subdirectory":
            if err := json.Unmarshal([]byte(v), &strct.Subdirectory); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "User":
            if err := json.Unmarshal([]byte(v), &strct.User); err != nil {
                return err
             }
            UserReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AgentArns (a required property) was received
    if !AgentArnsReceived {
        return errors.New("\"AgentArns\" is required but was not present")
    }
    // check if User (a required property) was received
    if !UserReceived {
        return errors.New("\"User\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
