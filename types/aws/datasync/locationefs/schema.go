// Code generated by schema-generate. DO NOT EDIT.

package locationefs

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Ec2Config The subnet and security group that DataSync uses to access target EFS file system.
type Ec2Config struct {

  // The Amazon Resource Names (ARNs) of the security groups that are configured for the Amazon EC2 resource.
  SecurityGroupArns []string `json:"SecurityGroupArns"`

  // The ARN of the subnet that DataSync uses to access the target EFS file system.
  SubnetArn string `json:"SubnetArn"`
}

// Resource Resource schema for AWS::DataSync::LocationEFS.
type Resource struct {

  // The Amazon Resource Name (ARN) for the Amazon EFS Access point that DataSync uses when accessing the EFS file system.
  AccessPointArn string `json:"AccessPointArn,omitempty"`
  Ec2Config *Ec2Config `json:"Ec2Config"`

  // The Amazon Resource Name (ARN) for the Amazon EFS file system.
  EfsFilesystemArn string `json:"EfsFilesystemArn,omitempty"`

  // The Amazon Resource Name (ARN) of the AWS IAM role that the DataSync will assume when mounting the EFS file system.
  FileSystemAccessRoleArn string `json:"FileSystemAccessRoleArn,omitempty"`

  // Protocol that is used for encrypting the traffic exchanged between the DataSync Agent and the EFS file system.
  InTransitEncryption string `json:"InTransitEncryption,omitempty"`

  // The Amazon Resource Name (ARN) of the Amazon EFS file system location that is created.
  LocationArn string `json:"LocationArn,omitempty"`

  // The URL of the EFS location that was described.
  LocationUri string `json:"LocationUri,omitempty"`

  // A subdirectory in the location's path. This subdirectory in the EFS file system is used to read data from the EFS source location or write data to the EFS destination.
  Subdirectory string `json:"Subdirectory,omitempty"`

  // An array of key-value pairs to apply to this resource.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key for an AWS resource tag.
  Key string `json:"Key"`

  // The value for an AWS resource tag.
  Value string `json:"Value"`
}

func (strct *Ec2Config) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "SecurityGroupArns" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SecurityGroupArns" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecurityGroupArns\": ")
	if tmp, err := json.Marshal(strct.SecurityGroupArns); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SubnetArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SubnetArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubnetArn\": ")
	if tmp, err := json.Marshal(strct.SubnetArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Ec2Config) UnmarshalJSON(b []byte) error {
    SecurityGroupArnsReceived := false
    SubnetArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "SecurityGroupArns":
            if err := json.Unmarshal([]byte(v), &strct.SecurityGroupArns); err != nil {
                return err
             }
            SecurityGroupArnsReceived = true
        case "SubnetArn":
            if err := json.Unmarshal([]byte(v), &strct.SubnetArn); err != nil {
                return err
             }
            SubnetArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SecurityGroupArns (a required property) was received
    if !SecurityGroupArnsReceived {
        return errors.New("\"SecurityGroupArns\" is required but was not present")
    }
    // check if SubnetArn (a required property) was received
    if !SubnetArnReceived {
        return errors.New("\"SubnetArn\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AccessPointArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AccessPointArn\": ")
	if tmp, err := json.Marshal(strct.AccessPointArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Ec2Config" field is required
    if strct.Ec2Config == nil {
        return nil, errors.New("Ec2Config is a required field")
    }
    // Marshal the "Ec2Config" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Ec2Config\": ")
	if tmp, err := json.Marshal(strct.Ec2Config); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EfsFilesystemArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EfsFilesystemArn\": ")
	if tmp, err := json.Marshal(strct.EfsFilesystemArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FileSystemAccessRoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FileSystemAccessRoleArn\": ")
	if tmp, err := json.Marshal(strct.FileSystemAccessRoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InTransitEncryption" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InTransitEncryption\": ")
	if tmp, err := json.Marshal(strct.InTransitEncryption); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LocationArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocationArn\": ")
	if tmp, err := json.Marshal(strct.LocationArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LocationUri" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocationUri\": ")
	if tmp, err := json.Marshal(strct.LocationUri); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Subdirectory" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Subdirectory\": ")
	if tmp, err := json.Marshal(strct.Subdirectory); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    Ec2ConfigReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AccessPointArn":
            if err := json.Unmarshal([]byte(v), &strct.AccessPointArn); err != nil {
                return err
             }
        case "Ec2Config":
            if err := json.Unmarshal([]byte(v), &strct.Ec2Config); err != nil {
                return err
             }
            Ec2ConfigReceived = true
        case "EfsFilesystemArn":
            if err := json.Unmarshal([]byte(v), &strct.EfsFilesystemArn); err != nil {
                return err
             }
        case "FileSystemAccessRoleArn":
            if err := json.Unmarshal([]byte(v), &strct.FileSystemAccessRoleArn); err != nil {
                return err
             }
        case "InTransitEncryption":
            if err := json.Unmarshal([]byte(v), &strct.InTransitEncryption); err != nil {
                return err
             }
        case "LocationArn":
            if err := json.Unmarshal([]byte(v), &strct.LocationArn); err != nil {
                return err
             }
        case "LocationUri":
            if err := json.Unmarshal([]byte(v), &strct.LocationUri); err != nil {
                return err
             }
        case "Subdirectory":
            if err := json.Unmarshal([]byte(v), &strct.Subdirectory); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Ec2Config (a required property) was received
    if !Ec2ConfigReceived {
        return errors.New("\"Ec2Config\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
