// Code generated by schema-generate. DO NOT EDIT.

package registrypolicy

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// Policy 
type Policy struct {
}

// Resource Resource Type definition for AWS::EventSchemas::RegistryPolicy
type Resource struct {
  Id string `json:"Id,omitempty"`
  Policy *Policy `json:"Policy"`
  RegistryName string `json:"RegistryName"`
  RevisionId string `json:"RevisionId,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Policy" field is required
    if strct.Policy == nil {
        return nil, errors.New("Policy is a required field")
    }
    // Marshal the "Policy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Policy\": ")
	if tmp, err := json.Marshal(strct.Policy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RegistryName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RegistryName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RegistryName\": ")
	if tmp, err := json.Marshal(strct.RegistryName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RevisionId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RevisionId\": ")
	if tmp, err := json.Marshal(strct.RevisionId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    PolicyReceived := false
    RegistryNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "Policy":
            if err := json.Unmarshal([]byte(v), &strct.Policy); err != nil {
                return err
             }
            PolicyReceived = true
        case "RegistryName":
            if err := json.Unmarshal([]byte(v), &strct.RegistryName); err != nil {
                return err
             }
            RegistryNameReceived = true
        case "RevisionId":
            if err := json.Unmarshal([]byte(v), &strct.RevisionId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Policy (a required property) was received
    if !PolicyReceived {
        return errors.New("\"Policy\" is required but was not present")
    }
    // check if RegistryName (a required property) was received
    if !RegistryNameReceived {
        return errors.New("\"RegistryName\" is required but was not present")
    }
    return nil
}
