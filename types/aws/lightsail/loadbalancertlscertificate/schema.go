// Code generated by schema-generate. DO NOT EDIT.

package loadbalancertlscertificate

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource Type definition for AWS::Lightsail::LoadBalancerTlsCertificate
type Resource struct {

  // An array of strings listing alternative domains and subdomains for your SSL/TLS certificate.
  CertificateAlternativeNames []string `json:"CertificateAlternativeNames,omitempty"`

  // The domain name (e.g., example.com ) for your SSL/TLS certificate.
  CertificateDomainName string `json:"CertificateDomainName"`

  // The SSL/TLS certificate name.
  CertificateName string `json:"CertificateName"`

  // A Boolean value that indicates whether HTTPS redirection is enabled for the load balancer.
  HttpsRedirectionEnabled bool `json:"HttpsRedirectionEnabled,omitempty"`

  // When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
  IsAttached bool `json:"IsAttached,omitempty"`

  // The name of your load balancer.
  LoadBalancerName string `json:"LoadBalancerName"`
  LoadBalancerTlsCertificateArn string `json:"LoadBalancerTlsCertificateArn,omitempty"`

  // The validation status of the SSL/TLS certificate.
  Status string `json:"Status,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CertificateAlternativeNames" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CertificateAlternativeNames\": ")
	if tmp, err := json.Marshal(strct.CertificateAlternativeNames); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "CertificateDomainName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CertificateDomainName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CertificateDomainName\": ")
	if tmp, err := json.Marshal(strct.CertificateDomainName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "CertificateName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CertificateName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CertificateName\": ")
	if tmp, err := json.Marshal(strct.CertificateName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HttpsRedirectionEnabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HttpsRedirectionEnabled\": ")
	if tmp, err := json.Marshal(strct.HttpsRedirectionEnabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IsAttached" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsAttached\": ")
	if tmp, err := json.Marshal(strct.IsAttached); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "LoadBalancerName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LoadBalancerName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoadBalancerName\": ")
	if tmp, err := json.Marshal(strct.LoadBalancerName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoadBalancerTlsCertificateArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoadBalancerTlsCertificateArn\": ")
	if tmp, err := json.Marshal(strct.LoadBalancerTlsCertificateArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    CertificateDomainNameReceived := false
    CertificateNameReceived := false
    LoadBalancerNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CertificateAlternativeNames":
            if err := json.Unmarshal([]byte(v), &strct.CertificateAlternativeNames); err != nil {
                return err
             }
        case "CertificateDomainName":
            if err := json.Unmarshal([]byte(v), &strct.CertificateDomainName); err != nil {
                return err
             }
            CertificateDomainNameReceived = true
        case "CertificateName":
            if err := json.Unmarshal([]byte(v), &strct.CertificateName); err != nil {
                return err
             }
            CertificateNameReceived = true
        case "HttpsRedirectionEnabled":
            if err := json.Unmarshal([]byte(v), &strct.HttpsRedirectionEnabled); err != nil {
                return err
             }
        case "IsAttached":
            if err := json.Unmarshal([]byte(v), &strct.IsAttached); err != nil {
                return err
             }
        case "LoadBalancerName":
            if err := json.Unmarshal([]byte(v), &strct.LoadBalancerName); err != nil {
                return err
             }
            LoadBalancerNameReceived = true
        case "LoadBalancerTlsCertificateArn":
            if err := json.Unmarshal([]byte(v), &strct.LoadBalancerTlsCertificateArn); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CertificateDomainName (a required property) was received
    if !CertificateDomainNameReceived {
        return errors.New("\"CertificateDomainName\" is required but was not present")
    }
    // check if CertificateName (a required property) was received
    if !CertificateNameReceived {
        return errors.New("\"CertificateName\" is required but was not present")
    }
    // check if LoadBalancerName (a required property) was received
    if !LoadBalancerNameReceived {
        return errors.New("\"LoadBalancerName\" is required but was not present")
    }
    return nil
}
