// Code generated by schema-generate. DO NOT EDIT.

package database

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// RelationalDatabaseParameter Describes the parameters of the database.
type RelationalDatabaseParameter struct {

  // Specifies the valid range of values for the parameter.
  AllowedValues string `json:"AllowedValues,omitempty"`

  // Indicates when parameter updates are applied. Can be immediate or pending-reboot.
  ApplyMethod string `json:"ApplyMethod,omitempty"`

  // Specifies the engine-specific parameter type.
  ApplyType string `json:"ApplyType,omitempty"`

  // Specifies the valid data type for the parameter.
  DataType string `json:"DataType,omitempty"`

  // Provides a description of the parameter.
  Description string `json:"Description,omitempty"`

  // A Boolean value indicating whether the parameter can be modified.
  IsModifiable bool `json:"IsModifiable,omitempty"`

  // Specifies the name of the parameter.
  ParameterName string `json:"ParameterName,omitempty"`

  // Specifies the value of the parameter.
  ParameterValue string `json:"ParameterValue,omitempty"`
}

// Resource Resource Type definition for AWS::Lightsail::Database
type Resource struct {

  // The Availability Zone in which to create your new database. Use the us-east-2a case-sensitive format.
  AvailabilityZone string `json:"AvailabilityZone,omitempty"`

  // When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
  BackupRetention bool `json:"BackupRetention,omitempty"`

  // Indicates the certificate that needs to be associated with the database.
  CaCertificateIdentifier string `json:"CaCertificateIdentifier,omitempty"`
  DatabaseArn string `json:"DatabaseArn,omitempty"`

  // The name of the database to create when the Lightsail database resource is created. For MySQL, if this parameter isn't specified, no database is created in the database resource. For PostgreSQL, if this parameter isn't specified, a database named postgres is created in the database resource.
  MasterDatabaseName string `json:"MasterDatabaseName"`

  // The password for the master user. The password can include any printable ASCII character except "/", """, or "@". It cannot contain spaces.
  MasterUserPassword string `json:"MasterUserPassword,omitempty"`

  // The name for the master user.
  MasterUsername string `json:"MasterUsername"`

  // The daily time range during which automated backups are created for your new database if automated backups are enabled.
  PreferredBackupWindow string `json:"PreferredBackupWindow,omitempty"`

  // The weekly time range during which system maintenance can occur on your new database.
  PreferredMaintenanceWindow string `json:"PreferredMaintenanceWindow,omitempty"`

  // Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
  PubliclyAccessible bool `json:"PubliclyAccessible,omitempty"`

  // The blueprint ID for your new database. A blueprint describes the major engine version of a database.
  RelationalDatabaseBlueprintId string `json:"RelationalDatabaseBlueprintId"`

  // The bundle ID for your new database. A bundle describes the performance specifications for your database.
  RelationalDatabaseBundleId string `json:"RelationalDatabaseBundleId"`

  // The name to use for your new Lightsail database resource.
  RelationalDatabaseName string `json:"RelationalDatabaseName"`

  // Update one or more parameters of the relational database.
  RelationalDatabaseParameters []*RelationalDatabaseParameter `json:"RelationalDatabaseParameters,omitempty"`

  // When true, the master user password is changed to a new strong password generated by Lightsail. Use the get relational database master user password operation to get the new password.
  RotateMasterUserPassword bool `json:"RotateMasterUserPassword,omitempty"`

  // An array of key-value pairs to apply to this resource.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Value string `json:"Value,omitempty"`
}

func (strct *RelationalDatabaseParameter) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllowedValues" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllowedValues\": ")
	if tmp, err := json.Marshal(strct.AllowedValues); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ApplyMethod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApplyMethod\": ")
	if tmp, err := json.Marshal(strct.ApplyMethod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ApplyType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApplyType\": ")
	if tmp, err := json.Marshal(strct.ApplyType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DataType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DataType\": ")
	if tmp, err := json.Marshal(strct.DataType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IsModifiable" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsModifiable\": ")
	if tmp, err := json.Marshal(strct.IsModifiable); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ParameterName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ParameterName\": ")
	if tmp, err := json.Marshal(strct.ParameterName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ParameterValue" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ParameterValue\": ")
	if tmp, err := json.Marshal(strct.ParameterValue); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *RelationalDatabaseParameter) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllowedValues":
            if err := json.Unmarshal([]byte(v), &strct.AllowedValues); err != nil {
                return err
             }
        case "ApplyMethod":
            if err := json.Unmarshal([]byte(v), &strct.ApplyMethod); err != nil {
                return err
             }
        case "ApplyType":
            if err := json.Unmarshal([]byte(v), &strct.ApplyType); err != nil {
                return err
             }
        case "DataType":
            if err := json.Unmarshal([]byte(v), &strct.DataType); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "IsModifiable":
            if err := json.Unmarshal([]byte(v), &strct.IsModifiable); err != nil {
                return err
             }
        case "ParameterName":
            if err := json.Unmarshal([]byte(v), &strct.ParameterName); err != nil {
                return err
             }
        case "ParameterValue":
            if err := json.Unmarshal([]byte(v), &strct.ParameterValue); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AvailabilityZone" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AvailabilityZone\": ")
	if tmp, err := json.Marshal(strct.AvailabilityZone); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "BackupRetention" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BackupRetention\": ")
	if tmp, err := json.Marshal(strct.BackupRetention); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CaCertificateIdentifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CaCertificateIdentifier\": ")
	if tmp, err := json.Marshal(strct.CaCertificateIdentifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DatabaseArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DatabaseArn\": ")
	if tmp, err := json.Marshal(strct.DatabaseArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MasterDatabaseName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MasterDatabaseName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MasterDatabaseName\": ")
	if tmp, err := json.Marshal(strct.MasterDatabaseName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MasterUserPassword" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MasterUserPassword\": ")
	if tmp, err := json.Marshal(strct.MasterUserPassword); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MasterUsername" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MasterUsername" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MasterUsername\": ")
	if tmp, err := json.Marshal(strct.MasterUsername); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PreferredBackupWindow" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PreferredBackupWindow\": ")
	if tmp, err := json.Marshal(strct.PreferredBackupWindow); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PreferredMaintenanceWindow" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PreferredMaintenanceWindow\": ")
	if tmp, err := json.Marshal(strct.PreferredMaintenanceWindow); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PubliclyAccessible" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PubliclyAccessible\": ")
	if tmp, err := json.Marshal(strct.PubliclyAccessible); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RelationalDatabaseBlueprintId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RelationalDatabaseBlueprintId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RelationalDatabaseBlueprintId\": ")
	if tmp, err := json.Marshal(strct.RelationalDatabaseBlueprintId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RelationalDatabaseBundleId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RelationalDatabaseBundleId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RelationalDatabaseBundleId\": ")
	if tmp, err := json.Marshal(strct.RelationalDatabaseBundleId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RelationalDatabaseName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RelationalDatabaseName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RelationalDatabaseName\": ")
	if tmp, err := json.Marshal(strct.RelationalDatabaseName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RelationalDatabaseParameters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RelationalDatabaseParameters\": ")
	if tmp, err := json.Marshal(strct.RelationalDatabaseParameters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RotateMasterUserPassword" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RotateMasterUserPassword\": ")
	if tmp, err := json.Marshal(strct.RotateMasterUserPassword); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    MasterDatabaseNameReceived := false
    MasterUsernameReceived := false
    RelationalDatabaseBlueprintIdReceived := false
    RelationalDatabaseBundleIdReceived := false
    RelationalDatabaseNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AvailabilityZone":
            if err := json.Unmarshal([]byte(v), &strct.AvailabilityZone); err != nil {
                return err
             }
        case "BackupRetention":
            if err := json.Unmarshal([]byte(v), &strct.BackupRetention); err != nil {
                return err
             }
        case "CaCertificateIdentifier":
            if err := json.Unmarshal([]byte(v), &strct.CaCertificateIdentifier); err != nil {
                return err
             }
        case "DatabaseArn":
            if err := json.Unmarshal([]byte(v), &strct.DatabaseArn); err != nil {
                return err
             }
        case "MasterDatabaseName":
            if err := json.Unmarshal([]byte(v), &strct.MasterDatabaseName); err != nil {
                return err
             }
            MasterDatabaseNameReceived = true
        case "MasterUserPassword":
            if err := json.Unmarshal([]byte(v), &strct.MasterUserPassword); err != nil {
                return err
             }
        case "MasterUsername":
            if err := json.Unmarshal([]byte(v), &strct.MasterUsername); err != nil {
                return err
             }
            MasterUsernameReceived = true
        case "PreferredBackupWindow":
            if err := json.Unmarshal([]byte(v), &strct.PreferredBackupWindow); err != nil {
                return err
             }
        case "PreferredMaintenanceWindow":
            if err := json.Unmarshal([]byte(v), &strct.PreferredMaintenanceWindow); err != nil {
                return err
             }
        case "PubliclyAccessible":
            if err := json.Unmarshal([]byte(v), &strct.PubliclyAccessible); err != nil {
                return err
             }
        case "RelationalDatabaseBlueprintId":
            if err := json.Unmarshal([]byte(v), &strct.RelationalDatabaseBlueprintId); err != nil {
                return err
             }
            RelationalDatabaseBlueprintIdReceived = true
        case "RelationalDatabaseBundleId":
            if err := json.Unmarshal([]byte(v), &strct.RelationalDatabaseBundleId); err != nil {
                return err
             }
            RelationalDatabaseBundleIdReceived = true
        case "RelationalDatabaseName":
            if err := json.Unmarshal([]byte(v), &strct.RelationalDatabaseName); err != nil {
                return err
             }
            RelationalDatabaseNameReceived = true
        case "RelationalDatabaseParameters":
            if err := json.Unmarshal([]byte(v), &strct.RelationalDatabaseParameters); err != nil {
                return err
             }
        case "RotateMasterUserPassword":
            if err := json.Unmarshal([]byte(v), &strct.RotateMasterUserPassword); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if MasterDatabaseName (a required property) was received
    if !MasterDatabaseNameReceived {
        return errors.New("\"MasterDatabaseName\" is required but was not present")
    }
    // check if MasterUsername (a required property) was received
    if !MasterUsernameReceived {
        return errors.New("\"MasterUsername\" is required but was not present")
    }
    // check if RelationalDatabaseBlueprintId (a required property) was received
    if !RelationalDatabaseBlueprintIdReceived {
        return errors.New("\"RelationalDatabaseBlueprintId\" is required but was not present")
    }
    // check if RelationalDatabaseBundleId (a required property) was received
    if !RelationalDatabaseBundleIdReceived {
        return errors.New("\"RelationalDatabaseBundleId\" is required but was not present")
    }
    // check if RelationalDatabaseName (a required property) was received
    if !RelationalDatabaseNameReceived {
        return errors.New("\"RelationalDatabaseName\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    return nil
}
