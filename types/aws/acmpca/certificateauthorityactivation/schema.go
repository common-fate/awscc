// Code generated by schema-generate. DO NOT EDIT.

package certificateauthorityactivation

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Used to install the certificate authority certificate and update the certificate authority status.
type Resource struct {

  // Certificate Authority certificate that will be installed in the Certificate Authority.
  Certificate string `json:"Certificate"`

  // Arn of the Certificate Authority.
  CertificateAuthorityArn string `json:"CertificateAuthorityArn"`

  // Certificate chain for the Certificate Authority certificate.
  CertificateChain string `json:"CertificateChain,omitempty"`

  // The complete certificate chain, including the Certificate Authority certificate.
  CompleteCertificateChain string `json:"CompleteCertificateChain,omitempty"`

  // The status of the Certificate Authority.
  Status string `json:"Status,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Certificate" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Certificate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Certificate\": ")
	if tmp, err := json.Marshal(strct.Certificate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "CertificateAuthorityArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CertificateAuthorityArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CertificateAuthorityArn\": ")
	if tmp, err := json.Marshal(strct.CertificateAuthorityArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CertificateChain" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CertificateChain\": ")
	if tmp, err := json.Marshal(strct.CertificateChain); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CompleteCertificateChain" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CompleteCertificateChain\": ")
	if tmp, err := json.Marshal(strct.CompleteCertificateChain); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    CertificateReceived := false
    CertificateAuthorityArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Certificate":
            if err := json.Unmarshal([]byte(v), &strct.Certificate); err != nil {
                return err
             }
            CertificateReceived = true
        case "CertificateAuthorityArn":
            if err := json.Unmarshal([]byte(v), &strct.CertificateAuthorityArn); err != nil {
                return err
             }
            CertificateAuthorityArnReceived = true
        case "CertificateChain":
            if err := json.Unmarshal([]byte(v), &strct.CertificateChain); err != nil {
                return err
             }
        case "CompleteCertificateChain":
            if err := json.Unmarshal([]byte(v), &strct.CompleteCertificateChain); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Certificate (a required property) was received
    if !CertificateReceived {
        return errors.New("\"Certificate\" is required but was not present")
    }
    // check if CertificateAuthorityArn (a required property) was received
    if !CertificateAuthorityArnReceived {
        return errors.New("\"CertificateAuthorityArn\" is required but was not present")
    }
    return nil
}
