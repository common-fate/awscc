// Code generated by schema-generate. DO NOT EDIT.

package resourcedefaultversion

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// Resource The default version of a resource that has been registered in the CloudFormation Registry.
type Resource struct {

  // The Amazon Resource Name (ARN) of the type. This is used to uniquely identify a ResourceDefaultVersion
  Arn string `json:"Arn,omitempty"`

  // The name of the type being registered.
  // 
  // We recommend that type names adhere to the following pattern: company_or_organization::service::type.
  TypeName string `json:"TypeName,omitempty"`

  // The Amazon Resource Name (ARN) of the type version.
  TypeVersionArn string `json:"TypeVersionArn,omitempty"`

  // The ID of an existing version of the resource to set as the default.
  VersionId string `json:"VersionId,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TypeName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TypeName\": ")
	if tmp, err := json.Marshal(strct.TypeName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TypeVersionArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TypeVersionArn\": ")
	if tmp, err := json.Marshal(strct.TypeVersionArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VersionId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VersionId\": ")
	if tmp, err := json.Marshal(strct.VersionId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "TypeName":
            if err := json.Unmarshal([]byte(v), &strct.TypeName); err != nil {
                return err
             }
        case "TypeVersionArn":
            if err := json.Unmarshal([]byte(v), &strct.TypeVersionArn); err != nil {
                return err
             }
        case "VersionId":
            if err := json.Unmarshal([]byte(v), &strct.VersionId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
