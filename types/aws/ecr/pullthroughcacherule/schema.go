// Code generated by schema-generate. DO NOT EDIT.

package pullthroughcacherule

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// PullThroughCacheRule 
type PullThroughCacheRule struct {
  EcrRepositoryPrefix string `json:"EcrRepositoryPrefix"`
  RegistryId string `json:"RegistryId,omitempty"`
  UpstreamRegistryUrl string `json:"UpstreamRegistryUrl"`
}

// Resource The AWS::ECR::PullThroughCacheRule resource configures the upstream registry configuration details for an Amazon Elastic Container Registry (Amazon Private ECR) pull-through cache.
type Resource struct {

  // The ECRRepositoryPrefix is a custom alias for upstream registry url.
  EcrRepositoryPrefix string `json:"EcrRepositoryPrefix,omitempty"`

  // The upstreamRegistryUrl is the endpoint of upstream registry url of the public repository to be cached
  UpstreamRegistryUrl string `json:"UpstreamRegistryUrl,omitempty"`
}

func (strct *PullThroughCacheRule) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "EcrRepositoryPrefix" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "EcrRepositoryPrefix" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EcrRepositoryPrefix\": ")
	if tmp, err := json.Marshal(strct.EcrRepositoryPrefix); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RegistryId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RegistryId\": ")
	if tmp, err := json.Marshal(strct.RegistryId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "UpstreamRegistryUrl" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "UpstreamRegistryUrl" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UpstreamRegistryUrl\": ")
	if tmp, err := json.Marshal(strct.UpstreamRegistryUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PullThroughCacheRule) UnmarshalJSON(b []byte) error {
    EcrRepositoryPrefixReceived := false
    UpstreamRegistryUrlReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "EcrRepositoryPrefix":
            if err := json.Unmarshal([]byte(v), &strct.EcrRepositoryPrefix); err != nil {
                return err
             }
            EcrRepositoryPrefixReceived = true
        case "RegistryId":
            if err := json.Unmarshal([]byte(v), &strct.RegistryId); err != nil {
                return err
             }
        case "UpstreamRegistryUrl":
            if err := json.Unmarshal([]byte(v), &strct.UpstreamRegistryUrl); err != nil {
                return err
             }
            UpstreamRegistryUrlReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if EcrRepositoryPrefix (a required property) was received
    if !EcrRepositoryPrefixReceived {
        return errors.New("\"EcrRepositoryPrefix\" is required but was not present")
    }
    // check if UpstreamRegistryUrl (a required property) was received
    if !UpstreamRegistryUrlReceived {
        return errors.New("\"UpstreamRegistryUrl\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "EcrRepositoryPrefix" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EcrRepositoryPrefix\": ")
	if tmp, err := json.Marshal(strct.EcrRepositoryPrefix); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "UpstreamRegistryUrl" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"UpstreamRegistryUrl\": ")
	if tmp, err := json.Marshal(strct.UpstreamRegistryUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "EcrRepositoryPrefix":
            if err := json.Unmarshal([]byte(v), &strct.EcrRepositoryPrefix); err != nil {
                return err
             }
        case "UpstreamRegistryUrl":
            if err := json.Unmarshal([]byte(v), &strct.UpstreamRegistryUrl); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
