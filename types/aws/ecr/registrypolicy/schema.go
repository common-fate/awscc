// Code generated by schema-generate. DO NOT EDIT.

package registrypolicy

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// PolicyText The JSON policy text to apply to your registry. The policy text follows the same format as IAM policy text. For more information, see Registry permissions (https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html) in the Amazon Elastic Container Registry User Guide.
type PolicyText struct {
}

// Resource The AWS::ECR::RegistryPolicy is used to specify permissions for another AWS account and is used when configuring cross-account replication. For more information, see Registry permissions in the Amazon Elastic Container Registry User Guide: https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html
type Resource struct {

  // The JSON policy text to apply to your registry. The policy text follows the same format as IAM policy text. For more information, see Registry permissions (https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html) in the Amazon Elastic Container Registry User Guide.
  PolicyText *PolicyText `json:"PolicyText"`
  RegistryId string `json:"RegistryId,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "PolicyText" field is required
    if strct.PolicyText == nil {
        return nil, errors.New("PolicyText is a required field")
    }
    // Marshal the "PolicyText" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PolicyText\": ")
	if tmp, err := json.Marshal(strct.PolicyText); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RegistryId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RegistryId\": ")
	if tmp, err := json.Marshal(strct.RegistryId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    PolicyTextReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "PolicyText":
            if err := json.Unmarshal([]byte(v), &strct.PolicyText); err != nil {
                return err
             }
            PolicyTextReceived = true
        case "RegistryId":
            if err := json.Unmarshal([]byte(v), &strct.RegistryId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if PolicyText (a required property) was received
    if !PolicyTextReceived {
        return errors.New("\"PolicyText\" is required but was not present")
    }
    return nil
}
