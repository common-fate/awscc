// Code generated by schema-generate. DO NOT EDIT.

package group

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource Type definition for AWS::IdentityStore::Group
type Resource struct {

  // A string containing the description of the group.
  Description string `json:"Description,omitempty"`

  // A string containing the name of the group. This value is commonly displayed when the group is referenced.
  DisplayName string `json:"DisplayName"`

  // The unique identifier for a group in the identity store.
  GroupId string `json:"GroupId,omitempty"`

  // The globally unique identifier for the identity store.
  IdentityStoreId string `json:"IdentityStoreId"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DisplayName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DisplayName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DisplayName\": ")
	if tmp, err := json.Marshal(strct.DisplayName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "GroupId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"GroupId\": ")
	if tmp, err := json.Marshal(strct.GroupId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IdentityStoreId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IdentityStoreId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IdentityStoreId\": ")
	if tmp, err := json.Marshal(strct.IdentityStoreId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DisplayNameReceived := false
    IdentityStoreIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "DisplayName":
            if err := json.Unmarshal([]byte(v), &strct.DisplayName); err != nil {
                return err
             }
            DisplayNameReceived = true
        case "GroupId":
            if err := json.Unmarshal([]byte(v), &strct.GroupId); err != nil {
                return err
             }
        case "IdentityStoreId":
            if err := json.Unmarshal([]byte(v), &strct.IdentityStoreId); err != nil {
                return err
             }
            IdentityStoreIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DisplayName (a required property) was received
    if !DisplayNameReceived {
        return errors.New("\"DisplayName\" is required but was not present")
    }
    // check if IdentityStoreId (a required property) was received
    if !IdentityStoreIdReceived {
        return errors.New("\"IdentityStoreId\" is required but was not present")
    }
    return nil
}
