// Code generated by schema-generate. DO NOT EDIT.

package schema

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// Registry Identifier for the registry which the schema is part of.
type Registry struct {

  // Amazon Resource Name for the Registry.
  Arn string `json:"Arn,omitempty"`

  // Name of the registry in which the schema will be created.
  Name string `json:"Name,omitempty"`
}

// Resource This resource represents a schema of Glue Schema Registry.
type Resource struct {

  // Amazon Resource Name for the Schema.
  Arn string `json:"Arn,omitempty"`
  CheckpointVersion *SchemaVersion `json:"CheckpointVersion,omitempty"`

  // Compatibility setting for the schema.
  Compatibility string `json:"Compatibility"`

  // Data format name to use for the schema. Accepted values: 'AVRO', 'JSON', 'PROTOBUF'
  DataFormat string `json:"DataFormat"`

  // A description of the schema. If description is not provided, there will not be any default value for this.
  Description string `json:"Description,omitempty"`

  // Represents the version ID associated with the initial schema version.
  InitialSchemaVersionId string `json:"InitialSchemaVersionId,omitempty"`

  // Name of the schema.
  Name string `json:"Name"`
  Registry *Registry `json:"Registry,omitempty"`

  // Definition for the initial schema version in plain-text.
  SchemaDefinition string `json:"SchemaDefinition"`

  // List of tags to tag the schema
  Tags []*Tag `json:"Tags,omitempty"`
}

// SchemaVersion Specify checkpoint version for update. This is only required to update the Compatibility.
type SchemaVersion struct {

  // Indicates if the latest version needs to be updated.
  IsLatest bool `json:"IsLatest,omitempty"`

  // Indicates the version number in the schema to update.
  VersionNumber int `json:"VersionNumber,omitempty"`
}

// Tag 
type Tag struct {

  // A key to identify the tag.
  Key string `json:"Key"`

  // Corresponding tag value for the key.
  Value string `json:"Value"`
}

func (strct *Registry) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Registry) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CheckpointVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CheckpointVersion\": ")
	if tmp, err := json.Marshal(strct.CheckpointVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Compatibility" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Compatibility" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Compatibility\": ")
	if tmp, err := json.Marshal(strct.Compatibility); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DataFormat" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DataFormat" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DataFormat\": ")
	if tmp, err := json.Marshal(strct.DataFormat); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InitialSchemaVersionId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InitialSchemaVersionId\": ")
	if tmp, err := json.Marshal(strct.InitialSchemaVersionId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Registry" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Registry\": ")
	if tmp, err := json.Marshal(strct.Registry); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SchemaDefinition" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SchemaDefinition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SchemaDefinition\": ")
	if tmp, err := json.Marshal(strct.SchemaDefinition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    CompatibilityReceived := false
    DataFormatReceived := false
    NameReceived := false
    SchemaDefinitionReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "CheckpointVersion":
            if err := json.Unmarshal([]byte(v), &strct.CheckpointVersion); err != nil {
                return err
             }
        case "Compatibility":
            if err := json.Unmarshal([]byte(v), &strct.Compatibility); err != nil {
                return err
             }
            CompatibilityReceived = true
        case "DataFormat":
            if err := json.Unmarshal([]byte(v), &strct.DataFormat); err != nil {
                return err
             }
            DataFormatReceived = true
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "InitialSchemaVersionId":
            if err := json.Unmarshal([]byte(v), &strct.InitialSchemaVersionId); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Registry":
            if err := json.Unmarshal([]byte(v), &strct.Registry); err != nil {
                return err
             }
        case "SchemaDefinition":
            if err := json.Unmarshal([]byte(v), &strct.SchemaDefinition); err != nil {
                return err
             }
            SchemaDefinitionReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Compatibility (a required property) was received
    if !CompatibilityReceived {
        return errors.New("\"Compatibility\" is required but was not present")
    }
    // check if DataFormat (a required property) was received
    if !DataFormatReceived {
        return errors.New("\"DataFormat\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if SchemaDefinition (a required property) was received
    if !SchemaDefinitionReceived {
        return errors.New("\"SchemaDefinition\" is required but was not present")
    }
    return nil
}

func (strct *SchemaVersion) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "IsLatest" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsLatest\": ")
	if tmp, err := json.Marshal(strct.IsLatest); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VersionNumber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VersionNumber\": ")
	if tmp, err := json.Marshal(strct.VersionNumber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SchemaVersion) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "IsLatest":
            if err := json.Unmarshal([]byte(v), &strct.IsLatest); err != nil {
                return err
             }
        case "VersionNumber":
            if err := json.Unmarshal([]byte(v), &strct.VersionNumber); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
