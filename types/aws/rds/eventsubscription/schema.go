// Code generated by schema-generate. DO NOT EDIT.

package eventsubscription

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource The AWS::RDS::EventSubscription resource allows you to receive notifications for Amazon Relational Database Service events through the Amazon Simple Notification Service (Amazon SNS). For more information, see Using Amazon RDS Event Notification in the Amazon RDS User Guide.
type Resource struct {

  // A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it.
  Enabled bool `json:"Enabled,omitempty"`

  // A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the Events topic in the Amazon RDS User Guide or by using the DescribeEventCategories action.
  EventCategories []string `json:"EventCategories,omitempty"`

  // The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  SnsTopicArn string `json:"SnsTopicArn"`

  // The list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.
  SourceIds []string `json:"SourceIds,omitempty"`

  // The type of source that will be generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.
  SourceType string `json:"SourceType,omitempty"`

  // The name of the subscription.
  SubscriptionName string `json:"SubscriptionName,omitempty"`

  // An array of key-value pairs to apply to this resource.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
  Value string `json:"Value,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Enabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Enabled\": ")
	if tmp, err := json.Marshal(strct.Enabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EventCategories" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EventCategories\": ")
	if tmp, err := json.Marshal(strct.EventCategories); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SnsTopicArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SnsTopicArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SnsTopicArn\": ")
	if tmp, err := json.Marshal(strct.SnsTopicArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SourceIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceIds\": ")
	if tmp, err := json.Marshal(strct.SourceIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceType\": ")
	if tmp, err := json.Marshal(strct.SourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SubscriptionName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubscriptionName\": ")
	if tmp, err := json.Marshal(strct.SubscriptionName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    SnsTopicArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Enabled":
            if err := json.Unmarshal([]byte(v), &strct.Enabled); err != nil {
                return err
             }
        case "EventCategories":
            if err := json.Unmarshal([]byte(v), &strct.EventCategories); err != nil {
                return err
             }
        case "SnsTopicArn":
            if err := json.Unmarshal([]byte(v), &strct.SnsTopicArn); err != nil {
                return err
             }
            SnsTopicArnReceived = true
        case "SourceIds":
            if err := json.Unmarshal([]byte(v), &strct.SourceIds); err != nil {
                return err
             }
        case "SourceType":
            if err := json.Unmarshal([]byte(v), &strct.SourceType); err != nil {
                return err
             }
        case "SubscriptionName":
            if err := json.Unmarshal([]byte(v), &strct.SubscriptionName); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SnsTopicArn (a required property) was received
    if !SnsTopicArnReceived {
        return errors.New("\"SnsTopicArn\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    return nil
}
