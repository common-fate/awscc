// Code generated by schema-generate. DO NOT EDIT.

package dbproxyendpoint

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource schema for AWS::RDS::DBProxyEndpoint.
type Resource struct {

  // The Amazon Resource Name (ARN) for the DB proxy endpoint.
  DBProxyEndpointArn string `json:"DBProxyEndpointArn,omitempty"`

  // The identifier for the DB proxy endpoint. This name must be unique for all DB proxy endpoints owned by your AWS account in the specified AWS Region.
  DBProxyEndpointName string `json:"DBProxyEndpointName"`

  // The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
  DBProxyName string `json:"DBProxyName"`

  // The endpoint that you can use to connect to the DB proxy. You include the endpoint value in the connection string for a database client application.
  Endpoint string `json:"Endpoint,omitempty"`

  // A value that indicates whether this endpoint is the default endpoint for the associated DB proxy. Default DB proxy endpoints always have read/write capability. Other endpoints that you associate with the DB proxy can be either read/write or read-only.
  IsDefault bool `json:"IsDefault,omitempty"`

  // An optional set of key-value pairs to associate arbitrary data of your choosing with the DB proxy endpoint.
  Tags []*TagFormat `json:"Tags,omitempty"`

  // A value that indicates whether the DB proxy endpoint can be used for read/write or read-only operations.
  TargetRole string `json:"TargetRole,omitempty"`

  // VPC ID to associate with the new DB proxy endpoint.
  VpcId string `json:"VpcId,omitempty"`

  // VPC security group IDs to associate with the new DB proxy endpoint.
  VpcSecurityGroupIds []string `json:"VpcSecurityGroupIds,omitempty"`

  // VPC subnet IDs to associate with the new DB proxy endpoint.
  VpcSubnetIds []string `json:"VpcSubnetIds"`
}

// TagFormat 
type TagFormat struct {
  Key string `json:"Key,omitempty"`
  Value string `json:"Value,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DBProxyEndpointArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DBProxyEndpointArn\": ")
	if tmp, err := json.Marshal(strct.DBProxyEndpointArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DBProxyEndpointName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DBProxyEndpointName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DBProxyEndpointName\": ")
	if tmp, err := json.Marshal(strct.DBProxyEndpointName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DBProxyName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DBProxyName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DBProxyName\": ")
	if tmp, err := json.Marshal(strct.DBProxyName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Endpoint" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Endpoint\": ")
	if tmp, err := json.Marshal(strct.Endpoint); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IsDefault" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IsDefault\": ")
	if tmp, err := json.Marshal(strct.IsDefault); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TargetRole" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TargetRole\": ")
	if tmp, err := json.Marshal(strct.TargetRole); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpcId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcId\": ")
	if tmp, err := json.Marshal(strct.VpcId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpcSecurityGroupIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcSecurityGroupIds\": ")
	if tmp, err := json.Marshal(strct.VpcSecurityGroupIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "VpcSubnetIds" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "VpcSubnetIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcSubnetIds\": ")
	if tmp, err := json.Marshal(strct.VpcSubnetIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DBProxyEndpointNameReceived := false
    DBProxyNameReceived := false
    VpcSubnetIdsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DBProxyEndpointArn":
            if err := json.Unmarshal([]byte(v), &strct.DBProxyEndpointArn); err != nil {
                return err
             }
        case "DBProxyEndpointName":
            if err := json.Unmarshal([]byte(v), &strct.DBProxyEndpointName); err != nil {
                return err
             }
            DBProxyEndpointNameReceived = true
        case "DBProxyName":
            if err := json.Unmarshal([]byte(v), &strct.DBProxyName); err != nil {
                return err
             }
            DBProxyNameReceived = true
        case "Endpoint":
            if err := json.Unmarshal([]byte(v), &strct.Endpoint); err != nil {
                return err
             }
        case "IsDefault":
            if err := json.Unmarshal([]byte(v), &strct.IsDefault); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TargetRole":
            if err := json.Unmarshal([]byte(v), &strct.TargetRole); err != nil {
                return err
             }
        case "VpcId":
            if err := json.Unmarshal([]byte(v), &strct.VpcId); err != nil {
                return err
             }
        case "VpcSecurityGroupIds":
            if err := json.Unmarshal([]byte(v), &strct.VpcSecurityGroupIds); err != nil {
                return err
             }
        case "VpcSubnetIds":
            if err := json.Unmarshal([]byte(v), &strct.VpcSubnetIds); err != nil {
                return err
             }
            VpcSubnetIdsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DBProxyEndpointName (a required property) was received
    if !DBProxyEndpointNameReceived {
        return errors.New("\"DBProxyEndpointName\" is required but was not present")
    }
    // check if DBProxyName (a required property) was received
    if !DBProxyNameReceived {
        return errors.New("\"DBProxyName\" is required but was not present")
    }
    // check if VpcSubnetIds (a required property) was received
    if !VpcSubnetIdsReceived {
        return errors.New("\"VpcSubnetIds\" is required but was not present")
    }
    return nil
}

func (strct *TagFormat) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TagFormat) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
