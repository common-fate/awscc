// Code generated by schema-generate. DO NOT EDIT.

package dbproxy

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// AuthFormat 
type AuthFormat struct {

  // The type of authentication that the proxy uses for connections from the proxy to the underlying database. 
  AuthScheme string `json:"AuthScheme,omitempty"`

  // The type of authentication the proxy uses for connections from clients.
  ClientPasswordAuthType string `json:"ClientPasswordAuthType,omitempty"`

  // A user-specified description about the authentication used by a proxy to log in as a specific database user. 
  Description string `json:"Description,omitempty"`

  // Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy. The ENABLED value is valid only for proxies with RDS for Microsoft SQL Server.
  IAMAuth string `json:"IAMAuth,omitempty"`

  // The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager. 
  SecretArn string `json:"SecretArn,omitempty"`
}

// Resource Resource schema for AWS::RDS::DBProxy
type Resource struct {

  // The authorization mechanism that the proxy uses.
  Auth []*AuthFormat `json:"Auth"`

  // The Amazon Resource Name (ARN) for the proxy.
  DBProxyArn string `json:"DBProxyArn,omitempty"`

  // The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
  DBProxyName string `json:"DBProxyName"`

  // Whether the proxy includes detailed information about SQL statements in its logs.
  DebugLogging bool `json:"DebugLogging,omitempty"`

  // The endpoint that you can use to connect to the proxy. You include the endpoint value in the connection string for a database client application.
  Endpoint string `json:"Endpoint,omitempty"`

  // The kinds of databases that the proxy can connect to.
  EngineFamily string `json:"EngineFamily"`

  // The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
  IdleClientTimeout int `json:"IdleClientTimeout,omitempty"`

  // A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
  RequireTLS bool `json:"RequireTLS,omitempty"`

  // The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  RoleArn string `json:"RoleArn"`

  // An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
  Tags []*TagFormat `json:"Tags,omitempty"`

  // VPC ID to associate with the new DB proxy.
  VpcId string `json:"VpcId,omitempty"`

  // VPC security group IDs to associate with the new proxy.
  VpcSecurityGroupIds []string `json:"VpcSecurityGroupIds,omitempty"`

  // VPC subnet IDs to associate with the new proxy.
  VpcSubnetIds []string `json:"VpcSubnetIds"`
}

// TagFormat 
type TagFormat struct {
  Key string `json:"Key,omitempty"`
  Value string `json:"Value,omitempty"`
}

func (strct *AuthFormat) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AuthScheme" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AuthScheme\": ")
	if tmp, err := json.Marshal(strct.AuthScheme); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ClientPasswordAuthType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ClientPasswordAuthType\": ")
	if tmp, err := json.Marshal(strct.ClientPasswordAuthType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IAMAuth" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IAMAuth\": ")
	if tmp, err := json.Marshal(strct.IAMAuth); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecretArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecretArn\": ")
	if tmp, err := json.Marshal(strct.SecretArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AuthFormat) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AuthScheme":
            if err := json.Unmarshal([]byte(v), &strct.AuthScheme); err != nil {
                return err
             }
        case "ClientPasswordAuthType":
            if err := json.Unmarshal([]byte(v), &strct.ClientPasswordAuthType); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "IAMAuth":
            if err := json.Unmarshal([]byte(v), &strct.IAMAuth); err != nil {
                return err
             }
        case "SecretArn":
            if err := json.Unmarshal([]byte(v), &strct.SecretArn); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Auth" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Auth" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Auth\": ")
	if tmp, err := json.Marshal(strct.Auth); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DBProxyArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DBProxyArn\": ")
	if tmp, err := json.Marshal(strct.DBProxyArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DBProxyName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DBProxyName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DBProxyName\": ")
	if tmp, err := json.Marshal(strct.DBProxyName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DebugLogging" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DebugLogging\": ")
	if tmp, err := json.Marshal(strct.DebugLogging); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Endpoint" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Endpoint\": ")
	if tmp, err := json.Marshal(strct.Endpoint); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "EngineFamily" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "EngineFamily" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EngineFamily\": ")
	if tmp, err := json.Marshal(strct.EngineFamily); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IdleClientTimeout" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IdleClientTimeout\": ")
	if tmp, err := json.Marshal(strct.IdleClientTimeout); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RequireTLS" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RequireTLS\": ")
	if tmp, err := json.Marshal(strct.RequireTLS); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RoleArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RoleArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RoleArn\": ")
	if tmp, err := json.Marshal(strct.RoleArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpcId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcId\": ")
	if tmp, err := json.Marshal(strct.VpcId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpcSecurityGroupIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcSecurityGroupIds\": ")
	if tmp, err := json.Marshal(strct.VpcSecurityGroupIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "VpcSubnetIds" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "VpcSubnetIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcSubnetIds\": ")
	if tmp, err := json.Marshal(strct.VpcSubnetIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AuthReceived := false
    DBProxyNameReceived := false
    EngineFamilyReceived := false
    RoleArnReceived := false
    VpcSubnetIdsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Auth":
            if err := json.Unmarshal([]byte(v), &strct.Auth); err != nil {
                return err
             }
            AuthReceived = true
        case "DBProxyArn":
            if err := json.Unmarshal([]byte(v), &strct.DBProxyArn); err != nil {
                return err
             }
        case "DBProxyName":
            if err := json.Unmarshal([]byte(v), &strct.DBProxyName); err != nil {
                return err
             }
            DBProxyNameReceived = true
        case "DebugLogging":
            if err := json.Unmarshal([]byte(v), &strct.DebugLogging); err != nil {
                return err
             }
        case "Endpoint":
            if err := json.Unmarshal([]byte(v), &strct.Endpoint); err != nil {
                return err
             }
        case "EngineFamily":
            if err := json.Unmarshal([]byte(v), &strct.EngineFamily); err != nil {
                return err
             }
            EngineFamilyReceived = true
        case "IdleClientTimeout":
            if err := json.Unmarshal([]byte(v), &strct.IdleClientTimeout); err != nil {
                return err
             }
        case "RequireTLS":
            if err := json.Unmarshal([]byte(v), &strct.RequireTLS); err != nil {
                return err
             }
        case "RoleArn":
            if err := json.Unmarshal([]byte(v), &strct.RoleArn); err != nil {
                return err
             }
            RoleArnReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "VpcId":
            if err := json.Unmarshal([]byte(v), &strct.VpcId); err != nil {
                return err
             }
        case "VpcSecurityGroupIds":
            if err := json.Unmarshal([]byte(v), &strct.VpcSecurityGroupIds); err != nil {
                return err
             }
        case "VpcSubnetIds":
            if err := json.Unmarshal([]byte(v), &strct.VpcSubnetIds); err != nil {
                return err
             }
            VpcSubnetIdsReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Auth (a required property) was received
    if !AuthReceived {
        return errors.New("\"Auth\" is required but was not present")
    }
    // check if DBProxyName (a required property) was received
    if !DBProxyNameReceived {
        return errors.New("\"DBProxyName\" is required but was not present")
    }
    // check if EngineFamily (a required property) was received
    if !EngineFamilyReceived {
        return errors.New("\"EngineFamily\" is required but was not present")
    }
    // check if RoleArn (a required property) was received
    if !RoleArnReceived {
        return errors.New("\"RoleArn\" is required but was not present")
    }
    // check if VpcSubnetIds (a required property) was received
    if !VpcSubnetIdsReceived {
        return errors.New("\"VpcSubnetIds\" is required but was not present")
    }
    return nil
}

func (strct *TagFormat) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TagFormat) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
