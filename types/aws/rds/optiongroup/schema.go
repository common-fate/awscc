// Code generated by schema-generate. DO NOT EDIT.

package optiongroup

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// OptionConfiguration The OptionConfiguration property type specifies an individual option, and its settings, within an AWS::RDS::OptionGroup resource.
type OptionConfiguration struct {

  // A list of DBSecurityGroupMembership name strings used for this option.
  DBSecurityGroupMemberships []string `json:"DBSecurityGroupMemberships,omitempty"`

  // The configuration of options to include in a group.
  OptionName string `json:"OptionName"`

  // The option settings to include in an option group.
  OptionSettings []*OptionSetting `json:"OptionSettings,omitempty"`

  // The version for the option.
  OptionVersion string `json:"OptionVersion,omitempty"`

  // The optional port for the option.
  Port int `json:"Port,omitempty"`

  // A list of VpcSecurityGroupMembership name strings used for this option.
  VpcSecurityGroupMemberships []string `json:"VpcSecurityGroupMemberships,omitempty"`
}

// OptionSetting The OptionSetting property type specifies the value for an option within an OptionSetting property.
type OptionSetting struct {

  // The name of the option that has settings that you can set.
  Name string `json:"Name,omitempty"`

  // The current value of the option setting.
  Value string `json:"Value,omitempty"`
}

// Resource The AWS::RDS::OptionGroup resource creates an option group, to enable and configure features that are specific to a particular DB engine.
type Resource struct {

  // Indicates the name of the engine that this option group can be applied to.
  EngineName string `json:"EngineName"`

  // Indicates the major engine version associated with this option group.
  MajorEngineVersion string `json:"MajorEngineVersion"`

  // Indicates what options are available in the option group.
  OptionConfigurations []*OptionConfiguration `json:"OptionConfigurations,omitempty"`

  // Provides a description of the option group.
  OptionGroupDescription string `json:"OptionGroupDescription"`

  // Specifies the name of the option group.
  OptionGroupName string `json:"OptionGroupName,omitempty"`

  // An array of key-value pairs to apply to this resource.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag A key-value pair to associate with a resource.
type Tag struct {

  // The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Key string `json:"Key"`

  // The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
  Value string `json:"Value,omitempty"`
}

func (strct *OptionConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DBSecurityGroupMemberships" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DBSecurityGroupMemberships\": ")
	if tmp, err := json.Marshal(strct.DBSecurityGroupMemberships); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "OptionName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "OptionName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OptionName\": ")
	if tmp, err := json.Marshal(strct.OptionName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OptionSettings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OptionSettings\": ")
	if tmp, err := json.Marshal(strct.OptionSettings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OptionVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OptionVersion\": ")
	if tmp, err := json.Marshal(strct.OptionVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Port" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Port\": ")
	if tmp, err := json.Marshal(strct.Port); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpcSecurityGroupMemberships" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcSecurityGroupMemberships\": ")
	if tmp, err := json.Marshal(strct.VpcSecurityGroupMemberships); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OptionConfiguration) UnmarshalJSON(b []byte) error {
    OptionNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DBSecurityGroupMemberships":
            if err := json.Unmarshal([]byte(v), &strct.DBSecurityGroupMemberships); err != nil {
                return err
             }
        case "OptionName":
            if err := json.Unmarshal([]byte(v), &strct.OptionName); err != nil {
                return err
             }
            OptionNameReceived = true
        case "OptionSettings":
            if err := json.Unmarshal([]byte(v), &strct.OptionSettings); err != nil {
                return err
             }
        case "OptionVersion":
            if err := json.Unmarshal([]byte(v), &strct.OptionVersion); err != nil {
                return err
             }
        case "Port":
            if err := json.Unmarshal([]byte(v), &strct.Port); err != nil {
                return err
             }
        case "VpcSecurityGroupMemberships":
            if err := json.Unmarshal([]byte(v), &strct.VpcSecurityGroupMemberships); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if OptionName (a required property) was received
    if !OptionNameReceived {
        return errors.New("\"OptionName\" is required but was not present")
    }
    return nil
}

func (strct *OptionSetting) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *OptionSetting) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "EngineName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "EngineName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EngineName\": ")
	if tmp, err := json.Marshal(strct.EngineName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MajorEngineVersion" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MajorEngineVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MajorEngineVersion\": ")
	if tmp, err := json.Marshal(strct.MajorEngineVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OptionConfigurations" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OptionConfigurations\": ")
	if tmp, err := json.Marshal(strct.OptionConfigurations); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "OptionGroupDescription" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "OptionGroupDescription" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OptionGroupDescription\": ")
	if tmp, err := json.Marshal(strct.OptionGroupDescription); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OptionGroupName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OptionGroupName\": ")
	if tmp, err := json.Marshal(strct.OptionGroupName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    EngineNameReceived := false
    MajorEngineVersionReceived := false
    OptionGroupDescriptionReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "EngineName":
            if err := json.Unmarshal([]byte(v), &strct.EngineName); err != nil {
                return err
             }
            EngineNameReceived = true
        case "MajorEngineVersion":
            if err := json.Unmarshal([]byte(v), &strct.MajorEngineVersion); err != nil {
                return err
             }
            MajorEngineVersionReceived = true
        case "OptionConfigurations":
            if err := json.Unmarshal([]byte(v), &strct.OptionConfigurations); err != nil {
                return err
             }
        case "OptionGroupDescription":
            if err := json.Unmarshal([]byte(v), &strct.OptionGroupDescription); err != nil {
                return err
             }
            OptionGroupDescriptionReceived = true
        case "OptionGroupName":
            if err := json.Unmarshal([]byte(v), &strct.OptionGroupName); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if EngineName (a required property) was received
    if !EngineNameReceived {
        return errors.New("\"EngineName\" is required but was not present")
    }
    // check if MajorEngineVersion (a required property) was received
    if !MajorEngineVersionReceived {
        return errors.New("\"MajorEngineVersion\" is required but was not present")
    }
    // check if OptionGroupDescription (a required property) was received
    if !OptionGroupDescriptionReceived {
        return errors.New("\"OptionGroupDescription\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    return nil
}
