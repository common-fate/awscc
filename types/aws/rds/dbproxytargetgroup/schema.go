// Code generated by schema-generate. DO NOT EDIT.

package dbproxytargetgroup

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// ConnectionPoolConfigurationInfoFormat 
type ConnectionPoolConfigurationInfoFormat struct {

  // The number of seconds for a proxy to wait for a connection to become available in the connection pool.
  ConnectionBorrowTimeout int `json:"ConnectionBorrowTimeout,omitempty"`

  // One or more SQL statements for the proxy to run when opening each new database connection.
  InitQuery string `json:"InitQuery,omitempty"`

  // The maximum size of the connection pool for each target in a target group.
  MaxConnectionsPercent int `json:"MaxConnectionsPercent,omitempty"`

  // Controls how actively the proxy closes idle database connections in the connection pool.
  MaxIdleConnectionsPercent int `json:"MaxIdleConnectionsPercent,omitempty"`

  // Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection.
  SessionPinningFilters []string `json:"SessionPinningFilters,omitempty"`
}

// Resource Resource schema for AWS::RDS::DBProxyTargetGroup
type Resource struct {
  ConnectionPoolConfigurationInfo *ConnectionPoolConfigurationInfoFormat `json:"ConnectionPoolConfigurationInfo,omitempty"`
  DBClusterIdentifiers []string `json:"DBClusterIdentifiers,omitempty"`
  DBInstanceIdentifiers []string `json:"DBInstanceIdentifiers,omitempty"`

  // The identifier for the proxy.
  DBProxyName string `json:"DBProxyName"`

  // The Amazon Resource Name (ARN) representing the target group.
  TargetGroupArn string `json:"TargetGroupArn,omitempty"`

  // The identifier for the DBProxyTargetGroup
  TargetGroupName string `json:"TargetGroupName"`
}

func (strct *ConnectionPoolConfigurationInfoFormat) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ConnectionBorrowTimeout" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConnectionBorrowTimeout\": ")
	if tmp, err := json.Marshal(strct.ConnectionBorrowTimeout); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InitQuery" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InitQuery\": ")
	if tmp, err := json.Marshal(strct.InitQuery); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaxConnectionsPercent" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxConnectionsPercent\": ")
	if tmp, err := json.Marshal(strct.MaxConnectionsPercent); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaxIdleConnectionsPercent" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxIdleConnectionsPercent\": ")
	if tmp, err := json.Marshal(strct.MaxIdleConnectionsPercent); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SessionPinningFilters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SessionPinningFilters\": ")
	if tmp, err := json.Marshal(strct.SessionPinningFilters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ConnectionPoolConfigurationInfoFormat) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ConnectionBorrowTimeout":
            if err := json.Unmarshal([]byte(v), &strct.ConnectionBorrowTimeout); err != nil {
                return err
             }
        case "InitQuery":
            if err := json.Unmarshal([]byte(v), &strct.InitQuery); err != nil {
                return err
             }
        case "MaxConnectionsPercent":
            if err := json.Unmarshal([]byte(v), &strct.MaxConnectionsPercent); err != nil {
                return err
             }
        case "MaxIdleConnectionsPercent":
            if err := json.Unmarshal([]byte(v), &strct.MaxIdleConnectionsPercent); err != nil {
                return err
             }
        case "SessionPinningFilters":
            if err := json.Unmarshal([]byte(v), &strct.SessionPinningFilters); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ConnectionPoolConfigurationInfo" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConnectionPoolConfigurationInfo\": ")
	if tmp, err := json.Marshal(strct.ConnectionPoolConfigurationInfo); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DBClusterIdentifiers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DBClusterIdentifiers\": ")
	if tmp, err := json.Marshal(strct.DBClusterIdentifiers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DBInstanceIdentifiers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DBInstanceIdentifiers\": ")
	if tmp, err := json.Marshal(strct.DBInstanceIdentifiers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "DBProxyName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DBProxyName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DBProxyName\": ")
	if tmp, err := json.Marshal(strct.DBProxyName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TargetGroupArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TargetGroupArn\": ")
	if tmp, err := json.Marshal(strct.TargetGroupArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TargetGroupName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TargetGroupName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TargetGroupName\": ")
	if tmp, err := json.Marshal(strct.TargetGroupName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DBProxyNameReceived := false
    TargetGroupNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ConnectionPoolConfigurationInfo":
            if err := json.Unmarshal([]byte(v), &strct.ConnectionPoolConfigurationInfo); err != nil {
                return err
             }
        case "DBClusterIdentifiers":
            if err := json.Unmarshal([]byte(v), &strct.DBClusterIdentifiers); err != nil {
                return err
             }
        case "DBInstanceIdentifiers":
            if err := json.Unmarshal([]byte(v), &strct.DBInstanceIdentifiers); err != nil {
                return err
             }
        case "DBProxyName":
            if err := json.Unmarshal([]byte(v), &strct.DBProxyName); err != nil {
                return err
             }
            DBProxyNameReceived = true
        case "TargetGroupArn":
            if err := json.Unmarshal([]byte(v), &strct.TargetGroupArn); err != nil {
                return err
             }
        case "TargetGroupName":
            if err := json.Unmarshal([]byte(v), &strct.TargetGroupName); err != nil {
                return err
             }
            TargetGroupNameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DBProxyName (a required property) was received
    if !DBProxyNameReceived {
        return errors.New("\"DBProxyName\" is required but was not present")
    }
    // check if TargetGroupName (a required property) was received
    if !TargetGroupNameReceived {
        return errors.New("\"TargetGroupName\" is required but was not present")
    }
    return nil
}
