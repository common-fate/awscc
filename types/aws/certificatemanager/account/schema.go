// Code generated by schema-generate. DO NOT EDIT.

package account

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// ExpiryEventsConfiguration 
type ExpiryEventsConfiguration struct {
  DaysBeforeExpiry int `json:"DaysBeforeExpiry,omitempty"`
}

// Resource Resource schema for AWS::CertificateManager::Account.
type Resource struct {
  AccountId string `json:"AccountId,omitempty"`
  ExpiryEventsConfiguration *ExpiryEventsConfiguration `json:"ExpiryEventsConfiguration"`
}

func (strct *ExpiryEventsConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DaysBeforeExpiry" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DaysBeforeExpiry\": ")
	if tmp, err := json.Marshal(strct.DaysBeforeExpiry); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ExpiryEventsConfiguration) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DaysBeforeExpiry":
            if err := json.Unmarshal([]byte(v), &strct.DaysBeforeExpiry); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AccountId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AccountId\": ")
	if tmp, err := json.Marshal(strct.AccountId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ExpiryEventsConfiguration" field is required
    if strct.ExpiryEventsConfiguration == nil {
        return nil, errors.New("ExpiryEventsConfiguration is a required field")
    }
    // Marshal the "ExpiryEventsConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ExpiryEventsConfiguration\": ")
	if tmp, err := json.Marshal(strct.ExpiryEventsConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ExpiryEventsConfigurationReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AccountId":
            if err := json.Unmarshal([]byte(v), &strct.AccountId); err != nil {
                return err
             }
        case "ExpiryEventsConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.ExpiryEventsConfiguration); err != nil {
                return err
             }
            ExpiryEventsConfigurationReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ExpiryEventsConfiguration (a required property) was received
    if !ExpiryEventsConfigurationReceived {
        return errors.New("\"ExpiryEventsConfiguration\" is required but was not present")
    }
    return nil
}
