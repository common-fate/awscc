// Code generated by schema-generate. DO NOT EDIT.

package view

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Filters 
type Filters struct {
  FilterString string `json:"FilterString"`
}

// IncludedProperty 
type IncludedProperty struct {
  Name string `json:"Name"`
}

// Resource Definition of AWS::ResourceExplorer2::View Resource Type
type Resource struct {
  Filters *Filters `json:"Filters,omitempty"`
  IncludedProperties []*IncludedProperty `json:"IncludedProperties,omitempty"`
  Tags *TagMap `json:"Tags,omitempty"`
  ViewArn string `json:"ViewArn,omitempty"`
  ViewName string `json:"ViewName"`
}

// TagMap 
type TagMap struct {
}

func (strct *Filters) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "FilterString" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "FilterString" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FilterString\": ")
	if tmp, err := json.Marshal(strct.FilterString); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Filters) UnmarshalJSON(b []byte) error {
    FilterStringReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "FilterString":
            if err := json.Unmarshal([]byte(v), &strct.FilterString); err != nil {
                return err
             }
            FilterStringReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if FilterString (a required property) was received
    if !FilterStringReceived {
        return errors.New("\"FilterString\" is required but was not present")
    }
    return nil
}

func (strct *IncludedProperty) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *IncludedProperty) UnmarshalJSON(b []byte) error {
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Filters" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Filters\": ")
	if tmp, err := json.Marshal(strct.Filters); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IncludedProperties" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IncludedProperties\": ")
	if tmp, err := json.Marshal(strct.IncludedProperties); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ViewArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ViewArn\": ")
	if tmp, err := json.Marshal(strct.ViewArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ViewName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ViewName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ViewName\": ")
	if tmp, err := json.Marshal(strct.ViewName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ViewNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Filters":
            if err := json.Unmarshal([]byte(v), &strct.Filters); err != nil {
                return err
             }
        case "IncludedProperties":
            if err := json.Unmarshal([]byte(v), &strct.IncludedProperties); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "ViewArn":
            if err := json.Unmarshal([]byte(v), &strct.ViewArn); err != nil {
                return err
             }
        case "ViewName":
            if err := json.Unmarshal([]byte(v), &strct.ViewName); err != nil {
                return err
             }
            ViewNameReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ViewName (a required property) was received
    if !ViewNameReceived {
        return errors.New("\"ViewName\" is required but was not present")
    }
    return nil
}

func (strct *TagMap) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TagMap) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
