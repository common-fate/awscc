// Code generated by schema-generate. DO NOT EDIT.

package defaultviewassociation

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Definition of AWS::ResourceExplorer2::DefaultViewAssociation Resource Type
type Resource struct {

  // The AWS principal that the default view is associated with, used as the unique identifier for this resource.
  AssociatedAwsPrincipal string `json:"AssociatedAwsPrincipal,omitempty"`
  ViewArn string `json:"ViewArn"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AssociatedAwsPrincipal" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AssociatedAwsPrincipal\": ")
	if tmp, err := json.Marshal(strct.AssociatedAwsPrincipal); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ViewArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ViewArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ViewArn\": ")
	if tmp, err := json.Marshal(strct.ViewArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    ViewArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AssociatedAwsPrincipal":
            if err := json.Unmarshal([]byte(v), &strct.AssociatedAwsPrincipal); err != nil {
                return err
             }
        case "ViewArn":
            if err := json.Unmarshal([]byte(v), &strct.ViewArn); err != nil {
                return err
             }
            ViewArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if ViewArn (a required property) was received
    if !ViewArnReceived {
        return errors.New("\"ViewArn\" is required but was not present")
    }
    return nil
}
