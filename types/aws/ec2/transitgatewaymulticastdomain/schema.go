// Code generated by schema-generate. DO NOT EDIT.

package transitgatewaymulticastdomain

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Options The options for the transit gateway multicast domain.
type Options struct {

  // Indicates whether to automatically cross-account subnet associations that are associated with the transit gateway multicast domain. Valid Values: enable | disable
  AutoAcceptSharedAssociations string `json:"AutoAcceptSharedAssociations,omitempty"`

  // Indicates whether Internet Group Management Protocol (IGMP) version 2 is turned on for the transit gateway multicast domain. Valid Values: enable | disable
  Igmpv2Support string `json:"Igmpv2Support,omitempty"`

  // Indicates whether support for statically configuring transit gateway multicast group sources is turned on. Valid Values: enable | disable
  StaticSourcesSupport string `json:"StaticSourcesSupport,omitempty"`
}

// Resource The AWS::EC2::TransitGatewayMulticastDomain type
type Resource struct {

  // The time the transit gateway multicast domain was created.
  CreationTime string `json:"CreationTime,omitempty"`

  // The options for the transit gateway multicast domain.
  Options *Options `json:"Options,omitempty"`

  // The state of the transit gateway multicast domain.
  State string `json:"State,omitempty"`

  // The tags for the transit gateway multicast domain.
  Tags []*Tag `json:"Tags,omitempty"`

  // The ID of the transit gateway.
  TransitGatewayId string `json:"TransitGatewayId"`

  // The Amazon Resource Name (ARN) of the transit gateway multicast domain.
  TransitGatewayMulticastDomainArn string `json:"TransitGatewayMulticastDomainArn,omitempty"`

  // The ID of the transit gateway multicast domain.
  TransitGatewayMulticastDomainId string `json:"TransitGatewayMulticastDomainId,omitempty"`
}

// Tag 
type Tag struct {

  // The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with aws:.
  Key string `json:"Key,omitempty"`

  // The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.
  Value string `json:"Value,omitempty"`
}

func (strct *Options) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AutoAcceptSharedAssociations" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AutoAcceptSharedAssociations\": ")
	if tmp, err := json.Marshal(strct.AutoAcceptSharedAssociations); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Igmpv2Support" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Igmpv2Support\": ")
	if tmp, err := json.Marshal(strct.Igmpv2Support); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StaticSourcesSupport" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StaticSourcesSupport\": ")
	if tmp, err := json.Marshal(strct.StaticSourcesSupport); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Options) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AutoAcceptSharedAssociations":
            if err := json.Unmarshal([]byte(v), &strct.AutoAcceptSharedAssociations); err != nil {
                return err
             }
        case "Igmpv2Support":
            if err := json.Unmarshal([]byte(v), &strct.Igmpv2Support); err != nil {
                return err
             }
        case "StaticSourcesSupport":
            if err := json.Unmarshal([]byte(v), &strct.StaticSourcesSupport); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CreationTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreationTime\": ")
	if tmp, err := json.Marshal(strct.CreationTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Options" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Options\": ")
	if tmp, err := json.Marshal(strct.Options); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "State" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"State\": ")
	if tmp, err := json.Marshal(strct.State); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TransitGatewayId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TransitGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayId\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGatewayMulticastDomainArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayMulticastDomainArn\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayMulticastDomainArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGatewayMulticastDomainId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayMulticastDomainId\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayMulticastDomainId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    TransitGatewayIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CreationTime":
            if err := json.Unmarshal([]byte(v), &strct.CreationTime); err != nil {
                return err
             }
        case "Options":
            if err := json.Unmarshal([]byte(v), &strct.Options); err != nil {
                return err
             }
        case "State":
            if err := json.Unmarshal([]byte(v), &strct.State); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TransitGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayId); err != nil {
                return err
             }
            TransitGatewayIdReceived = true
        case "TransitGatewayMulticastDomainArn":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayMulticastDomainArn); err != nil {
                return err
             }
        case "TransitGatewayMulticastDomainId":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayMulticastDomainId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if TransitGatewayId (a required property) was received
    if !TransitGatewayIdReceived {
        return errors.New("\"TransitGatewayId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
