// Code generated by schema-generate. DO NOT EDIT.

package networkinsightsanalysis

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// AdditionalDetail 
type AdditionalDetail struct {
  AdditionalDetailType string `json:"AdditionalDetailType,omitempty"`
  Component *AnalysisComponent `json:"Component,omitempty"`
  LoadBalancers []*AnalysisComponent `json:"LoadBalancers,omitempty"`
  ServiceName string `json:"ServiceName,omitempty"`
}

// AlternatePathHint 
type AlternatePathHint struct {
  ComponentArn string `json:"ComponentArn,omitempty"`
  ComponentId string `json:"ComponentId,omitempty"`
}

// AnalysisAclRule 
type AnalysisAclRule struct {
  Cidr string `json:"Cidr,omitempty"`
  Egress bool `json:"Egress,omitempty"`
  PortRange *PortRange `json:"PortRange,omitempty"`
  Protocol string `json:"Protocol,omitempty"`
  RuleAction string `json:"RuleAction,omitempty"`
  RuleNumber int `json:"RuleNumber,omitempty"`
}

// AnalysisComponent 
type AnalysisComponent struct {
  Arn string `json:"Arn,omitempty"`
  Id string `json:"Id,omitempty"`
}

// AnalysisLoadBalancerListener 
type AnalysisLoadBalancerListener struct {
  InstancePort int `json:"InstancePort,omitempty"`
  LoadBalancerPort int `json:"LoadBalancerPort,omitempty"`
}

// AnalysisLoadBalancerTarget 
type AnalysisLoadBalancerTarget struct {
  Address string `json:"Address,omitempty"`
  AvailabilityZone string `json:"AvailabilityZone,omitempty"`
  Instance *AnalysisComponent `json:"Instance,omitempty"`
  Port int `json:"Port,omitempty"`
}

// AnalysisPacketHeader 
type AnalysisPacketHeader struct {
  DestinationAddresses []string `json:"DestinationAddresses,omitempty"`
  DestinationPortRanges []*PortRange `json:"DestinationPortRanges,omitempty"`
  Protocol string `json:"Protocol,omitempty"`
  SourceAddresses []string `json:"SourceAddresses,omitempty"`
  SourcePortRanges []*PortRange `json:"SourcePortRanges,omitempty"`
}

// AnalysisRouteTableRoute 
type AnalysisRouteTableRoute struct {
  DestinationCidr string `json:"destinationCidr,omitempty"`
  DestinationPrefixListId string `json:"destinationPrefixListId,omitempty"`
  EgressOnlyInternetGatewayId string `json:"egressOnlyInternetGatewayId,omitempty"`
  GatewayId string `json:"gatewayId,omitempty"`
  InstanceId string `json:"instanceId,omitempty"`
  NatGatewayId string `json:"NatGatewayId,omitempty"`
  NetworkInterfaceId string `json:"NetworkInterfaceId,omitempty"`
  Origin string `json:"Origin,omitempty"`
  State string `json:"State,omitempty"`
  TransitGatewayId string `json:"TransitGatewayId,omitempty"`
  VpcPeeringConnectionId string `json:"VpcPeeringConnectionId,omitempty"`
}

// AnalysisSecurityGroupRule 
type AnalysisSecurityGroupRule struct {
  Cidr string `json:"Cidr,omitempty"`
  Direction string `json:"Direction,omitempty"`
  PortRange *PortRange `json:"PortRange,omitempty"`
  PrefixListId string `json:"PrefixListId,omitempty"`
  Protocol string `json:"Protocol,omitempty"`
  SecurityGroupId string `json:"SecurityGroupId,omitempty"`
}

// Explanation 
type Explanation struct {
  Acl *AnalysisComponent `json:"Acl,omitempty"`
  AclRule *AnalysisAclRule `json:"AclRule,omitempty"`
  Address string `json:"Address,omitempty"`
  Addresses []string `json:"Addresses,omitempty"`
  AttachedTo *AnalysisComponent `json:"AttachedTo,omitempty"`
  AvailabilityZones []string `json:"AvailabilityZones,omitempty"`
  Cidrs []string `json:"Cidrs,omitempty"`
  ClassicLoadBalancerListener *AnalysisLoadBalancerListener `json:"ClassicLoadBalancerListener,omitempty"`
  Component *AnalysisComponent `json:"Component,omitempty"`
  ComponentAccount string `json:"ComponentAccount,omitempty"`
  ComponentRegion string `json:"ComponentRegion,omitempty"`
  CustomerGateway *AnalysisComponent `json:"CustomerGateway,omitempty"`
  Destination *AnalysisComponent `json:"Destination,omitempty"`
  DestinationVpc *AnalysisComponent `json:"DestinationVpc,omitempty"`
  Direction string `json:"Direction,omitempty"`
  ElasticLoadBalancerListener *AnalysisComponent `json:"ElasticLoadBalancerListener,omitempty"`
  ExplanationCode string `json:"ExplanationCode,omitempty"`
  IngressRouteTable *AnalysisComponent `json:"IngressRouteTable,omitempty"`
  InternetGateway *AnalysisComponent `json:"InternetGateway,omitempty"`
  LoadBalancerArn string `json:"LoadBalancerArn,omitempty"`
  LoadBalancerListenerPort int `json:"LoadBalancerListenerPort,omitempty"`
  LoadBalancerTarget *AnalysisLoadBalancerTarget `json:"LoadBalancerTarget,omitempty"`
  LoadBalancerTargetGroup *AnalysisComponent `json:"LoadBalancerTargetGroup,omitempty"`
  LoadBalancerTargetGroups []*AnalysisComponent `json:"LoadBalancerTargetGroups,omitempty"`
  LoadBalancerTargetPort int `json:"LoadBalancerTargetPort,omitempty"`
  MissingComponent string `json:"MissingComponent,omitempty"`
  NatGateway *AnalysisComponent `json:"NatGateway,omitempty"`
  NetworkInterface *AnalysisComponent `json:"NetworkInterface,omitempty"`
  PacketField string `json:"PacketField,omitempty"`
  Port int `json:"Port,omitempty"`
  PortRanges []*PortRange `json:"PortRanges,omitempty"`
  PrefixList *AnalysisComponent `json:"PrefixList,omitempty"`
  Protocols []string `json:"Protocols,omitempty"`
  RouteTable *AnalysisComponent `json:"RouteTable,omitempty"`
  RouteTableRoute *AnalysisRouteTableRoute `json:"RouteTableRoute,omitempty"`
  SecurityGroup *AnalysisComponent `json:"SecurityGroup,omitempty"`
  SecurityGroupRule *AnalysisSecurityGroupRule `json:"SecurityGroupRule,omitempty"`
  SecurityGroups []*AnalysisComponent `json:"SecurityGroups,omitempty"`
  SourceVpc *AnalysisComponent `json:"SourceVpc,omitempty"`
  State string `json:"State,omitempty"`
  Subnet *AnalysisComponent `json:"Subnet,omitempty"`
  SubnetRouteTable *AnalysisComponent `json:"SubnetRouteTable,omitempty"`
  TransitGateway *AnalysisComponent `json:"TransitGateway,omitempty"`
  TransitGatewayAttachment *AnalysisComponent `json:"TransitGatewayAttachment,omitempty"`
  TransitGatewayRouteTable *AnalysisComponent `json:"TransitGatewayRouteTable,omitempty"`
  TransitGatewayRouteTableRoute *TransitGatewayRouteTableRoute `json:"TransitGatewayRouteTableRoute,omitempty"`
  Vpc *AnalysisComponent `json:"Vpc,omitempty"`
  VpcEndpoint *AnalysisComponent `json:"vpcEndpoint,omitempty"`
  VpcPeeringConnection *AnalysisComponent `json:"VpcPeeringConnection,omitempty"`
  VpnConnection *AnalysisComponent `json:"VpnConnection,omitempty"`
  VpnGateway *AnalysisComponent `json:"VpnGateway,omitempty"`
}

// PathComponent 
type PathComponent struct {
  AclRule *AnalysisAclRule `json:"AclRule,omitempty"`
  AdditionalDetails []*AdditionalDetail `json:"AdditionalDetails,omitempty"`
  Component *AnalysisComponent `json:"Component,omitempty"`
  DestinationVpc *AnalysisComponent `json:"DestinationVpc,omitempty"`
  ElasticLoadBalancerListener *AnalysisComponent `json:"ElasticLoadBalancerListener,omitempty"`
  Explanations []*Explanation `json:"Explanations,omitempty"`
  InboundHeader *AnalysisPacketHeader `json:"InboundHeader,omitempty"`
  OutboundHeader *AnalysisPacketHeader `json:"OutboundHeader,omitempty"`
  RouteTableRoute *AnalysisRouteTableRoute `json:"RouteTableRoute,omitempty"`
  SecurityGroupRule *AnalysisSecurityGroupRule `json:"SecurityGroupRule,omitempty"`
  SequenceNumber int `json:"SequenceNumber,omitempty"`
  ServiceName string `json:"ServiceName,omitempty"`
  SourceVpc *AnalysisComponent `json:"SourceVpc,omitempty"`
  Subnet *AnalysisComponent `json:"Subnet,omitempty"`
  TransitGateway *AnalysisComponent `json:"TransitGateway,omitempty"`
  TransitGatewayRouteTableRoute *TransitGatewayRouteTableRoute `json:"TransitGatewayRouteTableRoute,omitempty"`
  Vpc *AnalysisComponent `json:"Vpc,omitempty"`
}

// PortRange 
type PortRange struct {
  From int `json:"From,omitempty"`
  To int `json:"To,omitempty"`
}

// Resource Resource schema for AWS::EC2::NetworkInsightsAnalysis
type Resource struct {
  AdditionalAccounts []string `json:"AdditionalAccounts,omitempty"`
  AlternatePathHints []*AlternatePathHint `json:"AlternatePathHints,omitempty"`
  Explanations []*Explanation `json:"Explanations,omitempty"`
  FilterInArns []string `json:"FilterInArns,omitempty"`
  ForwardPathComponents []*PathComponent `json:"ForwardPathComponents,omitempty"`
  NetworkInsightsAnalysisArn string `json:"NetworkInsightsAnalysisArn,omitempty"`
  NetworkInsightsAnalysisId string `json:"NetworkInsightsAnalysisId,omitempty"`
  NetworkInsightsPathId string `json:"NetworkInsightsPathId"`
  NetworkPathFound bool `json:"NetworkPathFound,omitempty"`
  ReturnPathComponents []*PathComponent `json:"ReturnPathComponents,omitempty"`
  StartDate string `json:"StartDate,omitempty"`
  Status string `json:"Status,omitempty"`
  StatusMessage string `json:"StatusMessage,omitempty"`
  SuggestedAccounts []string `json:"SuggestedAccounts,omitempty"`
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value,omitempty"`
}

// TransitGatewayRouteTableRoute 
type TransitGatewayRouteTableRoute struct {
  AttachmentId string `json:"AttachmentId,omitempty"`
  DestinationCidr string `json:"DestinationCidr,omitempty"`
  PrefixListId string `json:"PrefixListId,omitempty"`
  ResourceId string `json:"ResourceId,omitempty"`
  ResourceType string `json:"ResourceType,omitempty"`
  RouteOrigin string `json:"RouteOrigin,omitempty"`
  State string `json:"State,omitempty"`
}

func (strct *AdditionalDetail) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AdditionalDetailType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AdditionalDetailType\": ")
	if tmp, err := json.Marshal(strct.AdditionalDetailType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Component" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Component\": ")
	if tmp, err := json.Marshal(strct.Component); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoadBalancers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoadBalancers\": ")
	if tmp, err := json.Marshal(strct.LoadBalancers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ServiceName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServiceName\": ")
	if tmp, err := json.Marshal(strct.ServiceName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AdditionalDetail) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AdditionalDetailType":
            if err := json.Unmarshal([]byte(v), &strct.AdditionalDetailType); err != nil {
                return err
             }
        case "Component":
            if err := json.Unmarshal([]byte(v), &strct.Component); err != nil {
                return err
             }
        case "LoadBalancers":
            if err := json.Unmarshal([]byte(v), &strct.LoadBalancers); err != nil {
                return err
             }
        case "ServiceName":
            if err := json.Unmarshal([]byte(v), &strct.ServiceName); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *AlternatePathHint) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ComponentArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ComponentArn\": ")
	if tmp, err := json.Marshal(strct.ComponentArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ComponentId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ComponentId\": ")
	if tmp, err := json.Marshal(strct.ComponentId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AlternatePathHint) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ComponentArn":
            if err := json.Unmarshal([]byte(v), &strct.ComponentArn); err != nil {
                return err
             }
        case "ComponentId":
            if err := json.Unmarshal([]byte(v), &strct.ComponentId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *AnalysisAclRule) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Cidr" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Cidr\": ")
	if tmp, err := json.Marshal(strct.Cidr); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Egress" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Egress\": ")
	if tmp, err := json.Marshal(strct.Egress); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PortRange" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PortRange\": ")
	if tmp, err := json.Marshal(strct.PortRange); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Protocol" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Protocol\": ")
	if tmp, err := json.Marshal(strct.Protocol); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RuleAction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RuleAction\": ")
	if tmp, err := json.Marshal(strct.RuleAction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RuleNumber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RuleNumber\": ")
	if tmp, err := json.Marshal(strct.RuleNumber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AnalysisAclRule) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Cidr":
            if err := json.Unmarshal([]byte(v), &strct.Cidr); err != nil {
                return err
             }
        case "Egress":
            if err := json.Unmarshal([]byte(v), &strct.Egress); err != nil {
                return err
             }
        case "PortRange":
            if err := json.Unmarshal([]byte(v), &strct.PortRange); err != nil {
                return err
             }
        case "Protocol":
            if err := json.Unmarshal([]byte(v), &strct.Protocol); err != nil {
                return err
             }
        case "RuleAction":
            if err := json.Unmarshal([]byte(v), &strct.RuleAction); err != nil {
                return err
             }
        case "RuleNumber":
            if err := json.Unmarshal([]byte(v), &strct.RuleNumber); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *AnalysisComponent) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AnalysisComponent) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *AnalysisLoadBalancerListener) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "InstancePort" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstancePort\": ")
	if tmp, err := json.Marshal(strct.InstancePort); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoadBalancerPort" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoadBalancerPort\": ")
	if tmp, err := json.Marshal(strct.LoadBalancerPort); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AnalysisLoadBalancerListener) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "InstancePort":
            if err := json.Unmarshal([]byte(v), &strct.InstancePort); err != nil {
                return err
             }
        case "LoadBalancerPort":
            if err := json.Unmarshal([]byte(v), &strct.LoadBalancerPort); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *AnalysisLoadBalancerTarget) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Address" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Address\": ")
	if tmp, err := json.Marshal(strct.Address); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AvailabilityZone" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AvailabilityZone\": ")
	if tmp, err := json.Marshal(strct.AvailabilityZone); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Instance" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Instance\": ")
	if tmp, err := json.Marshal(strct.Instance); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Port" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Port\": ")
	if tmp, err := json.Marshal(strct.Port); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AnalysisLoadBalancerTarget) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Address":
            if err := json.Unmarshal([]byte(v), &strct.Address); err != nil {
                return err
             }
        case "AvailabilityZone":
            if err := json.Unmarshal([]byte(v), &strct.AvailabilityZone); err != nil {
                return err
             }
        case "Instance":
            if err := json.Unmarshal([]byte(v), &strct.Instance); err != nil {
                return err
             }
        case "Port":
            if err := json.Unmarshal([]byte(v), &strct.Port); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *AnalysisPacketHeader) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DestinationAddresses" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DestinationAddresses\": ")
	if tmp, err := json.Marshal(strct.DestinationAddresses); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DestinationPortRanges" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DestinationPortRanges\": ")
	if tmp, err := json.Marshal(strct.DestinationPortRanges); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Protocol" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Protocol\": ")
	if tmp, err := json.Marshal(strct.Protocol); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SourceAddresses" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceAddresses\": ")
	if tmp, err := json.Marshal(strct.SourceAddresses); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SourcePortRanges" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourcePortRanges\": ")
	if tmp, err := json.Marshal(strct.SourcePortRanges); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AnalysisPacketHeader) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DestinationAddresses":
            if err := json.Unmarshal([]byte(v), &strct.DestinationAddresses); err != nil {
                return err
             }
        case "DestinationPortRanges":
            if err := json.Unmarshal([]byte(v), &strct.DestinationPortRanges); err != nil {
                return err
             }
        case "Protocol":
            if err := json.Unmarshal([]byte(v), &strct.Protocol); err != nil {
                return err
             }
        case "SourceAddresses":
            if err := json.Unmarshal([]byte(v), &strct.SourceAddresses); err != nil {
                return err
             }
        case "SourcePortRanges":
            if err := json.Unmarshal([]byte(v), &strct.SourcePortRanges); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *AnalysisRouteTableRoute) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "destinationCidr" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"destinationCidr\": ")
	if tmp, err := json.Marshal(strct.DestinationCidr); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "destinationPrefixListId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"destinationPrefixListId\": ")
	if tmp, err := json.Marshal(strct.DestinationPrefixListId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "egressOnlyInternetGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"egressOnlyInternetGatewayId\": ")
	if tmp, err := json.Marshal(strct.EgressOnlyInternetGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "gatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"gatewayId\": ")
	if tmp, err := json.Marshal(strct.GatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "instanceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"instanceId\": ")
	if tmp, err := json.Marshal(strct.InstanceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NatGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NatGatewayId\": ")
	if tmp, err := json.Marshal(strct.NatGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NetworkInterfaceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetworkInterfaceId\": ")
	if tmp, err := json.Marshal(strct.NetworkInterfaceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Origin" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Origin\": ")
	if tmp, err := json.Marshal(strct.Origin); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "State" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"State\": ")
	if tmp, err := json.Marshal(strct.State); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayId\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpcPeeringConnectionId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcPeeringConnectionId\": ")
	if tmp, err := json.Marshal(strct.VpcPeeringConnectionId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AnalysisRouteTableRoute) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "destinationCidr":
            if err := json.Unmarshal([]byte(v), &strct.DestinationCidr); err != nil {
                return err
             }
        case "destinationPrefixListId":
            if err := json.Unmarshal([]byte(v), &strct.DestinationPrefixListId); err != nil {
                return err
             }
        case "egressOnlyInternetGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.EgressOnlyInternetGatewayId); err != nil {
                return err
             }
        case "gatewayId":
            if err := json.Unmarshal([]byte(v), &strct.GatewayId); err != nil {
                return err
             }
        case "instanceId":
            if err := json.Unmarshal([]byte(v), &strct.InstanceId); err != nil {
                return err
             }
        case "NatGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.NatGatewayId); err != nil {
                return err
             }
        case "NetworkInterfaceId":
            if err := json.Unmarshal([]byte(v), &strct.NetworkInterfaceId); err != nil {
                return err
             }
        case "Origin":
            if err := json.Unmarshal([]byte(v), &strct.Origin); err != nil {
                return err
             }
        case "State":
            if err := json.Unmarshal([]byte(v), &strct.State); err != nil {
                return err
             }
        case "TransitGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayId); err != nil {
                return err
             }
        case "VpcPeeringConnectionId":
            if err := json.Unmarshal([]byte(v), &strct.VpcPeeringConnectionId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *AnalysisSecurityGroupRule) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Cidr" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Cidr\": ")
	if tmp, err := json.Marshal(strct.Cidr); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Direction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Direction\": ")
	if tmp, err := json.Marshal(strct.Direction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PortRange" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PortRange\": ")
	if tmp, err := json.Marshal(strct.PortRange); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PrefixListId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PrefixListId\": ")
	if tmp, err := json.Marshal(strct.PrefixListId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Protocol" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Protocol\": ")
	if tmp, err := json.Marshal(strct.Protocol); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecurityGroupId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecurityGroupId\": ")
	if tmp, err := json.Marshal(strct.SecurityGroupId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AnalysisSecurityGroupRule) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Cidr":
            if err := json.Unmarshal([]byte(v), &strct.Cidr); err != nil {
                return err
             }
        case "Direction":
            if err := json.Unmarshal([]byte(v), &strct.Direction); err != nil {
                return err
             }
        case "PortRange":
            if err := json.Unmarshal([]byte(v), &strct.PortRange); err != nil {
                return err
             }
        case "PrefixListId":
            if err := json.Unmarshal([]byte(v), &strct.PrefixListId); err != nil {
                return err
             }
        case "Protocol":
            if err := json.Unmarshal([]byte(v), &strct.Protocol); err != nil {
                return err
             }
        case "SecurityGroupId":
            if err := json.Unmarshal([]byte(v), &strct.SecurityGroupId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Explanation) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Acl" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Acl\": ")
	if tmp, err := json.Marshal(strct.Acl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AclRule" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AclRule\": ")
	if tmp, err := json.Marshal(strct.AclRule); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Address" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Address\": ")
	if tmp, err := json.Marshal(strct.Address); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Addresses" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Addresses\": ")
	if tmp, err := json.Marshal(strct.Addresses); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AttachedTo" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AttachedTo\": ")
	if tmp, err := json.Marshal(strct.AttachedTo); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AvailabilityZones" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AvailabilityZones\": ")
	if tmp, err := json.Marshal(strct.AvailabilityZones); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Cidrs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Cidrs\": ")
	if tmp, err := json.Marshal(strct.Cidrs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ClassicLoadBalancerListener" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ClassicLoadBalancerListener\": ")
	if tmp, err := json.Marshal(strct.ClassicLoadBalancerListener); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Component" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Component\": ")
	if tmp, err := json.Marshal(strct.Component); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ComponentAccount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ComponentAccount\": ")
	if tmp, err := json.Marshal(strct.ComponentAccount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ComponentRegion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ComponentRegion\": ")
	if tmp, err := json.Marshal(strct.ComponentRegion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CustomerGateway" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CustomerGateway\": ")
	if tmp, err := json.Marshal(strct.CustomerGateway); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Destination" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Destination\": ")
	if tmp, err := json.Marshal(strct.Destination); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DestinationVpc" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DestinationVpc\": ")
	if tmp, err := json.Marshal(strct.DestinationVpc); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Direction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Direction\": ")
	if tmp, err := json.Marshal(strct.Direction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ElasticLoadBalancerListener" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ElasticLoadBalancerListener\": ")
	if tmp, err := json.Marshal(strct.ElasticLoadBalancerListener); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ExplanationCode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ExplanationCode\": ")
	if tmp, err := json.Marshal(strct.ExplanationCode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "IngressRouteTable" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IngressRouteTable\": ")
	if tmp, err := json.Marshal(strct.IngressRouteTable); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InternetGateway" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InternetGateway\": ")
	if tmp, err := json.Marshal(strct.InternetGateway); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoadBalancerArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoadBalancerArn\": ")
	if tmp, err := json.Marshal(strct.LoadBalancerArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoadBalancerListenerPort" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoadBalancerListenerPort\": ")
	if tmp, err := json.Marshal(strct.LoadBalancerListenerPort); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoadBalancerTarget" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoadBalancerTarget\": ")
	if tmp, err := json.Marshal(strct.LoadBalancerTarget); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoadBalancerTargetGroup" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoadBalancerTargetGroup\": ")
	if tmp, err := json.Marshal(strct.LoadBalancerTargetGroup); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoadBalancerTargetGroups" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoadBalancerTargetGroups\": ")
	if tmp, err := json.Marshal(strct.LoadBalancerTargetGroups); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LoadBalancerTargetPort" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LoadBalancerTargetPort\": ")
	if tmp, err := json.Marshal(strct.LoadBalancerTargetPort); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MissingComponent" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MissingComponent\": ")
	if tmp, err := json.Marshal(strct.MissingComponent); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NatGateway" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NatGateway\": ")
	if tmp, err := json.Marshal(strct.NatGateway); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NetworkInterface" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetworkInterface\": ")
	if tmp, err := json.Marshal(strct.NetworkInterface); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PacketField" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PacketField\": ")
	if tmp, err := json.Marshal(strct.PacketField); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Port" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Port\": ")
	if tmp, err := json.Marshal(strct.Port); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PortRanges" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PortRanges\": ")
	if tmp, err := json.Marshal(strct.PortRanges); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PrefixList" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PrefixList\": ")
	if tmp, err := json.Marshal(strct.PrefixList); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Protocols" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Protocols\": ")
	if tmp, err := json.Marshal(strct.Protocols); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RouteTable" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RouteTable\": ")
	if tmp, err := json.Marshal(strct.RouteTable); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RouteTableRoute" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RouteTableRoute\": ")
	if tmp, err := json.Marshal(strct.RouteTableRoute); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecurityGroup" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecurityGroup\": ")
	if tmp, err := json.Marshal(strct.SecurityGroup); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecurityGroupRule" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecurityGroupRule\": ")
	if tmp, err := json.Marshal(strct.SecurityGroupRule); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecurityGroups" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecurityGroups\": ")
	if tmp, err := json.Marshal(strct.SecurityGroups); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SourceVpc" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceVpc\": ")
	if tmp, err := json.Marshal(strct.SourceVpc); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "State" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"State\": ")
	if tmp, err := json.Marshal(strct.State); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Subnet" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Subnet\": ")
	if tmp, err := json.Marshal(strct.Subnet); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SubnetRouteTable" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubnetRouteTable\": ")
	if tmp, err := json.Marshal(strct.SubnetRouteTable); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGateway" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGateway\": ")
	if tmp, err := json.Marshal(strct.TransitGateway); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGatewayAttachment" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayAttachment\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayAttachment); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGatewayRouteTable" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayRouteTable\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayRouteTable); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGatewayRouteTableRoute" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayRouteTableRoute\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayRouteTableRoute); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Vpc" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Vpc\": ")
	if tmp, err := json.Marshal(strct.Vpc); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "vpcEndpoint" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"vpcEndpoint\": ")
	if tmp, err := json.Marshal(strct.VpcEndpoint); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpcPeeringConnection" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcPeeringConnection\": ")
	if tmp, err := json.Marshal(strct.VpcPeeringConnection); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpnConnection" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpnConnection\": ")
	if tmp, err := json.Marshal(strct.VpnConnection); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpnGateway" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpnGateway\": ")
	if tmp, err := json.Marshal(strct.VpnGateway); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Explanation) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Acl":
            if err := json.Unmarshal([]byte(v), &strct.Acl); err != nil {
                return err
             }
        case "AclRule":
            if err := json.Unmarshal([]byte(v), &strct.AclRule); err != nil {
                return err
             }
        case "Address":
            if err := json.Unmarshal([]byte(v), &strct.Address); err != nil {
                return err
             }
        case "Addresses":
            if err := json.Unmarshal([]byte(v), &strct.Addresses); err != nil {
                return err
             }
        case "AttachedTo":
            if err := json.Unmarshal([]byte(v), &strct.AttachedTo); err != nil {
                return err
             }
        case "AvailabilityZones":
            if err := json.Unmarshal([]byte(v), &strct.AvailabilityZones); err != nil {
                return err
             }
        case "Cidrs":
            if err := json.Unmarshal([]byte(v), &strct.Cidrs); err != nil {
                return err
             }
        case "ClassicLoadBalancerListener":
            if err := json.Unmarshal([]byte(v), &strct.ClassicLoadBalancerListener); err != nil {
                return err
             }
        case "Component":
            if err := json.Unmarshal([]byte(v), &strct.Component); err != nil {
                return err
             }
        case "ComponentAccount":
            if err := json.Unmarshal([]byte(v), &strct.ComponentAccount); err != nil {
                return err
             }
        case "ComponentRegion":
            if err := json.Unmarshal([]byte(v), &strct.ComponentRegion); err != nil {
                return err
             }
        case "CustomerGateway":
            if err := json.Unmarshal([]byte(v), &strct.CustomerGateway); err != nil {
                return err
             }
        case "Destination":
            if err := json.Unmarshal([]byte(v), &strct.Destination); err != nil {
                return err
             }
        case "DestinationVpc":
            if err := json.Unmarshal([]byte(v), &strct.DestinationVpc); err != nil {
                return err
             }
        case "Direction":
            if err := json.Unmarshal([]byte(v), &strct.Direction); err != nil {
                return err
             }
        case "ElasticLoadBalancerListener":
            if err := json.Unmarshal([]byte(v), &strct.ElasticLoadBalancerListener); err != nil {
                return err
             }
        case "ExplanationCode":
            if err := json.Unmarshal([]byte(v), &strct.ExplanationCode); err != nil {
                return err
             }
        case "IngressRouteTable":
            if err := json.Unmarshal([]byte(v), &strct.IngressRouteTable); err != nil {
                return err
             }
        case "InternetGateway":
            if err := json.Unmarshal([]byte(v), &strct.InternetGateway); err != nil {
                return err
             }
        case "LoadBalancerArn":
            if err := json.Unmarshal([]byte(v), &strct.LoadBalancerArn); err != nil {
                return err
             }
        case "LoadBalancerListenerPort":
            if err := json.Unmarshal([]byte(v), &strct.LoadBalancerListenerPort); err != nil {
                return err
             }
        case "LoadBalancerTarget":
            if err := json.Unmarshal([]byte(v), &strct.LoadBalancerTarget); err != nil {
                return err
             }
        case "LoadBalancerTargetGroup":
            if err := json.Unmarshal([]byte(v), &strct.LoadBalancerTargetGroup); err != nil {
                return err
             }
        case "LoadBalancerTargetGroups":
            if err := json.Unmarshal([]byte(v), &strct.LoadBalancerTargetGroups); err != nil {
                return err
             }
        case "LoadBalancerTargetPort":
            if err := json.Unmarshal([]byte(v), &strct.LoadBalancerTargetPort); err != nil {
                return err
             }
        case "MissingComponent":
            if err := json.Unmarshal([]byte(v), &strct.MissingComponent); err != nil {
                return err
             }
        case "NatGateway":
            if err := json.Unmarshal([]byte(v), &strct.NatGateway); err != nil {
                return err
             }
        case "NetworkInterface":
            if err := json.Unmarshal([]byte(v), &strct.NetworkInterface); err != nil {
                return err
             }
        case "PacketField":
            if err := json.Unmarshal([]byte(v), &strct.PacketField); err != nil {
                return err
             }
        case "Port":
            if err := json.Unmarshal([]byte(v), &strct.Port); err != nil {
                return err
             }
        case "PortRanges":
            if err := json.Unmarshal([]byte(v), &strct.PortRanges); err != nil {
                return err
             }
        case "PrefixList":
            if err := json.Unmarshal([]byte(v), &strct.PrefixList); err != nil {
                return err
             }
        case "Protocols":
            if err := json.Unmarshal([]byte(v), &strct.Protocols); err != nil {
                return err
             }
        case "RouteTable":
            if err := json.Unmarshal([]byte(v), &strct.RouteTable); err != nil {
                return err
             }
        case "RouteTableRoute":
            if err := json.Unmarshal([]byte(v), &strct.RouteTableRoute); err != nil {
                return err
             }
        case "SecurityGroup":
            if err := json.Unmarshal([]byte(v), &strct.SecurityGroup); err != nil {
                return err
             }
        case "SecurityGroupRule":
            if err := json.Unmarshal([]byte(v), &strct.SecurityGroupRule); err != nil {
                return err
             }
        case "SecurityGroups":
            if err := json.Unmarshal([]byte(v), &strct.SecurityGroups); err != nil {
                return err
             }
        case "SourceVpc":
            if err := json.Unmarshal([]byte(v), &strct.SourceVpc); err != nil {
                return err
             }
        case "State":
            if err := json.Unmarshal([]byte(v), &strct.State); err != nil {
                return err
             }
        case "Subnet":
            if err := json.Unmarshal([]byte(v), &strct.Subnet); err != nil {
                return err
             }
        case "SubnetRouteTable":
            if err := json.Unmarshal([]byte(v), &strct.SubnetRouteTable); err != nil {
                return err
             }
        case "TransitGateway":
            if err := json.Unmarshal([]byte(v), &strct.TransitGateway); err != nil {
                return err
             }
        case "TransitGatewayAttachment":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayAttachment); err != nil {
                return err
             }
        case "TransitGatewayRouteTable":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayRouteTable); err != nil {
                return err
             }
        case "TransitGatewayRouteTableRoute":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayRouteTableRoute); err != nil {
                return err
             }
        case "Vpc":
            if err := json.Unmarshal([]byte(v), &strct.Vpc); err != nil {
                return err
             }
        case "vpcEndpoint":
            if err := json.Unmarshal([]byte(v), &strct.VpcEndpoint); err != nil {
                return err
             }
        case "VpcPeeringConnection":
            if err := json.Unmarshal([]byte(v), &strct.VpcPeeringConnection); err != nil {
                return err
             }
        case "VpnConnection":
            if err := json.Unmarshal([]byte(v), &strct.VpnConnection); err != nil {
                return err
             }
        case "VpnGateway":
            if err := json.Unmarshal([]byte(v), &strct.VpnGateway); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *PathComponent) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AclRule" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AclRule\": ")
	if tmp, err := json.Marshal(strct.AclRule); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AdditionalDetails" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AdditionalDetails\": ")
	if tmp, err := json.Marshal(strct.AdditionalDetails); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Component" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Component\": ")
	if tmp, err := json.Marshal(strct.Component); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DestinationVpc" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DestinationVpc\": ")
	if tmp, err := json.Marshal(strct.DestinationVpc); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ElasticLoadBalancerListener" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ElasticLoadBalancerListener\": ")
	if tmp, err := json.Marshal(strct.ElasticLoadBalancerListener); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Explanations" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Explanations\": ")
	if tmp, err := json.Marshal(strct.Explanations); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InboundHeader" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InboundHeader\": ")
	if tmp, err := json.Marshal(strct.InboundHeader); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OutboundHeader" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OutboundHeader\": ")
	if tmp, err := json.Marshal(strct.OutboundHeader); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RouteTableRoute" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RouteTableRoute\": ")
	if tmp, err := json.Marshal(strct.RouteTableRoute); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecurityGroupRule" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecurityGroupRule\": ")
	if tmp, err := json.Marshal(strct.SecurityGroupRule); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SequenceNumber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SequenceNumber\": ")
	if tmp, err := json.Marshal(strct.SequenceNumber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ServiceName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ServiceName\": ")
	if tmp, err := json.Marshal(strct.ServiceName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SourceVpc" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceVpc\": ")
	if tmp, err := json.Marshal(strct.SourceVpc); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Subnet" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Subnet\": ")
	if tmp, err := json.Marshal(strct.Subnet); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGateway" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGateway\": ")
	if tmp, err := json.Marshal(strct.TransitGateway); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGatewayRouteTableRoute" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayRouteTableRoute\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayRouteTableRoute); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Vpc" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Vpc\": ")
	if tmp, err := json.Marshal(strct.Vpc); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PathComponent) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AclRule":
            if err := json.Unmarshal([]byte(v), &strct.AclRule); err != nil {
                return err
             }
        case "AdditionalDetails":
            if err := json.Unmarshal([]byte(v), &strct.AdditionalDetails); err != nil {
                return err
             }
        case "Component":
            if err := json.Unmarshal([]byte(v), &strct.Component); err != nil {
                return err
             }
        case "DestinationVpc":
            if err := json.Unmarshal([]byte(v), &strct.DestinationVpc); err != nil {
                return err
             }
        case "ElasticLoadBalancerListener":
            if err := json.Unmarshal([]byte(v), &strct.ElasticLoadBalancerListener); err != nil {
                return err
             }
        case "Explanations":
            if err := json.Unmarshal([]byte(v), &strct.Explanations); err != nil {
                return err
             }
        case "InboundHeader":
            if err := json.Unmarshal([]byte(v), &strct.InboundHeader); err != nil {
                return err
             }
        case "OutboundHeader":
            if err := json.Unmarshal([]byte(v), &strct.OutboundHeader); err != nil {
                return err
             }
        case "RouteTableRoute":
            if err := json.Unmarshal([]byte(v), &strct.RouteTableRoute); err != nil {
                return err
             }
        case "SecurityGroupRule":
            if err := json.Unmarshal([]byte(v), &strct.SecurityGroupRule); err != nil {
                return err
             }
        case "SequenceNumber":
            if err := json.Unmarshal([]byte(v), &strct.SequenceNumber); err != nil {
                return err
             }
        case "ServiceName":
            if err := json.Unmarshal([]byte(v), &strct.ServiceName); err != nil {
                return err
             }
        case "SourceVpc":
            if err := json.Unmarshal([]byte(v), &strct.SourceVpc); err != nil {
                return err
             }
        case "Subnet":
            if err := json.Unmarshal([]byte(v), &strct.Subnet); err != nil {
                return err
             }
        case "TransitGateway":
            if err := json.Unmarshal([]byte(v), &strct.TransitGateway); err != nil {
                return err
             }
        case "TransitGatewayRouteTableRoute":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayRouteTableRoute); err != nil {
                return err
             }
        case "Vpc":
            if err := json.Unmarshal([]byte(v), &strct.Vpc); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *PortRange) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "From" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"From\": ")
	if tmp, err := json.Marshal(strct.From); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "To" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"To\": ")
	if tmp, err := json.Marshal(strct.To); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PortRange) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "From":
            if err := json.Unmarshal([]byte(v), &strct.From); err != nil {
                return err
             }
        case "To":
            if err := json.Unmarshal([]byte(v), &strct.To); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AdditionalAccounts" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AdditionalAccounts\": ")
	if tmp, err := json.Marshal(strct.AdditionalAccounts); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AlternatePathHints" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AlternatePathHints\": ")
	if tmp, err := json.Marshal(strct.AlternatePathHints); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Explanations" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Explanations\": ")
	if tmp, err := json.Marshal(strct.Explanations); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FilterInArns" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FilterInArns\": ")
	if tmp, err := json.Marshal(strct.FilterInArns); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ForwardPathComponents" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ForwardPathComponents\": ")
	if tmp, err := json.Marshal(strct.ForwardPathComponents); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NetworkInsightsAnalysisArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetworkInsightsAnalysisArn\": ")
	if tmp, err := json.Marshal(strct.NetworkInsightsAnalysisArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NetworkInsightsAnalysisId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetworkInsightsAnalysisId\": ")
	if tmp, err := json.Marshal(strct.NetworkInsightsAnalysisId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "NetworkInsightsPathId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "NetworkInsightsPathId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetworkInsightsPathId\": ")
	if tmp, err := json.Marshal(strct.NetworkInsightsPathId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NetworkPathFound" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetworkPathFound\": ")
	if tmp, err := json.Marshal(strct.NetworkPathFound); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ReturnPathComponents" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ReturnPathComponents\": ")
	if tmp, err := json.Marshal(strct.ReturnPathComponents); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StartDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StartDate\": ")
	if tmp, err := json.Marshal(strct.StartDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StatusMessage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StatusMessage\": ")
	if tmp, err := json.Marshal(strct.StatusMessage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SuggestedAccounts" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SuggestedAccounts\": ")
	if tmp, err := json.Marshal(strct.SuggestedAccounts); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    NetworkInsightsPathIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AdditionalAccounts":
            if err := json.Unmarshal([]byte(v), &strct.AdditionalAccounts); err != nil {
                return err
             }
        case "AlternatePathHints":
            if err := json.Unmarshal([]byte(v), &strct.AlternatePathHints); err != nil {
                return err
             }
        case "Explanations":
            if err := json.Unmarshal([]byte(v), &strct.Explanations); err != nil {
                return err
             }
        case "FilterInArns":
            if err := json.Unmarshal([]byte(v), &strct.FilterInArns); err != nil {
                return err
             }
        case "ForwardPathComponents":
            if err := json.Unmarshal([]byte(v), &strct.ForwardPathComponents); err != nil {
                return err
             }
        case "NetworkInsightsAnalysisArn":
            if err := json.Unmarshal([]byte(v), &strct.NetworkInsightsAnalysisArn); err != nil {
                return err
             }
        case "NetworkInsightsAnalysisId":
            if err := json.Unmarshal([]byte(v), &strct.NetworkInsightsAnalysisId); err != nil {
                return err
             }
        case "NetworkInsightsPathId":
            if err := json.Unmarshal([]byte(v), &strct.NetworkInsightsPathId); err != nil {
                return err
             }
            NetworkInsightsPathIdReceived = true
        case "NetworkPathFound":
            if err := json.Unmarshal([]byte(v), &strct.NetworkPathFound); err != nil {
                return err
             }
        case "ReturnPathComponents":
            if err := json.Unmarshal([]byte(v), &strct.ReturnPathComponents); err != nil {
                return err
             }
        case "StartDate":
            if err := json.Unmarshal([]byte(v), &strct.StartDate); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "StatusMessage":
            if err := json.Unmarshal([]byte(v), &strct.StatusMessage); err != nil {
                return err
             }
        case "SuggestedAccounts":
            if err := json.Unmarshal([]byte(v), &strct.SuggestedAccounts); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if NetworkInsightsPathId (a required property) was received
    if !NetworkInsightsPathIdReceived {
        return errors.New("\"NetworkInsightsPathId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    return nil
}

func (strct *TransitGatewayRouteTableRoute) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AttachmentId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AttachmentId\": ")
	if tmp, err := json.Marshal(strct.AttachmentId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DestinationCidr" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DestinationCidr\": ")
	if tmp, err := json.Marshal(strct.DestinationCidr); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PrefixListId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PrefixListId\": ")
	if tmp, err := json.Marshal(strct.PrefixListId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ResourceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceId\": ")
	if tmp, err := json.Marshal(strct.ResourceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ResourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RouteOrigin" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RouteOrigin\": ")
	if tmp, err := json.Marshal(strct.RouteOrigin); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "State" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"State\": ")
	if tmp, err := json.Marshal(strct.State); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TransitGatewayRouteTableRoute) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AttachmentId":
            if err := json.Unmarshal([]byte(v), &strct.AttachmentId); err != nil {
                return err
             }
        case "DestinationCidr":
            if err := json.Unmarshal([]byte(v), &strct.DestinationCidr); err != nil {
                return err
             }
        case "PrefixListId":
            if err := json.Unmarshal([]byte(v), &strct.PrefixListId); err != nil {
                return err
             }
        case "ResourceId":
            if err := json.Unmarshal([]byte(v), &strct.ResourceId); err != nil {
                return err
             }
        case "ResourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
        case "RouteOrigin":
            if err := json.Unmarshal([]byte(v), &strct.RouteOrigin); err != nil {
                return err
             }
        case "State":
            if err := json.Unmarshal([]byte(v), &strct.State); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
