// Code generated by schema-generate. DO NOT EDIT.

package subnet

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// PrivateDnsNameOptionsOnLaunch 
type PrivateDnsNameOptionsOnLaunch struct {
  EnableResourceNameDnsAAAARecord bool `json:"EnableResourceNameDnsAAAARecord,omitempty"`
  EnableResourceNameDnsARecord bool `json:"EnableResourceNameDnsARecord,omitempty"`
  HostnameType string `json:"HostnameType,omitempty"`
}

// Resource Resource Type definition for AWS::EC2::Subnet
type Resource struct {
  AssignIpv6AddressOnCreation bool `json:"AssignIpv6AddressOnCreation,omitempty"`
  AvailabilityZone string `json:"AvailabilityZone,omitempty"`
  AvailabilityZoneId string `json:"AvailabilityZoneId,omitempty"`
  CidrBlock string `json:"CidrBlock,omitempty"`
  EnableDns64 bool `json:"EnableDns64,omitempty"`
  Ipv6CidrBlock string `json:"Ipv6CidrBlock,omitempty"`
  Ipv6CidrBlocks []string `json:"Ipv6CidrBlocks,omitempty"`
  Ipv6Native bool `json:"Ipv6Native,omitempty"`
  MapPublicIpOnLaunch bool `json:"MapPublicIpOnLaunch,omitempty"`
  NetworkAclAssociationId string `json:"NetworkAclAssociationId,omitempty"`
  OutpostArn string `json:"OutpostArn,omitempty"`
  PrivateDnsNameOptionsOnLaunch *PrivateDnsNameOptionsOnLaunch `json:"PrivateDnsNameOptionsOnLaunch,omitempty"`
  SubnetId string `json:"SubnetId,omitempty"`
  Tags []*Tag `json:"Tags,omitempty"`
  VpcId string `json:"VpcId"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *PrivateDnsNameOptionsOnLaunch) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "EnableResourceNameDnsAAAARecord" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnableResourceNameDnsAAAARecord\": ")
	if tmp, err := json.Marshal(strct.EnableResourceNameDnsAAAARecord); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EnableResourceNameDnsARecord" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnableResourceNameDnsARecord\": ")
	if tmp, err := json.Marshal(strct.EnableResourceNameDnsARecord); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HostnameType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HostnameType\": ")
	if tmp, err := json.Marshal(strct.HostnameType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PrivateDnsNameOptionsOnLaunch) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "EnableResourceNameDnsAAAARecord":
            if err := json.Unmarshal([]byte(v), &strct.EnableResourceNameDnsAAAARecord); err != nil {
                return err
             }
        case "EnableResourceNameDnsARecord":
            if err := json.Unmarshal([]byte(v), &strct.EnableResourceNameDnsARecord); err != nil {
                return err
             }
        case "HostnameType":
            if err := json.Unmarshal([]byte(v), &strct.HostnameType); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AssignIpv6AddressOnCreation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AssignIpv6AddressOnCreation\": ")
	if tmp, err := json.Marshal(strct.AssignIpv6AddressOnCreation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AvailabilityZone" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AvailabilityZone\": ")
	if tmp, err := json.Marshal(strct.AvailabilityZone); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AvailabilityZoneId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AvailabilityZoneId\": ")
	if tmp, err := json.Marshal(strct.AvailabilityZoneId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CidrBlock" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CidrBlock\": ")
	if tmp, err := json.Marshal(strct.CidrBlock); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EnableDns64" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnableDns64\": ")
	if tmp, err := json.Marshal(strct.EnableDns64); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Ipv6CidrBlock" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Ipv6CidrBlock\": ")
	if tmp, err := json.Marshal(strct.Ipv6CidrBlock); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Ipv6CidrBlocks" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Ipv6CidrBlocks\": ")
	if tmp, err := json.Marshal(strct.Ipv6CidrBlocks); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Ipv6Native" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Ipv6Native\": ")
	if tmp, err := json.Marshal(strct.Ipv6Native); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MapPublicIpOnLaunch" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MapPublicIpOnLaunch\": ")
	if tmp, err := json.Marshal(strct.MapPublicIpOnLaunch); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NetworkAclAssociationId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetworkAclAssociationId\": ")
	if tmp, err := json.Marshal(strct.NetworkAclAssociationId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OutpostArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OutpostArn\": ")
	if tmp, err := json.Marshal(strct.OutpostArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PrivateDnsNameOptionsOnLaunch" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PrivateDnsNameOptionsOnLaunch\": ")
	if tmp, err := json.Marshal(strct.PrivateDnsNameOptionsOnLaunch); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SubnetId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubnetId\": ")
	if tmp, err := json.Marshal(strct.SubnetId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "VpcId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "VpcId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcId\": ")
	if tmp, err := json.Marshal(strct.VpcId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    VpcIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AssignIpv6AddressOnCreation":
            if err := json.Unmarshal([]byte(v), &strct.AssignIpv6AddressOnCreation); err != nil {
                return err
             }
        case "AvailabilityZone":
            if err := json.Unmarshal([]byte(v), &strct.AvailabilityZone); err != nil {
                return err
             }
        case "AvailabilityZoneId":
            if err := json.Unmarshal([]byte(v), &strct.AvailabilityZoneId); err != nil {
                return err
             }
        case "CidrBlock":
            if err := json.Unmarshal([]byte(v), &strct.CidrBlock); err != nil {
                return err
             }
        case "EnableDns64":
            if err := json.Unmarshal([]byte(v), &strct.EnableDns64); err != nil {
                return err
             }
        case "Ipv6CidrBlock":
            if err := json.Unmarshal([]byte(v), &strct.Ipv6CidrBlock); err != nil {
                return err
             }
        case "Ipv6CidrBlocks":
            if err := json.Unmarshal([]byte(v), &strct.Ipv6CidrBlocks); err != nil {
                return err
             }
        case "Ipv6Native":
            if err := json.Unmarshal([]byte(v), &strct.Ipv6Native); err != nil {
                return err
             }
        case "MapPublicIpOnLaunch":
            if err := json.Unmarshal([]byte(v), &strct.MapPublicIpOnLaunch); err != nil {
                return err
             }
        case "NetworkAclAssociationId":
            if err := json.Unmarshal([]byte(v), &strct.NetworkAclAssociationId); err != nil {
                return err
             }
        case "OutpostArn":
            if err := json.Unmarshal([]byte(v), &strct.OutpostArn); err != nil {
                return err
             }
        case "PrivateDnsNameOptionsOnLaunch":
            if err := json.Unmarshal([]byte(v), &strct.PrivateDnsNameOptionsOnLaunch); err != nil {
                return err
             }
        case "SubnetId":
            if err := json.Unmarshal([]byte(v), &strct.SubnetId); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "VpcId":
            if err := json.Unmarshal([]byte(v), &strct.VpcId); err != nil {
                return err
             }
            VpcIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if VpcId (a required property) was received
    if !VpcIdReceived {
        return errors.New("\"VpcId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
