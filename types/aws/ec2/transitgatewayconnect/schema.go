// Code generated by schema-generate. DO NOT EDIT.

package transitgatewayconnect

import (
    "fmt"
    "bytes"
    "errors"
    "encoding/json"
)

// Resource The AWS::EC2::TransitGatewayConnect type
type Resource struct {

  // The creation time.
  CreationTime string `json:"CreationTime,omitempty"`

  // The Connect attachment options.
  Options *TransitGatewayConnectOptions `json:"Options"`

  // The state of the attachment.
  State string `json:"State,omitempty"`

  // The tags for the attachment.
  Tags []*Tag `json:"Tags,omitempty"`

  // The ID of the Connect attachment.
  TransitGatewayAttachmentId string `json:"TransitGatewayAttachmentId,omitempty"`

  // The ID of the transit gateway.
  TransitGatewayId string `json:"TransitGatewayId,omitempty"`

  // The ID of the attachment from which the Connect attachment was created.
  TransportTransitGatewayAttachmentId string `json:"TransportTransitGatewayAttachmentId"`
}

// Tag 
type Tag struct {

  // The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with aws:.
  Key string `json:"Key,omitempty"`

  // The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.
  Value string `json:"Value,omitempty"`
}

// TransitGatewayConnectOptions 
type TransitGatewayConnectOptions struct {

  // The tunnel protocol.
  Protocol string `json:"Protocol,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CreationTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreationTime\": ")
	if tmp, err := json.Marshal(strct.CreationTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Options" field is required
    if strct.Options == nil {
        return nil, errors.New("Options is a required field")
    }
    // Marshal the "Options" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Options\": ")
	if tmp, err := json.Marshal(strct.Options); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "State" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"State\": ")
	if tmp, err := json.Marshal(strct.State); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGatewayAttachmentId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayAttachmentId\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayAttachmentId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayId\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TransportTransitGatewayAttachmentId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TransportTransitGatewayAttachmentId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransportTransitGatewayAttachmentId\": ")
	if tmp, err := json.Marshal(strct.TransportTransitGatewayAttachmentId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    OptionsReceived := false
    TransportTransitGatewayAttachmentIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CreationTime":
            if err := json.Unmarshal([]byte(v), &strct.CreationTime); err != nil {
                return err
             }
        case "Options":
            if err := json.Unmarshal([]byte(v), &strct.Options); err != nil {
                return err
             }
            OptionsReceived = true
        case "State":
            if err := json.Unmarshal([]byte(v), &strct.State); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TransitGatewayAttachmentId":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayAttachmentId); err != nil {
                return err
             }
        case "TransitGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayId); err != nil {
                return err
             }
        case "TransportTransitGatewayAttachmentId":
            if err := json.Unmarshal([]byte(v), &strct.TransportTransitGatewayAttachmentId); err != nil {
                return err
             }
            TransportTransitGatewayAttachmentIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Options (a required property) was received
    if !OptionsReceived {
        return errors.New("\"Options\" is required but was not present")
    }
    // check if TransportTransitGatewayAttachmentId (a required property) was received
    if !TransportTransitGatewayAttachmentIdReceived {
        return errors.New("\"TransportTransitGatewayAttachmentId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *TransitGatewayConnectOptions) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Protocol" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Protocol\": ")
	if tmp, err := json.Marshal(strct.Protocol); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TransitGatewayConnectOptions) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Protocol":
            if err := json.Unmarshal([]byte(v), &strct.Protocol); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
