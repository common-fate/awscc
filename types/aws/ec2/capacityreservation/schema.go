// Code generated by schema-generate. DO NOT EDIT.

package capacityreservation

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// Resource Resource Type definition for AWS::EC2::CapacityReservation
type Resource struct {
  AvailabilityZone string `json:"AvailabilityZone"`
  AvailableInstanceCount int `json:"AvailableInstanceCount,omitempty"`
  EbsOptimized bool `json:"EbsOptimized,omitempty"`
  EndDate string `json:"EndDate,omitempty"`
  EndDateType string `json:"EndDateType,omitempty"`
  EphemeralStorage bool `json:"EphemeralStorage,omitempty"`
  Id string `json:"Id,omitempty"`
  InstanceCount int `json:"InstanceCount"`
  InstanceMatchCriteria string `json:"InstanceMatchCriteria,omitempty"`
  InstancePlatform string `json:"InstancePlatform"`
  InstanceType string `json:"InstanceType"`
  OutPostArn string `json:"OutPostArn,omitempty"`
  PlacementGroupArn string `json:"PlacementGroupArn,omitempty"`
  TagSpecifications []*TagSpecification `json:"TagSpecifications,omitempty"`
  Tenancy string `json:"Tenancy,omitempty"`
  TotalInstanceCount int `json:"TotalInstanceCount,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

// TagSpecification 
type TagSpecification struct {
  ResourceType string `json:"ResourceType,omitempty"`
  Tags []*Tag `json:"Tags,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AvailabilityZone" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AvailabilityZone" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AvailabilityZone\": ")
	if tmp, err := json.Marshal(strct.AvailabilityZone); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AvailableInstanceCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AvailableInstanceCount\": ")
	if tmp, err := json.Marshal(strct.AvailableInstanceCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EbsOptimized" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EbsOptimized\": ")
	if tmp, err := json.Marshal(strct.EbsOptimized); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EndDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EndDate\": ")
	if tmp, err := json.Marshal(strct.EndDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EndDateType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EndDateType\": ")
	if tmp, err := json.Marshal(strct.EndDateType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EphemeralStorage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EphemeralStorage\": ")
	if tmp, err := json.Marshal(strct.EphemeralStorage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "InstanceCount" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "InstanceCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceCount\": ")
	if tmp, err := json.Marshal(strct.InstanceCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InstanceMatchCriteria" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceMatchCriteria\": ")
	if tmp, err := json.Marshal(strct.InstanceMatchCriteria); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "InstancePlatform" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "InstancePlatform" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstancePlatform\": ")
	if tmp, err := json.Marshal(strct.InstancePlatform); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "InstanceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "InstanceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceType\": ")
	if tmp, err := json.Marshal(strct.InstanceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OutPostArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OutPostArn\": ")
	if tmp, err := json.Marshal(strct.OutPostArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PlacementGroupArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PlacementGroupArn\": ")
	if tmp, err := json.Marshal(strct.PlacementGroupArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TagSpecifications" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TagSpecifications\": ")
	if tmp, err := json.Marshal(strct.TagSpecifications); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tenancy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tenancy\": ")
	if tmp, err := json.Marshal(strct.Tenancy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TotalInstanceCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TotalInstanceCount\": ")
	if tmp, err := json.Marshal(strct.TotalInstanceCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AvailabilityZoneReceived := false
    InstanceCountReceived := false
    InstancePlatformReceived := false
    InstanceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AvailabilityZone":
            if err := json.Unmarshal([]byte(v), &strct.AvailabilityZone); err != nil {
                return err
             }
            AvailabilityZoneReceived = true
        case "AvailableInstanceCount":
            if err := json.Unmarshal([]byte(v), &strct.AvailableInstanceCount); err != nil {
                return err
             }
        case "EbsOptimized":
            if err := json.Unmarshal([]byte(v), &strct.EbsOptimized); err != nil {
                return err
             }
        case "EndDate":
            if err := json.Unmarshal([]byte(v), &strct.EndDate); err != nil {
                return err
             }
        case "EndDateType":
            if err := json.Unmarshal([]byte(v), &strct.EndDateType); err != nil {
                return err
             }
        case "EphemeralStorage":
            if err := json.Unmarshal([]byte(v), &strct.EphemeralStorage); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "InstanceCount":
            if err := json.Unmarshal([]byte(v), &strct.InstanceCount); err != nil {
                return err
             }
            InstanceCountReceived = true
        case "InstanceMatchCriteria":
            if err := json.Unmarshal([]byte(v), &strct.InstanceMatchCriteria); err != nil {
                return err
             }
        case "InstancePlatform":
            if err := json.Unmarshal([]byte(v), &strct.InstancePlatform); err != nil {
                return err
             }
            InstancePlatformReceived = true
        case "InstanceType":
            if err := json.Unmarshal([]byte(v), &strct.InstanceType); err != nil {
                return err
             }
            InstanceTypeReceived = true
        case "OutPostArn":
            if err := json.Unmarshal([]byte(v), &strct.OutPostArn); err != nil {
                return err
             }
        case "PlacementGroupArn":
            if err := json.Unmarshal([]byte(v), &strct.PlacementGroupArn); err != nil {
                return err
             }
        case "TagSpecifications":
            if err := json.Unmarshal([]byte(v), &strct.TagSpecifications); err != nil {
                return err
             }
        case "Tenancy":
            if err := json.Unmarshal([]byte(v), &strct.Tenancy); err != nil {
                return err
             }
        case "TotalInstanceCount":
            if err := json.Unmarshal([]byte(v), &strct.TotalInstanceCount); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AvailabilityZone (a required property) was received
    if !AvailabilityZoneReceived {
        return errors.New("\"AvailabilityZone\" is required but was not present")
    }
    // check if InstanceCount (a required property) was received
    if !InstanceCountReceived {
        return errors.New("\"InstanceCount\" is required but was not present")
    }
    // check if InstancePlatform (a required property) was received
    if !InstancePlatformReceived {
        return errors.New("\"InstancePlatform\" is required but was not present")
    }
    // check if InstanceType (a required property) was received
    if !InstanceTypeReceived {
        return errors.New("\"InstanceType\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *TagSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ResourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TagSpecification) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ResourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
