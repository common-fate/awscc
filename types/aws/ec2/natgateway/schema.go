// Code generated by schema-generate. DO NOT EDIT.

package natgateway

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource Type definition for AWS::EC2::NatGateway
type Resource struct {
  AllocationId string `json:"AllocationId,omitempty"`
  ConnectivityType string `json:"ConnectivityType,omitempty"`
  MaxDrainDurationSeconds int `json:"MaxDrainDurationSeconds,omitempty"`
  NatGatewayId string `json:"NatGatewayId,omitempty"`
  PrivateIpAddress string `json:"PrivateIpAddress,omitempty"`
  SecondaryAllocationIds []string `json:"SecondaryAllocationIds,omitempty"`
  SecondaryPrivateIpAddressCount int `json:"SecondaryPrivateIpAddressCount,omitempty"`
  SecondaryPrivateIpAddresses []string `json:"SecondaryPrivateIpAddresses,omitempty"`
  SubnetId string `json:"SubnetId"`
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllocationId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllocationId\": ")
	if tmp, err := json.Marshal(strct.AllocationId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ConnectivityType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConnectivityType\": ")
	if tmp, err := json.Marshal(strct.ConnectivityType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaxDrainDurationSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxDrainDurationSeconds\": ")
	if tmp, err := json.Marshal(strct.MaxDrainDurationSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NatGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NatGatewayId\": ")
	if tmp, err := json.Marshal(strct.NatGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PrivateIpAddress" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PrivateIpAddress\": ")
	if tmp, err := json.Marshal(strct.PrivateIpAddress); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecondaryAllocationIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecondaryAllocationIds\": ")
	if tmp, err := json.Marshal(strct.SecondaryAllocationIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecondaryPrivateIpAddressCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecondaryPrivateIpAddressCount\": ")
	if tmp, err := json.Marshal(strct.SecondaryPrivateIpAddressCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecondaryPrivateIpAddresses" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecondaryPrivateIpAddresses\": ")
	if tmp, err := json.Marshal(strct.SecondaryPrivateIpAddresses); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SubnetId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SubnetId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubnetId\": ")
	if tmp, err := json.Marshal(strct.SubnetId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    SubnetIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllocationId":
            if err := json.Unmarshal([]byte(v), &strct.AllocationId); err != nil {
                return err
             }
        case "ConnectivityType":
            if err := json.Unmarshal([]byte(v), &strct.ConnectivityType); err != nil {
                return err
             }
        case "MaxDrainDurationSeconds":
            if err := json.Unmarshal([]byte(v), &strct.MaxDrainDurationSeconds); err != nil {
                return err
             }
        case "NatGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.NatGatewayId); err != nil {
                return err
             }
        case "PrivateIpAddress":
            if err := json.Unmarshal([]byte(v), &strct.PrivateIpAddress); err != nil {
                return err
             }
        case "SecondaryAllocationIds":
            if err := json.Unmarshal([]byte(v), &strct.SecondaryAllocationIds); err != nil {
                return err
             }
        case "SecondaryPrivateIpAddressCount":
            if err := json.Unmarshal([]byte(v), &strct.SecondaryPrivateIpAddressCount); err != nil {
                return err
             }
        case "SecondaryPrivateIpAddresses":
            if err := json.Unmarshal([]byte(v), &strct.SecondaryPrivateIpAddresses); err != nil {
                return err
             }
        case "SubnetId":
            if err := json.Unmarshal([]byte(v), &strct.SubnetId); err != nil {
                return err
             }
            SubnetIdReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SubnetId (a required property) was received
    if !SubnetIdReceived {
        return errors.New("\"SubnetId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
