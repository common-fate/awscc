// Code generated by schema-generate. DO NOT EDIT.

package eip

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource Type definition for AWS::EC2::EIP
type Resource struct {

  // The Allocation ID of the EIP generated by resource.
  AllocationId string `json:"AllocationId,omitempty"`

  // Indicates whether the Elastic IP address is for use with instances in a VPC or instance in EC2-Classic.
  Domain string `json:"Domain,omitempty"`

  // The ID of the instance.
  InstanceId string `json:"InstanceId,omitempty"`

  // A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.
  NetworkBorderGroup string `json:"NetworkBorderGroup,omitempty"`

  // The PublicIP of the EIP generated by resource.
  PublicIp string `json:"PublicIp,omitempty"`

  // The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.
  PublicIpv4Pool string `json:"PublicIpv4Pool,omitempty"`

  // Any tags assigned to the EIP.
  Tags []*Tag `json:"Tags,omitempty"`

  // The PublicIP of the EIP generated by resource through transfer from another account
  TransferAddress string `json:"TransferAddress,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllocationId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllocationId\": ")
	if tmp, err := json.Marshal(strct.AllocationId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Domain" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Domain\": ")
	if tmp, err := json.Marshal(strct.Domain); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InstanceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceId\": ")
	if tmp, err := json.Marshal(strct.InstanceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NetworkBorderGroup" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetworkBorderGroup\": ")
	if tmp, err := json.Marshal(strct.NetworkBorderGroup); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PublicIp" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PublicIp\": ")
	if tmp, err := json.Marshal(strct.PublicIp); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PublicIpv4Pool" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PublicIpv4Pool\": ")
	if tmp, err := json.Marshal(strct.PublicIpv4Pool); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransferAddress" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransferAddress\": ")
	if tmp, err := json.Marshal(strct.TransferAddress); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllocationId":
            if err := json.Unmarshal([]byte(v), &strct.AllocationId); err != nil {
                return err
             }
        case "Domain":
            if err := json.Unmarshal([]byte(v), &strct.Domain); err != nil {
                return err
             }
        case "InstanceId":
            if err := json.Unmarshal([]byte(v), &strct.InstanceId); err != nil {
                return err
             }
        case "NetworkBorderGroup":
            if err := json.Unmarshal([]byte(v), &strct.NetworkBorderGroup); err != nil {
                return err
             }
        case "PublicIp":
            if err := json.Unmarshal([]byte(v), &strct.PublicIp); err != nil {
                return err
             }
        case "PublicIpv4Pool":
            if err := json.Unmarshal([]byte(v), &strct.PublicIpv4Pool); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TransferAddress":
            if err := json.Unmarshal([]byte(v), &strct.TransferAddress); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
