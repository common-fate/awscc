// Code generated by schema-generate. DO NOT EDIT.

package vpcdhcpoptionsassociation

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Resource Associates a set of DHCP options with a VPC, or associates no DHCP options with the VPC.
type Resource struct {

  // The ID of the DHCP options set, or default to associate no DHCP options with the VPC.
  DhcpOptionsId string `json:"DhcpOptionsId"`

  // The ID of the VPC DHCPOptions Association.
  Id string `json:"Id,omitempty"`

  // The ID of the VPC.
  VpcId string `json:"VpcId"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "DhcpOptionsId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "DhcpOptionsId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DhcpOptionsId\": ")
	if tmp, err := json.Marshal(strct.DhcpOptionsId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "VpcId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "VpcId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcId\": ")
	if tmp, err := json.Marshal(strct.VpcId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    DhcpOptionsIdReceived := false
    VpcIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DhcpOptionsId":
            if err := json.Unmarshal([]byte(v), &strct.DhcpOptionsId); err != nil {
                return err
             }
            DhcpOptionsIdReceived = true
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "VpcId":
            if err := json.Unmarshal([]byte(v), &strct.VpcId); err != nil {
                return err
             }
            VpcIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if DhcpOptionsId (a required property) was received
    if !DhcpOptionsIdReceived {
        return errors.New("\"DhcpOptionsId\" is required but was not present")
    }
    // check if VpcId (a required property) was received
    if !VpcIdReceived {
        return errors.New("\"VpcId\" is required but was not present")
    }
    return nil
}
