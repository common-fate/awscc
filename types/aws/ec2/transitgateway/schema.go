// Code generated by schema-generate. DO NOT EDIT.

package transitgateway

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource Type definition for AWS::EC2::TransitGateway
type Resource struct {
  AmazonSideAsn int `json:"AmazonSideAsn,omitempty"`
  AssociationDefaultRouteTableId string `json:"AssociationDefaultRouteTableId,omitempty"`
  AutoAcceptSharedAttachments string `json:"AutoAcceptSharedAttachments,omitempty"`
  DefaultRouteTableAssociation string `json:"DefaultRouteTableAssociation,omitempty"`
  DefaultRouteTablePropagation string `json:"DefaultRouteTablePropagation,omitempty"`
  Description string `json:"Description,omitempty"`
  DnsSupport string `json:"DnsSupport,omitempty"`
  Id string `json:"Id,omitempty"`
  MulticastSupport string `json:"MulticastSupport,omitempty"`
  PropagationDefaultRouteTableId string `json:"PropagationDefaultRouteTableId,omitempty"`
  Tags []*Tag `json:"Tags,omitempty"`
  TransitGatewayCidrBlocks []string `json:"TransitGatewayCidrBlocks,omitempty"`
  VpnEcmpSupport string `json:"VpnEcmpSupport,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AmazonSideAsn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AmazonSideAsn\": ")
	if tmp, err := json.Marshal(strct.AmazonSideAsn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AssociationDefaultRouteTableId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AssociationDefaultRouteTableId\": ")
	if tmp, err := json.Marshal(strct.AssociationDefaultRouteTableId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AutoAcceptSharedAttachments" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AutoAcceptSharedAttachments\": ")
	if tmp, err := json.Marshal(strct.AutoAcceptSharedAttachments); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DefaultRouteTableAssociation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultRouteTableAssociation\": ")
	if tmp, err := json.Marshal(strct.DefaultRouteTableAssociation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DefaultRouteTablePropagation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultRouteTablePropagation\": ")
	if tmp, err := json.Marshal(strct.DefaultRouteTablePropagation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DnsSupport" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DnsSupport\": ")
	if tmp, err := json.Marshal(strct.DnsSupport); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MulticastSupport" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MulticastSupport\": ")
	if tmp, err := json.Marshal(strct.MulticastSupport); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PropagationDefaultRouteTableId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PropagationDefaultRouteTableId\": ")
	if tmp, err := json.Marshal(strct.PropagationDefaultRouteTableId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGatewayCidrBlocks" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayCidrBlocks\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayCidrBlocks); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpnEcmpSupport" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpnEcmpSupport\": ")
	if tmp, err := json.Marshal(strct.VpnEcmpSupport); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AmazonSideAsn":
            if err := json.Unmarshal([]byte(v), &strct.AmazonSideAsn); err != nil {
                return err
             }
        case "AssociationDefaultRouteTableId":
            if err := json.Unmarshal([]byte(v), &strct.AssociationDefaultRouteTableId); err != nil {
                return err
             }
        case "AutoAcceptSharedAttachments":
            if err := json.Unmarshal([]byte(v), &strct.AutoAcceptSharedAttachments); err != nil {
                return err
             }
        case "DefaultRouteTableAssociation":
            if err := json.Unmarshal([]byte(v), &strct.DefaultRouteTableAssociation); err != nil {
                return err
             }
        case "DefaultRouteTablePropagation":
            if err := json.Unmarshal([]byte(v), &strct.DefaultRouteTablePropagation); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "DnsSupport":
            if err := json.Unmarshal([]byte(v), &strct.DnsSupport); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "MulticastSupport":
            if err := json.Unmarshal([]byte(v), &strct.MulticastSupport); err != nil {
                return err
             }
        case "PropagationDefaultRouteTableId":
            if err := json.Unmarshal([]byte(v), &strct.PropagationDefaultRouteTableId); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TransitGatewayCidrBlocks":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayCidrBlocks); err != nil {
                return err
             }
        case "VpnEcmpSupport":
            if err := json.Unmarshal([]byte(v), &strct.VpnEcmpSupport); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
