// Code generated by schema-generate. DO NOT EDIT.

package customergateway

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// Resource Resource Type definition for AWS::EC2::CustomerGateway
type Resource struct {

  // For devices that support BGP, the customer gateway's BGP ASN.
  BgpAsn int `json:"BgpAsn"`

  // CustomerGateway ID generated after customer gateway is created. Each customer gateway has a unique ID.
  CustomerGatewayId string `json:"CustomerGatewayId,omitempty"`

  // A name for the customer gateway device.
  DeviceName string `json:"DeviceName,omitempty"`

  // The internet-routable IP address for the customer gateway's outside interface. The address must be static.
  IpAddress string `json:"IpAddress"`

  // One or more tags for the customer gateway.
  Tags []*Tag `json:"Tags,omitempty"`

  // The type of VPN connection that this customer gateway supports.
  Type string `json:"Type"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "BgpAsn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "BgpAsn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"BgpAsn\": ")
	if tmp, err := json.Marshal(strct.BgpAsn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CustomerGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CustomerGatewayId\": ")
	if tmp, err := json.Marshal(strct.CustomerGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeviceName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeviceName\": ")
	if tmp, err := json.Marshal(strct.DeviceName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IpAddress" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "IpAddress" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"IpAddress\": ")
	if tmp, err := json.Marshal(strct.IpAddress); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    BgpAsnReceived := false
    IpAddressReceived := false
    TypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "BgpAsn":
            if err := json.Unmarshal([]byte(v), &strct.BgpAsn); err != nil {
                return err
             }
            BgpAsnReceived = true
        case "CustomerGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.CustomerGatewayId); err != nil {
                return err
             }
        case "DeviceName":
            if err := json.Unmarshal([]byte(v), &strct.DeviceName); err != nil {
                return err
             }
        case "IpAddress":
            if err := json.Unmarshal([]byte(v), &strct.IpAddress); err != nil {
                return err
             }
            IpAddressReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "Type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            TypeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if BgpAsn (a required property) was received
    if !BgpAsnReceived {
        return errors.New("\"BgpAsn\" is required but was not present")
    }
    // check if IpAddress (a required property) was received
    if !IpAddressReceived {
        return errors.New("\"IpAddress\" is required but was not present")
    }
    // check if Type (a required property) was received
    if !TypeReceived {
        return errors.New("\"Type\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
