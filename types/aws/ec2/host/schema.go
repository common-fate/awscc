// Code generated by schema-generate. DO NOT EDIT.

package host

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// Resource Resource Type definition for AWS::EC2::Host
type Resource struct {

  // Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID.
  AutoPlacement string `json:"AutoPlacement,omitempty"`

  // The Availability Zone in which to allocate the Dedicated Host.
  AvailabilityZone string `json:"AvailabilityZone"`

  // Id of the host created.
  HostId string `json:"HostId,omitempty"`

  // Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default.
  HostRecovery string `json:"HostRecovery,omitempty"`

  // Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated Hosts support multiple instance types within that instance family.
  InstanceFamily string `json:"InstanceFamily,omitempty"`

  // Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only.
  InstanceType string `json:"InstanceType,omitempty"`

  // The Amazon Resource Name (ARN) of the Amazon Web Services Outpost on which to allocate the Dedicated Host.
  OutpostArn string `json:"OutpostArn,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AutoPlacement" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AutoPlacement\": ")
	if tmp, err := json.Marshal(strct.AutoPlacement); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "AvailabilityZone" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AvailabilityZone" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AvailabilityZone\": ")
	if tmp, err := json.Marshal(strct.AvailabilityZone); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HostId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HostId\": ")
	if tmp, err := json.Marshal(strct.HostId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "HostRecovery" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"HostRecovery\": ")
	if tmp, err := json.Marshal(strct.HostRecovery); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InstanceFamily" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceFamily\": ")
	if tmp, err := json.Marshal(strct.InstanceFamily); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InstanceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceType\": ")
	if tmp, err := json.Marshal(strct.InstanceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OutpostArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OutpostArn\": ")
	if tmp, err := json.Marshal(strct.OutpostArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AvailabilityZoneReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AutoPlacement":
            if err := json.Unmarshal([]byte(v), &strct.AutoPlacement); err != nil {
                return err
             }
        case "AvailabilityZone":
            if err := json.Unmarshal([]byte(v), &strct.AvailabilityZone); err != nil {
                return err
             }
            AvailabilityZoneReceived = true
        case "HostId":
            if err := json.Unmarshal([]byte(v), &strct.HostId); err != nil {
                return err
             }
        case "HostRecovery":
            if err := json.Unmarshal([]byte(v), &strct.HostRecovery); err != nil {
                return err
             }
        case "InstanceFamily":
            if err := json.Unmarshal([]byte(v), &strct.InstanceFamily); err != nil {
                return err
             }
        case "InstanceType":
            if err := json.Unmarshal([]byte(v), &strct.InstanceType); err != nil {
                return err
             }
        case "OutpostArn":
            if err := json.Unmarshal([]byte(v), &strct.OutpostArn); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AvailabilityZone (a required property) was received
    if !AvailabilityZoneReceived {
        return errors.New("\"AvailabilityZone\" is required but was not present")
    }
    return nil
}
