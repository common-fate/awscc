// Code generated by schema-generate. DO NOT EDIT.

package vpc

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Resource Resource Type definition for AWS::EC2::VPC
type Resource struct {

  // The primary IPv4 CIDR block for the VPC.
  CidrBlock string `json:"CidrBlock,omitempty"`

  // A list of IPv4 CIDR block association IDs for the VPC.
  CidrBlockAssociations []string `json:"CidrBlockAssociations,omitempty"`

  // The default network ACL ID that is associated with the VPC.
  DefaultNetworkAcl string `json:"DefaultNetworkAcl,omitempty"`

  // The default security group ID that is associated with the VPC.
  DefaultSecurityGroup string `json:"DefaultSecurityGroup,omitempty"`

  // Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not. Disabled by default for nondefault VPCs.
  EnableDnsHostnames bool `json:"EnableDnsHostnames,omitempty"`

  // Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled. Enabled by default.
  EnableDnsSupport bool `json:"EnableDnsSupport,omitempty"`

  // The allowed tenancy of instances launched into the VPC.
  // 
  // "default": An instance launched into the VPC runs on shared hardware by default, unless you explicitly specify a different tenancy during instance launch.
  // 
  // "dedicated": An instance launched into the VPC is a Dedicated Instance by default, unless you explicitly specify a tenancy of host during instance launch. You cannot specify a tenancy of default during instance launch.
  // 
  // Updating InstanceTenancy requires no replacement only if you are updating its value from "dedicated" to "default". Updating InstanceTenancy from "default" to "dedicated" requires replacement.
  InstanceTenancy string `json:"InstanceTenancy,omitempty"`

  // The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR
  Ipv4IpamPoolId string `json:"Ipv4IpamPoolId,omitempty"`

  // The netmask length of the IPv4 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool
  Ipv4NetmaskLength int `json:"Ipv4NetmaskLength,omitempty"`

  // A list of IPv6 CIDR blocks that are associated with the VPC.
  Ipv6CidrBlocks []string `json:"Ipv6CidrBlocks,omitempty"`

  // The tags for the VPC.
  Tags []*Tag `json:"Tags,omitempty"`

  // The Id for the model.
  VpcId string `json:"VpcId,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CidrBlock" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CidrBlock\": ")
	if tmp, err := json.Marshal(strct.CidrBlock); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CidrBlockAssociations" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CidrBlockAssociations\": ")
	if tmp, err := json.Marshal(strct.CidrBlockAssociations); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DefaultNetworkAcl" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultNetworkAcl\": ")
	if tmp, err := json.Marshal(strct.DefaultNetworkAcl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DefaultSecurityGroup" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultSecurityGroup\": ")
	if tmp, err := json.Marshal(strct.DefaultSecurityGroup); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EnableDnsHostnames" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnableDnsHostnames\": ")
	if tmp, err := json.Marshal(strct.EnableDnsHostnames); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EnableDnsSupport" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EnableDnsSupport\": ")
	if tmp, err := json.Marshal(strct.EnableDnsSupport); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InstanceTenancy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceTenancy\": ")
	if tmp, err := json.Marshal(strct.InstanceTenancy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Ipv4IpamPoolId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Ipv4IpamPoolId\": ")
	if tmp, err := json.Marshal(strct.Ipv4IpamPoolId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Ipv4NetmaskLength" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Ipv4NetmaskLength\": ")
	if tmp, err := json.Marshal(strct.Ipv4NetmaskLength); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Ipv6CidrBlocks" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Ipv6CidrBlocks\": ")
	if tmp, err := json.Marshal(strct.Ipv6CidrBlocks); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpcId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcId\": ")
	if tmp, err := json.Marshal(strct.VpcId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CidrBlock":
            if err := json.Unmarshal([]byte(v), &strct.CidrBlock); err != nil {
                return err
             }
        case "CidrBlockAssociations":
            if err := json.Unmarshal([]byte(v), &strct.CidrBlockAssociations); err != nil {
                return err
             }
        case "DefaultNetworkAcl":
            if err := json.Unmarshal([]byte(v), &strct.DefaultNetworkAcl); err != nil {
                return err
             }
        case "DefaultSecurityGroup":
            if err := json.Unmarshal([]byte(v), &strct.DefaultSecurityGroup); err != nil {
                return err
             }
        case "EnableDnsHostnames":
            if err := json.Unmarshal([]byte(v), &strct.EnableDnsHostnames); err != nil {
                return err
             }
        case "EnableDnsSupport":
            if err := json.Unmarshal([]byte(v), &strct.EnableDnsSupport); err != nil {
                return err
             }
        case "InstanceTenancy":
            if err := json.Unmarshal([]byte(v), &strct.InstanceTenancy); err != nil {
                return err
             }
        case "Ipv4IpamPoolId":
            if err := json.Unmarshal([]byte(v), &strct.Ipv4IpamPoolId); err != nil {
                return err
             }
        case "Ipv4NetmaskLength":
            if err := json.Unmarshal([]byte(v), &strct.Ipv4NetmaskLength); err != nil {
                return err
             }
        case "Ipv6CidrBlocks":
            if err := json.Unmarshal([]byte(v), &strct.Ipv6CidrBlocks); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "VpcId":
            if err := json.Unmarshal([]byte(v), &strct.VpcId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
