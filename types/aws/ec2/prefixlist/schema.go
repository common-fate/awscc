// Code generated by schema-generate. DO NOT EDIT.

package prefixlist

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Entry 
type Entry struct {
  Cidr string `json:"Cidr"`
  Description string `json:"Description,omitempty"`
}

// Resource Resource schema of AWS::EC2::PrefixList Type
type Resource struct {

  // Ip Version of Prefix List.
  AddressFamily string `json:"AddressFamily"`

  // The Amazon Resource Name (ARN) of the Prefix List.
  Arn string `json:"Arn,omitempty"`

  // Entries of Prefix List.
  Entries []*Entry `json:"Entries,omitempty"`

  // Max Entries of Prefix List.
  MaxEntries int `json:"MaxEntries"`

  // Owner Id of Prefix List.
  OwnerId string `json:"OwnerId,omitempty"`

  // Id of Prefix List.
  PrefixListId string `json:"PrefixListId,omitempty"`

  // Name of Prefix List.
  PrefixListName string `json:"PrefixListName"`

  // Tags for Prefix List
  Tags []*Tag `json:"Tags,omitempty"`

  // Version of Prefix List.
  Version int `json:"Version,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value,omitempty"`
}

func (strct *Entry) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Cidr" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Cidr" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Cidr\": ")
	if tmp, err := json.Marshal(strct.Cidr); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Entry) UnmarshalJSON(b []byte) error {
    CidrReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Cidr":
            if err := json.Unmarshal([]byte(v), &strct.Cidr); err != nil {
                return err
             }
            CidrReceived = true
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Cidr (a required property) was received
    if !CidrReceived {
        return errors.New("\"Cidr\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AddressFamily" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AddressFamily" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AddressFamily\": ")
	if tmp, err := json.Marshal(strct.AddressFamily); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Entries" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Entries\": ")
	if tmp, err := json.Marshal(strct.Entries); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MaxEntries" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MaxEntries" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxEntries\": ")
	if tmp, err := json.Marshal(strct.MaxEntries); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OwnerId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OwnerId\": ")
	if tmp, err := json.Marshal(strct.OwnerId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PrefixListId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PrefixListId\": ")
	if tmp, err := json.Marshal(strct.PrefixListId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PrefixListName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "PrefixListName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PrefixListName\": ")
	if tmp, err := json.Marshal(strct.PrefixListName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Version" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Version\": ")
	if tmp, err := json.Marshal(strct.Version); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    AddressFamilyReceived := false
    MaxEntriesReceived := false
    PrefixListNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AddressFamily":
            if err := json.Unmarshal([]byte(v), &strct.AddressFamily); err != nil {
                return err
             }
            AddressFamilyReceived = true
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "Entries":
            if err := json.Unmarshal([]byte(v), &strct.Entries); err != nil {
                return err
             }
        case "MaxEntries":
            if err := json.Unmarshal([]byte(v), &strct.MaxEntries); err != nil {
                return err
             }
            MaxEntriesReceived = true
        case "OwnerId":
            if err := json.Unmarshal([]byte(v), &strct.OwnerId); err != nil {
                return err
             }
        case "PrefixListId":
            if err := json.Unmarshal([]byte(v), &strct.PrefixListId); err != nil {
                return err
             }
        case "PrefixListName":
            if err := json.Unmarshal([]byte(v), &strct.PrefixListName); err != nil {
                return err
             }
            PrefixListNameReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "Version":
            if err := json.Unmarshal([]byte(v), &strct.Version); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AddressFamily (a required property) was received
    if !AddressFamilyReceived {
        return errors.New("\"AddressFamily\" is required but was not present")
    }
    // check if MaxEntries (a required property) was received
    if !MaxEntriesReceived {
        return errors.New("\"MaxEntries\" is required but was not present")
    }
    // check if PrefixListName (a required property) was received
    if !PrefixListNameReceived {
        return errors.New("\"PrefixListName\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    return nil
}
