// Code generated by schema-generate. DO NOT EDIT.

package dhcpoptions

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource Type definition for AWS::EC2::DHCPOptions
type Resource struct {
  DhcpOptionsId string `json:"DhcpOptionsId,omitempty"`

  // This value is used to complete unqualified DNS hostnames.
  DomainName string `json:"DomainName,omitempty"`

  // The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.
  DomainNameServers []string `json:"DomainNameServers,omitempty"`

  // The IPv4 addresses of up to four NetBIOS name servers.
  NetbiosNameServers []string `json:"NetbiosNameServers,omitempty"`

  // The NetBIOS node type (1, 2, 4, or 8).
  NetbiosNodeType int `json:"NetbiosNodeType,omitempty"`

  // The IPv4 addresses of up to four Network Time Protocol (NTP) servers.
  NtpServers []string `json:"NtpServers,omitempty"`

  // Any tags assigned to the DHCP options set.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DhcpOptionsId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DhcpOptionsId\": ")
	if tmp, err := json.Marshal(strct.DhcpOptionsId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DomainName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DomainName\": ")
	if tmp, err := json.Marshal(strct.DomainName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DomainNameServers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DomainNameServers\": ")
	if tmp, err := json.Marshal(strct.DomainNameServers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NetbiosNameServers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetbiosNameServers\": ")
	if tmp, err := json.Marshal(strct.NetbiosNameServers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NetbiosNodeType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetbiosNodeType\": ")
	if tmp, err := json.Marshal(strct.NetbiosNodeType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NtpServers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NtpServers\": ")
	if tmp, err := json.Marshal(strct.NtpServers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DhcpOptionsId":
            if err := json.Unmarshal([]byte(v), &strct.DhcpOptionsId); err != nil {
                return err
             }
        case "DomainName":
            if err := json.Unmarshal([]byte(v), &strct.DomainName); err != nil {
                return err
             }
        case "DomainNameServers":
            if err := json.Unmarshal([]byte(v), &strct.DomainNameServers); err != nil {
                return err
             }
        case "NetbiosNameServers":
            if err := json.Unmarshal([]byte(v), &strct.NetbiosNameServers); err != nil {
                return err
             }
        case "NetbiosNodeType":
            if err := json.Unmarshal([]byte(v), &strct.NetbiosNodeType); err != nil {
                return err
             }
        case "NtpServers":
            if err := json.Unmarshal([]byte(v), &strct.NtpServers); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
