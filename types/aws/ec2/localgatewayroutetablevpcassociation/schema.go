// Code generated by schema-generate. DO NOT EDIT.

package localgatewayroutetablevpcassociation

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// Resource Describes an association between a local gateway route table and a VPC.
type Resource struct {

  // The ID of the local gateway.
  LocalGatewayId string `json:"LocalGatewayId,omitempty"`

  // The ID of the local gateway route table.
  LocalGatewayRouteTableId string `json:"LocalGatewayRouteTableId"`

  // The ID of the association.
  LocalGatewayRouteTableVpcAssociationId string `json:"LocalGatewayRouteTableVpcAssociationId,omitempty"`

  // The state of the association.
  State string `json:"State,omitempty"`

  // The tags for the association.
  Tags []*Tag `json:"Tags,omitempty"`

  // The ID of the VPC.
  VpcId string `json:"VpcId"`
}

// Tag 
type Tag struct {
  Key string `json:"Key,omitempty"`
  Value string `json:"Value,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "LocalGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocalGatewayId\": ")
	if tmp, err := json.Marshal(strct.LocalGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "LocalGatewayRouteTableId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LocalGatewayRouteTableId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocalGatewayRouteTableId\": ")
	if tmp, err := json.Marshal(strct.LocalGatewayRouteTableId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LocalGatewayRouteTableVpcAssociationId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocalGatewayRouteTableVpcAssociationId\": ")
	if tmp, err := json.Marshal(strct.LocalGatewayRouteTableVpcAssociationId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "State" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"State\": ")
	if tmp, err := json.Marshal(strct.State); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "VpcId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "VpcId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcId\": ")
	if tmp, err := json.Marshal(strct.VpcId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    LocalGatewayRouteTableIdReceived := false
    VpcIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "LocalGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.LocalGatewayId); err != nil {
                return err
             }
        case "LocalGatewayRouteTableId":
            if err := json.Unmarshal([]byte(v), &strct.LocalGatewayRouteTableId); err != nil {
                return err
             }
            LocalGatewayRouteTableIdReceived = true
        case "LocalGatewayRouteTableVpcAssociationId":
            if err := json.Unmarshal([]byte(v), &strct.LocalGatewayRouteTableVpcAssociationId); err != nil {
                return err
             }
        case "State":
            if err := json.Unmarshal([]byte(v), &strct.State); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "VpcId":
            if err := json.Unmarshal([]byte(v), &strct.VpcId); err != nil {
                return err
             }
            VpcIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if LocalGatewayRouteTableId (a required property) was received
    if !LocalGatewayRouteTableIdReceived {
        return errors.New("\"LocalGatewayRouteTableId\" is required but was not present")
    }
    // check if VpcId (a required property) was received
    if !VpcIdReceived {
        return errors.New("\"VpcId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
