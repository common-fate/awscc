// Code generated by schema-generate. DO NOT EDIT.

package capacityreservationfleet

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// InstanceTypeSpecification 
type InstanceTypeSpecification struct {
  AvailabilityZone string `json:"AvailabilityZone,omitempty"`
  AvailabilityZoneId string `json:"AvailabilityZoneId,omitempty"`
  EbsOptimized bool `json:"EbsOptimized,omitempty"`
  InstancePlatform string `json:"InstancePlatform,omitempty"`
  InstanceType string `json:"InstanceType,omitempty"`
  Priority int `json:"Priority,omitempty"`
  Weight float64 `json:"Weight,omitempty"`
}

// Resource Resource Type definition for AWS::EC2::CapacityReservationFleet
type Resource struct {
  AllocationStrategy string `json:"AllocationStrategy,omitempty"`
  CapacityReservationFleetId string `json:"CapacityReservationFleetId,omitempty"`
  EndDate string `json:"EndDate,omitempty"`
  InstanceMatchCriteria string `json:"InstanceMatchCriteria,omitempty"`
  InstanceTypeSpecifications []*InstanceTypeSpecification `json:"InstanceTypeSpecifications,omitempty"`
  NoRemoveEndDate bool `json:"NoRemoveEndDate,omitempty"`
  RemoveEndDate bool `json:"RemoveEndDate,omitempty"`
  TagSpecifications []*TagSpecification `json:"TagSpecifications,omitempty"`
  Tenancy string `json:"Tenancy,omitempty"`
  TotalTargetCapacity int `json:"TotalTargetCapacity,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

// TagSpecification 
type TagSpecification struct {
  ResourceType string `json:"ResourceType,omitempty"`
  Tags []*Tag `json:"Tags,omitempty"`
}

func (strct *InstanceTypeSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AvailabilityZone" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AvailabilityZone\": ")
	if tmp, err := json.Marshal(strct.AvailabilityZone); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "AvailabilityZoneId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AvailabilityZoneId\": ")
	if tmp, err := json.Marshal(strct.AvailabilityZoneId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EbsOptimized" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EbsOptimized\": ")
	if tmp, err := json.Marshal(strct.EbsOptimized); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InstancePlatform" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstancePlatform\": ")
	if tmp, err := json.Marshal(strct.InstancePlatform); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InstanceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceType\": ")
	if tmp, err := json.Marshal(strct.InstanceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Priority" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Priority\": ")
	if tmp, err := json.Marshal(strct.Priority); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Weight" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Weight\": ")
	if tmp, err := json.Marshal(strct.Weight); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *InstanceTypeSpecification) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AvailabilityZone":
            if err := json.Unmarshal([]byte(v), &strct.AvailabilityZone); err != nil {
                return err
             }
        case "AvailabilityZoneId":
            if err := json.Unmarshal([]byte(v), &strct.AvailabilityZoneId); err != nil {
                return err
             }
        case "EbsOptimized":
            if err := json.Unmarshal([]byte(v), &strct.EbsOptimized); err != nil {
                return err
             }
        case "InstancePlatform":
            if err := json.Unmarshal([]byte(v), &strct.InstancePlatform); err != nil {
                return err
             }
        case "InstanceType":
            if err := json.Unmarshal([]byte(v), &strct.InstanceType); err != nil {
                return err
             }
        case "Priority":
            if err := json.Unmarshal([]byte(v), &strct.Priority); err != nil {
                return err
             }
        case "Weight":
            if err := json.Unmarshal([]byte(v), &strct.Weight); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AllocationStrategy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AllocationStrategy\": ")
	if tmp, err := json.Marshal(strct.AllocationStrategy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CapacityReservationFleetId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CapacityReservationFleetId\": ")
	if tmp, err := json.Marshal(strct.CapacityReservationFleetId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EndDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EndDate\": ")
	if tmp, err := json.Marshal(strct.EndDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InstanceMatchCriteria" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceMatchCriteria\": ")
	if tmp, err := json.Marshal(strct.InstanceMatchCriteria); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InstanceTypeSpecifications" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceTypeSpecifications\": ")
	if tmp, err := json.Marshal(strct.InstanceTypeSpecifications); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NoRemoveEndDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NoRemoveEndDate\": ")
	if tmp, err := json.Marshal(strct.NoRemoveEndDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RemoveEndDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RemoveEndDate\": ")
	if tmp, err := json.Marshal(strct.RemoveEndDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TagSpecifications" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TagSpecifications\": ")
	if tmp, err := json.Marshal(strct.TagSpecifications); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tenancy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tenancy\": ")
	if tmp, err := json.Marshal(strct.Tenancy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TotalTargetCapacity" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TotalTargetCapacity\": ")
	if tmp, err := json.Marshal(strct.TotalTargetCapacity); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AllocationStrategy":
            if err := json.Unmarshal([]byte(v), &strct.AllocationStrategy); err != nil {
                return err
             }
        case "CapacityReservationFleetId":
            if err := json.Unmarshal([]byte(v), &strct.CapacityReservationFleetId); err != nil {
                return err
             }
        case "EndDate":
            if err := json.Unmarshal([]byte(v), &strct.EndDate); err != nil {
                return err
             }
        case "InstanceMatchCriteria":
            if err := json.Unmarshal([]byte(v), &strct.InstanceMatchCriteria); err != nil {
                return err
             }
        case "InstanceTypeSpecifications":
            if err := json.Unmarshal([]byte(v), &strct.InstanceTypeSpecifications); err != nil {
                return err
             }
        case "NoRemoveEndDate":
            if err := json.Unmarshal([]byte(v), &strct.NoRemoveEndDate); err != nil {
                return err
             }
        case "RemoveEndDate":
            if err := json.Unmarshal([]byte(v), &strct.RemoveEndDate); err != nil {
                return err
             }
        case "TagSpecifications":
            if err := json.Unmarshal([]byte(v), &strct.TagSpecifications); err != nil {
                return err
             }
        case "Tenancy":
            if err := json.Unmarshal([]byte(v), &strct.Tenancy); err != nil {
                return err
             }
        case "TotalTargetCapacity":
            if err := json.Unmarshal([]byte(v), &strct.TotalTargetCapacity); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *TagSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ResourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ResourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TagSpecification) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ResourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
