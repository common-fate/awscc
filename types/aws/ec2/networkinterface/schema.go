// Code generated by schema-generate. DO NOT EDIT.

package networkinterface

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// InstanceIpv6Address 
type InstanceIpv6Address struct {
  Ipv6Address string `json:"Ipv6Address"`
}

// PrivateIpAddressSpecification 
type PrivateIpAddressSpecification struct {
  Primary bool `json:"Primary"`
  PrivateIpAddress string `json:"PrivateIpAddress"`
}

// Resource The AWS::EC2::NetworkInterface resource creates network interface
type Resource struct {

  // A description for the network interface.
  Description string `json:"Description,omitempty"`

  // A list of security group IDs associated with this network interface.
  GroupSet []string `json:"GroupSet,omitempty"`

  // Network interface id.
  Id string `json:"Id,omitempty"`

  // Indicates the type of network interface.
  InterfaceType string `json:"InterfaceType,omitempty"`

  // The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don't specify this property.
  Ipv6AddressCount int `json:"Ipv6AddressCount,omitempty"`

  // One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network interface. If you're specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don't specify this property.
  Ipv6Addresses []*InstanceIpv6Address `json:"Ipv6Addresses,omitempty"`

  // Returns the primary private IP address of the network interface.
  PrimaryPrivateIpAddress string `json:"PrimaryPrivateIpAddress,omitempty"`

  // Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses property. 
  PrivateIpAddress string `json:"PrivateIpAddress,omitempty"`

  // Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2 to automatically assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this property.
  PrivateIpAddresses []*PrivateIpAddressSpecification `json:"PrivateIpAddresses,omitempty"`

  // The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using privateIpAddresses
  SecondaryPrivateIpAddressCount int `json:"SecondaryPrivateIpAddressCount,omitempty"`

  // Returns the secondary private IP addresses of the network interface.
  SecondaryPrivateIpAddresses []string `json:"SecondaryPrivateIpAddresses,omitempty"`

  // Indicates whether traffic to or from the instance is validated.
  SourceDestCheck bool `json:"SourceDestCheck,omitempty"`

  // The ID of the subnet to associate with the network interface.
  SubnetId string `json:"SubnetId"`

  // An arbitrary set of tags (key-value pairs) for this network interface.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *InstanceIpv6Address) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Ipv6Address" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Ipv6Address" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Ipv6Address\": ")
	if tmp, err := json.Marshal(strct.Ipv6Address); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *InstanceIpv6Address) UnmarshalJSON(b []byte) error {
    Ipv6AddressReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Ipv6Address":
            if err := json.Unmarshal([]byte(v), &strct.Ipv6Address); err != nil {
                return err
             }
            Ipv6AddressReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Ipv6Address (a required property) was received
    if !Ipv6AddressReceived {
        return errors.New("\"Ipv6Address\" is required but was not present")
    }
    return nil
}

func (strct *PrivateIpAddressSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Primary" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Primary" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Primary\": ")
	if tmp, err := json.Marshal(strct.Primary); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PrivateIpAddress" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "PrivateIpAddress" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PrivateIpAddress\": ")
	if tmp, err := json.Marshal(strct.PrivateIpAddress); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PrivateIpAddressSpecification) UnmarshalJSON(b []byte) error {
    PrimaryReceived := false
    PrivateIpAddressReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Primary":
            if err := json.Unmarshal([]byte(v), &strct.Primary); err != nil {
                return err
             }
            PrimaryReceived = true
        case "PrivateIpAddress":
            if err := json.Unmarshal([]byte(v), &strct.PrivateIpAddress); err != nil {
                return err
             }
            PrivateIpAddressReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Primary (a required property) was received
    if !PrimaryReceived {
        return errors.New("\"Primary\" is required but was not present")
    }
    // check if PrivateIpAddress (a required property) was received
    if !PrivateIpAddressReceived {
        return errors.New("\"PrivateIpAddress\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "GroupSet" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"GroupSet\": ")
	if tmp, err := json.Marshal(strct.GroupSet); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InterfaceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InterfaceType\": ")
	if tmp, err := json.Marshal(strct.InterfaceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Ipv6AddressCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Ipv6AddressCount\": ")
	if tmp, err := json.Marshal(strct.Ipv6AddressCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Ipv6Addresses" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Ipv6Addresses\": ")
	if tmp, err := json.Marshal(strct.Ipv6Addresses); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PrimaryPrivateIpAddress" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PrimaryPrivateIpAddress\": ")
	if tmp, err := json.Marshal(strct.PrimaryPrivateIpAddress); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PrivateIpAddress" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PrivateIpAddress\": ")
	if tmp, err := json.Marshal(strct.PrivateIpAddress); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PrivateIpAddresses" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PrivateIpAddresses\": ")
	if tmp, err := json.Marshal(strct.PrivateIpAddresses); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecondaryPrivateIpAddressCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecondaryPrivateIpAddressCount\": ")
	if tmp, err := json.Marshal(strct.SecondaryPrivateIpAddressCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SecondaryPrivateIpAddresses" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SecondaryPrivateIpAddresses\": ")
	if tmp, err := json.Marshal(strct.SecondaryPrivateIpAddresses); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SourceDestCheck" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SourceDestCheck\": ")
	if tmp, err := json.Marshal(strct.SourceDestCheck); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SubnetId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SubnetId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubnetId\": ")
	if tmp, err := json.Marshal(strct.SubnetId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    SubnetIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "GroupSet":
            if err := json.Unmarshal([]byte(v), &strct.GroupSet); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "InterfaceType":
            if err := json.Unmarshal([]byte(v), &strct.InterfaceType); err != nil {
                return err
             }
        case "Ipv6AddressCount":
            if err := json.Unmarshal([]byte(v), &strct.Ipv6AddressCount); err != nil {
                return err
             }
        case "Ipv6Addresses":
            if err := json.Unmarshal([]byte(v), &strct.Ipv6Addresses); err != nil {
                return err
             }
        case "PrimaryPrivateIpAddress":
            if err := json.Unmarshal([]byte(v), &strct.PrimaryPrivateIpAddress); err != nil {
                return err
             }
        case "PrivateIpAddress":
            if err := json.Unmarshal([]byte(v), &strct.PrivateIpAddress); err != nil {
                return err
             }
        case "PrivateIpAddresses":
            if err := json.Unmarshal([]byte(v), &strct.PrivateIpAddresses); err != nil {
                return err
             }
        case "SecondaryPrivateIpAddressCount":
            if err := json.Unmarshal([]byte(v), &strct.SecondaryPrivateIpAddressCount); err != nil {
                return err
             }
        case "SecondaryPrivateIpAddresses":
            if err := json.Unmarshal([]byte(v), &strct.SecondaryPrivateIpAddresses); err != nil {
                return err
             }
        case "SourceDestCheck":
            if err := json.Unmarshal([]byte(v), &strct.SourceDestCheck); err != nil {
                return err
             }
        case "SubnetId":
            if err := json.Unmarshal([]byte(v), &strct.SubnetId); err != nil {
                return err
             }
            SubnetIdReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SubnetId (a required property) was received
    if !SubnetIdReceived {
        return errors.New("\"SubnetId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
