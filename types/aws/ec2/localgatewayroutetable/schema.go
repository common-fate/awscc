// Code generated by schema-generate. DO NOT EDIT.

package localgatewayroutetable

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Describes a route table for a local gateway.
type Resource struct {

  // The ID of the local gateway.
  LocalGatewayId string `json:"LocalGatewayId"`

  // The ARN of the local gateway route table.
  LocalGatewayRouteTableArn string `json:"LocalGatewayRouteTableArn,omitempty"`

  // The ID of the local gateway route table.
  LocalGatewayRouteTableId string `json:"LocalGatewayRouteTableId,omitempty"`

  // The mode of the local gateway route table.
  Mode string `json:"Mode,omitempty"`

  // The ARN of the outpost.
  OutpostArn string `json:"OutpostArn,omitempty"`

  // The owner of the local gateway route table.
  OwnerId string `json:"OwnerId,omitempty"`

  // The state of the local gateway route table.
  State string `json:"State,omitempty"`

  // The tags for the local gateway route table.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key,omitempty"`
  Value string `json:"Value,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "LocalGatewayId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "LocalGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocalGatewayId\": ")
	if tmp, err := json.Marshal(strct.LocalGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LocalGatewayRouteTableArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocalGatewayRouteTableArn\": ")
	if tmp, err := json.Marshal(strct.LocalGatewayRouteTableArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LocalGatewayRouteTableId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocalGatewayRouteTableId\": ")
	if tmp, err := json.Marshal(strct.LocalGatewayRouteTableId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Mode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Mode\": ")
	if tmp, err := json.Marshal(strct.Mode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OutpostArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OutpostArn\": ")
	if tmp, err := json.Marshal(strct.OutpostArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "OwnerId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OwnerId\": ")
	if tmp, err := json.Marshal(strct.OwnerId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "State" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"State\": ")
	if tmp, err := json.Marshal(strct.State); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    LocalGatewayIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "LocalGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.LocalGatewayId); err != nil {
                return err
             }
            LocalGatewayIdReceived = true
        case "LocalGatewayRouteTableArn":
            if err := json.Unmarshal([]byte(v), &strct.LocalGatewayRouteTableArn); err != nil {
                return err
             }
        case "LocalGatewayRouteTableId":
            if err := json.Unmarshal([]byte(v), &strct.LocalGatewayRouteTableId); err != nil {
                return err
             }
        case "Mode":
            if err := json.Unmarshal([]byte(v), &strct.Mode); err != nil {
                return err
             }
        case "OutpostArn":
            if err := json.Unmarshal([]byte(v), &strct.OutpostArn); err != nil {
                return err
             }
        case "OwnerId":
            if err := json.Unmarshal([]byte(v), &strct.OwnerId); err != nil {
                return err
             }
        case "State":
            if err := json.Unmarshal([]byte(v), &strct.State); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if LocalGatewayId (a required property) was received
    if !LocalGatewayIdReceived {
        return errors.New("\"LocalGatewayId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
