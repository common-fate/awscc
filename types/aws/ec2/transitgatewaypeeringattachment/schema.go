// Code generated by schema-generate. DO NOT EDIT.

package transitgatewaypeeringattachment

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// PeeringAttachmentStatus 
type PeeringAttachmentStatus struct {

  // The status code.
  Code string `json:"Code,omitempty"`

  // The status message, if applicable.
  Message string `json:"Message,omitempty"`
}

// Resource The AWS::EC2::TransitGatewayPeeringAttachment type
type Resource struct {

  // The time the transit gateway peering attachment was created.
  CreationTime string `json:"CreationTime,omitempty"`

  // The ID of the peer account
  PeerAccountId string `json:"PeerAccountId"`

  // Peer Region
  PeerRegion string `json:"PeerRegion"`

  // The ID of the peer transit gateway.
  PeerTransitGatewayId string `json:"PeerTransitGatewayId"`

  // The state of the transit gateway peering attachment. Note that the initiating state has been deprecated.
  State string `json:"State,omitempty"`

  // The status of the transit gateway peering attachment.
  Status *PeeringAttachmentStatus `json:"Status,omitempty"`

  // The tags for the transit gateway peering attachment.
  Tags []*Tag `json:"Tags,omitempty"`

  // The ID of the transit gateway peering attachment.
  TransitGatewayAttachmentId string `json:"TransitGatewayAttachmentId,omitempty"`

  // The ID of the transit gateway.
  TransitGatewayId string `json:"TransitGatewayId"`
}

// Tag 
type Tag struct {

  // The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with aws:.
  Key string `json:"Key,omitempty"`

  // The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.
  Value string `json:"Value,omitempty"`
}

func (strct *PeeringAttachmentStatus) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Code" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Code\": ")
	if tmp, err := json.Marshal(strct.Code); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Message" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Message\": ")
	if tmp, err := json.Marshal(strct.Message); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PeeringAttachmentStatus) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Code":
            if err := json.Unmarshal([]byte(v), &strct.Code); err != nil {
                return err
             }
        case "Message":
            if err := json.Unmarshal([]byte(v), &strct.Message); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CreationTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreationTime\": ")
	if tmp, err := json.Marshal(strct.CreationTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PeerAccountId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "PeerAccountId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PeerAccountId\": ")
	if tmp, err := json.Marshal(strct.PeerAccountId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PeerRegion" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "PeerRegion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PeerRegion\": ")
	if tmp, err := json.Marshal(strct.PeerRegion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "PeerTransitGatewayId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "PeerTransitGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PeerTransitGatewayId\": ")
	if tmp, err := json.Marshal(strct.PeerTransitGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "State" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"State\": ")
	if tmp, err := json.Marshal(strct.State); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGatewayAttachmentId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayAttachmentId\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayAttachmentId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TransitGatewayId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TransitGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayId\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    PeerAccountIdReceived := false
    PeerRegionReceived := false
    PeerTransitGatewayIdReceived := false
    TransitGatewayIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CreationTime":
            if err := json.Unmarshal([]byte(v), &strct.CreationTime); err != nil {
                return err
             }
        case "PeerAccountId":
            if err := json.Unmarshal([]byte(v), &strct.PeerAccountId); err != nil {
                return err
             }
            PeerAccountIdReceived = true
        case "PeerRegion":
            if err := json.Unmarshal([]byte(v), &strct.PeerRegion); err != nil {
                return err
             }
            PeerRegionReceived = true
        case "PeerTransitGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.PeerTransitGatewayId); err != nil {
                return err
             }
            PeerTransitGatewayIdReceived = true
        case "State":
            if err := json.Unmarshal([]byte(v), &strct.State); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TransitGatewayAttachmentId":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayAttachmentId); err != nil {
                return err
             }
        case "TransitGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayId); err != nil {
                return err
             }
            TransitGatewayIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if PeerAccountId (a required property) was received
    if !PeerAccountIdReceived {
        return errors.New("\"PeerAccountId\" is required but was not present")
    }
    // check if PeerRegion (a required property) was received
    if !PeerRegionReceived {
        return errors.New("\"PeerRegion\" is required but was not present")
    }
    // check if PeerTransitGatewayId (a required property) was received
    if !PeerTransitGatewayIdReceived {
        return errors.New("\"PeerTransitGatewayId\" is required but was not present")
    }
    // check if TransitGatewayId (a required property) was received
    if !TransitGatewayIdReceived {
        return errors.New("\"TransitGatewayId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
