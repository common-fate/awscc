// Code generated by schema-generate. DO NOT EDIT.

package transitgatewayvpcattachment

import (
    "errors"
    "bytes"
    "encoding/json"
    "fmt"
)

// Options The options for the transit gateway vpc attachment.
type Options struct {

  // Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable
  ApplianceModeSupport string `json:"ApplianceModeSupport,omitempty"`

  // Indicates whether to enable DNS Support for Vpc Attachment. Valid Values: enable | disable
  DnsSupport string `json:"DnsSupport,omitempty"`

  // Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable
  Ipv6Support string `json:"Ipv6Support,omitempty"`
}

// Resource Resource Type definition for AWS::EC2::TransitGatewayVpcAttachment
type Resource struct {
  AddSubnetIds []string `json:"AddSubnetIds,omitempty"`
  Id string `json:"Id,omitempty"`

  // The options for the transit gateway vpc attachment.
  Options *Options `json:"Options,omitempty"`
  RemoveSubnetIds []string `json:"RemoveSubnetIds,omitempty"`
  SubnetIds []string `json:"SubnetIds"`
  Tags []*Tag `json:"Tags,omitempty"`
  TransitGatewayId string `json:"TransitGatewayId"`
  VpcId string `json:"VpcId"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *Options) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "ApplianceModeSupport" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ApplianceModeSupport\": ")
	if tmp, err := json.Marshal(strct.ApplianceModeSupport); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DnsSupport" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DnsSupport\": ")
	if tmp, err := json.Marshal(strct.DnsSupport); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Ipv6Support" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Ipv6Support\": ")
	if tmp, err := json.Marshal(strct.Ipv6Support); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Options) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "ApplianceModeSupport":
            if err := json.Unmarshal([]byte(v), &strct.ApplianceModeSupport); err != nil {
                return err
             }
        case "DnsSupport":
            if err := json.Unmarshal([]byte(v), &strct.DnsSupport); err != nil {
                return err
             }
        case "Ipv6Support":
            if err := json.Unmarshal([]byte(v), &strct.Ipv6Support); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AddSubnetIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AddSubnetIds\": ")
	if tmp, err := json.Marshal(strct.AddSubnetIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Options" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Options\": ")
	if tmp, err := json.Marshal(strct.Options); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RemoveSubnetIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RemoveSubnetIds\": ")
	if tmp, err := json.Marshal(strct.RemoveSubnetIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SubnetIds" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SubnetIds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubnetIds\": ")
	if tmp, err := json.Marshal(strct.SubnetIds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TransitGatewayId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TransitGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayId\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "VpcId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "VpcId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpcId\": ")
	if tmp, err := json.Marshal(strct.VpcId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    SubnetIdsReceived := false
    TransitGatewayIdReceived := false
    VpcIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AddSubnetIds":
            if err := json.Unmarshal([]byte(v), &strct.AddSubnetIds); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "Options":
            if err := json.Unmarshal([]byte(v), &strct.Options); err != nil {
                return err
             }
        case "RemoveSubnetIds":
            if err := json.Unmarshal([]byte(v), &strct.RemoveSubnetIds); err != nil {
                return err
             }
        case "SubnetIds":
            if err := json.Unmarshal([]byte(v), &strct.SubnetIds); err != nil {
                return err
             }
            SubnetIdsReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TransitGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayId); err != nil {
                return err
             }
            TransitGatewayIdReceived = true
        case "VpcId":
            if err := json.Unmarshal([]byte(v), &strct.VpcId); err != nil {
                return err
             }
            VpcIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SubnetIds (a required property) was received
    if !SubnetIdsReceived {
        return errors.New("\"SubnetIds\" is required but was not present")
    }
    // check if TransitGatewayId (a required property) was received
    if !TransitGatewayIdReceived {
        return errors.New("\"TransitGatewayId\" is required but was not present")
    }
    // check if VpcId (a required property) was received
    if !VpcIdReceived {
        return errors.New("\"VpcId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
