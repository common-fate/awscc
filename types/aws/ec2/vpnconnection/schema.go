// Code generated by schema-generate. DO NOT EDIT.

package vpnconnection

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource Type definition for AWS::EC2::VPNConnection
type Resource struct {

  // The ID of the customer gateway at your end of the VPN connection.
  CustomerGatewayId string `json:"CustomerGatewayId"`

  // Indicates whether the VPN connection uses static routes only.
  StaticRoutesOnly bool `json:"StaticRoutesOnly,omitempty"`

  // Any tags assigned to the VPN connection.
  Tags []*Tag `json:"Tags,omitempty"`

  // The ID of the transit gateway associated with the VPN connection.
  TransitGatewayId string `json:"TransitGatewayId,omitempty"`

  // The type of VPN connection.
  Type string `json:"Type"`

  // The provider-assigned unique ID for this managed resource
  VpnConnectionId string `json:"VpnConnectionId,omitempty"`

  // The ID of the virtual private gateway at the AWS side of the VPN connection.
  VpnGatewayId string `json:"VpnGatewayId,omitempty"`

  // The tunnel options for the VPN connection.
  VpnTunnelOptionsSpecifications []*VpnTunnelOptionsSpecification `json:"VpnTunnelOptionsSpecifications,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

// VpnTunnelOptionsSpecification 
type VpnTunnelOptionsSpecification struct {
  PreSharedKey string `json:"PreSharedKey,omitempty"`
  TunnelInsideCidr string `json:"TunnelInsideCidr,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "CustomerGatewayId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CustomerGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CustomerGatewayId\": ")
	if tmp, err := json.Marshal(strct.CustomerGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StaticRoutesOnly" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StaticRoutesOnly\": ")
	if tmp, err := json.Marshal(strct.StaticRoutesOnly); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TransitGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TransitGatewayId\": ")
	if tmp, err := json.Marshal(strct.TransitGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpnConnectionId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpnConnectionId\": ")
	if tmp, err := json.Marshal(strct.VpnConnectionId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpnGatewayId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpnGatewayId\": ")
	if tmp, err := json.Marshal(strct.VpnGatewayId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "VpnTunnelOptionsSpecifications" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"VpnTunnelOptionsSpecifications\": ")
	if tmp, err := json.Marshal(strct.VpnTunnelOptionsSpecifications); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    CustomerGatewayIdReceived := false
    TypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CustomerGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.CustomerGatewayId); err != nil {
                return err
             }
            CustomerGatewayIdReceived = true
        case "StaticRoutesOnly":
            if err := json.Unmarshal([]byte(v), &strct.StaticRoutesOnly); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TransitGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.TransitGatewayId); err != nil {
                return err
             }
        case "Type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            TypeReceived = true
        case "VpnConnectionId":
            if err := json.Unmarshal([]byte(v), &strct.VpnConnectionId); err != nil {
                return err
             }
        case "VpnGatewayId":
            if err := json.Unmarshal([]byte(v), &strct.VpnGatewayId); err != nil {
                return err
             }
        case "VpnTunnelOptionsSpecifications":
            if err := json.Unmarshal([]byte(v), &strct.VpnTunnelOptionsSpecifications); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CustomerGatewayId (a required property) was received
    if !CustomerGatewayIdReceived {
        return errors.New("\"CustomerGatewayId\" is required but was not present")
    }
    // check if Type (a required property) was received
    if !TypeReceived {
        return errors.New("\"Type\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *VpnTunnelOptionsSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "PreSharedKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PreSharedKey\": ")
	if tmp, err := json.Marshal(strct.PreSharedKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "TunnelInsideCidr" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TunnelInsideCidr\": ")
	if tmp, err := json.Marshal(strct.TunnelInsideCidr); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *VpnTunnelOptionsSpecification) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "PreSharedKey":
            if err := json.Unmarshal([]byte(v), &strct.PreSharedKey); err != nil {
                return err
             }
        case "TunnelInsideCidr":
            if err := json.Unmarshal([]byte(v), &strct.TunnelInsideCidr); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
