// Code generated by schema-generate. DO NOT EDIT.

package networkinsightsaccessscopeanalysis

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Resource Resource schema for AWS::EC2::NetworkInsightsAccessScopeAnalysis
type Resource struct {
  AnalyzedEniCount int `json:"AnalyzedEniCount,omitempty"`
  EndDate string `json:"EndDate,omitempty"`
  FindingsFound string `json:"FindingsFound,omitempty"`
  NetworkInsightsAccessScopeAnalysisArn string `json:"NetworkInsightsAccessScopeAnalysisArn,omitempty"`
  NetworkInsightsAccessScopeAnalysisId string `json:"NetworkInsightsAccessScopeAnalysisId,omitempty"`
  NetworkInsightsAccessScopeId string `json:"NetworkInsightsAccessScopeId"`
  StartDate string `json:"StartDate,omitempty"`
  Status string `json:"Status,omitempty"`
  StatusMessage string `json:"StatusMessage,omitempty"`
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AnalyzedEniCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AnalyzedEniCount\": ")
	if tmp, err := json.Marshal(strct.AnalyzedEniCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EndDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EndDate\": ")
	if tmp, err := json.Marshal(strct.EndDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "FindingsFound" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"FindingsFound\": ")
	if tmp, err := json.Marshal(strct.FindingsFound); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NetworkInsightsAccessScopeAnalysisArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetworkInsightsAccessScopeAnalysisArn\": ")
	if tmp, err := json.Marshal(strct.NetworkInsightsAccessScopeAnalysisArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NetworkInsightsAccessScopeAnalysisId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetworkInsightsAccessScopeAnalysisId\": ")
	if tmp, err := json.Marshal(strct.NetworkInsightsAccessScopeAnalysisId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "NetworkInsightsAccessScopeId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "NetworkInsightsAccessScopeId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetworkInsightsAccessScopeId\": ")
	if tmp, err := json.Marshal(strct.NetworkInsightsAccessScopeId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StartDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StartDate\": ")
	if tmp, err := json.Marshal(strct.StartDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "StatusMessage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"StatusMessage\": ")
	if tmp, err := json.Marshal(strct.StatusMessage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    NetworkInsightsAccessScopeIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AnalyzedEniCount":
            if err := json.Unmarshal([]byte(v), &strct.AnalyzedEniCount); err != nil {
                return err
             }
        case "EndDate":
            if err := json.Unmarshal([]byte(v), &strct.EndDate); err != nil {
                return err
             }
        case "FindingsFound":
            if err := json.Unmarshal([]byte(v), &strct.FindingsFound); err != nil {
                return err
             }
        case "NetworkInsightsAccessScopeAnalysisArn":
            if err := json.Unmarshal([]byte(v), &strct.NetworkInsightsAccessScopeAnalysisArn); err != nil {
                return err
             }
        case "NetworkInsightsAccessScopeAnalysisId":
            if err := json.Unmarshal([]byte(v), &strct.NetworkInsightsAccessScopeAnalysisId); err != nil {
                return err
             }
        case "NetworkInsightsAccessScopeId":
            if err := json.Unmarshal([]byte(v), &strct.NetworkInsightsAccessScopeId); err != nil {
                return err
             }
            NetworkInsightsAccessScopeIdReceived = true
        case "StartDate":
            if err := json.Unmarshal([]byte(v), &strct.StartDate); err != nil {
                return err
             }
        case "Status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "StatusMessage":
            if err := json.Unmarshal([]byte(v), &strct.StatusMessage); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if NetworkInsightsAccessScopeId (a required property) was received
    if !NetworkInsightsAccessScopeIdReceived {
        return errors.New("\"NetworkInsightsAccessScopeId\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    return nil
}
