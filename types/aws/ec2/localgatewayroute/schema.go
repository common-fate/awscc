// Code generated by schema-generate. DO NOT EDIT.

package localgatewayroute

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// Resource Describes a route for a local gateway route table.
type Resource struct {

  // The CIDR block used for destination matches.
  DestinationCidrBlock string `json:"DestinationCidrBlock,omitempty"`

  // The ID of the local gateway route table.
  LocalGatewayRouteTableId string `json:"LocalGatewayRouteTableId,omitempty"`

  // The ID of the virtual interface group.
  LocalGatewayVirtualInterfaceGroupId string `json:"LocalGatewayVirtualInterfaceGroupId,omitempty"`

  // The ID of the network interface.
  NetworkInterfaceId string `json:"NetworkInterfaceId,omitempty"`

  // The state of the route.
  State string `json:"State,omitempty"`

  // The route type.
  Type string `json:"Type,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "DestinationCidrBlock" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DestinationCidrBlock\": ")
	if tmp, err := json.Marshal(strct.DestinationCidrBlock); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LocalGatewayRouteTableId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocalGatewayRouteTableId\": ")
	if tmp, err := json.Marshal(strct.LocalGatewayRouteTableId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "LocalGatewayVirtualInterfaceGroupId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"LocalGatewayVirtualInterfaceGroupId\": ")
	if tmp, err := json.Marshal(strct.LocalGatewayVirtualInterfaceGroupId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "NetworkInterfaceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"NetworkInterfaceId\": ")
	if tmp, err := json.Marshal(strct.NetworkInterfaceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "State" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"State\": ")
	if tmp, err := json.Marshal(strct.State); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "DestinationCidrBlock":
            if err := json.Unmarshal([]byte(v), &strct.DestinationCidrBlock); err != nil {
                return err
             }
        case "LocalGatewayRouteTableId":
            if err := json.Unmarshal([]byte(v), &strct.LocalGatewayRouteTableId); err != nil {
                return err
             }
        case "LocalGatewayVirtualInterfaceGroupId":
            if err := json.Unmarshal([]byte(v), &strct.LocalGatewayVirtualInterfaceGroupId); err != nil {
                return err
             }
        case "NetworkInterfaceId":
            if err := json.Unmarshal([]byte(v), &strct.NetworkInterfaceId); err != nil {
                return err
             }
        case "State":
            if err := json.Unmarshal([]byte(v), &strct.State); err != nil {
                return err
             }
        case "Type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
