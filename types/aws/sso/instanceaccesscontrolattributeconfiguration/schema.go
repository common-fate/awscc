// Code generated by schema-generate. DO NOT EDIT.

package instanceaccesscontrolattributeconfiguration

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// AccessControlAttribute 
type AccessControlAttribute struct {
  Key string `json:"Key"`
  Value *AccessControlAttributeValue `json:"Value"`
}

// AccessControlAttributeValue 
type AccessControlAttributeValue struct {
  Source []string `json:"Source"`
}

// InstanceAccessControlAttributeConfiguration The InstanceAccessControlAttributeConfiguration property has been deprecated but is still supported for backwards compatibility purposes. We recomend that you use  AccessControlAttributes property instead.
type InstanceAccessControlAttributeConfiguration struct {
  AccessControlAttributes []*AccessControlAttribute `json:"AccessControlAttributes"`
}

// Resource Resource Type definition for SSO InstanceAccessControlAttributeConfiguration
type Resource struct {
  AccessControlAttributes []*AccessControlAttribute `json:"AccessControlAttributes,omitempty"`

  // The InstanceAccessControlAttributeConfiguration property has been deprecated but is still supported for backwards compatibility purposes. We recomend that you use  AccessControlAttributes property instead.
  InstanceAccessControlAttributeConfiguration *InstanceAccessControlAttributeConfiguration `json:"InstanceAccessControlAttributeConfiguration,omitempty"`

  // The ARN of the AWS SSO instance under which the operation will be executed.
  InstanceArn string `json:"InstanceArn"`
}

func (strct *AccessControlAttribute) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    if strct.Value == nil {
        return nil, errors.New("Value is a required field")
    }
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AccessControlAttribute) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *AccessControlAttributeValue) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Source" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Source" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Source\": ")
	if tmp, err := json.Marshal(strct.Source); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AccessControlAttributeValue) UnmarshalJSON(b []byte) error {
    SourceReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Source":
            if err := json.Unmarshal([]byte(v), &strct.Source); err != nil {
                return err
             }
            SourceReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Source (a required property) was received
    if !SourceReceived {
        return errors.New("\"Source\" is required but was not present")
    }
    return nil
}

func (strct *InstanceAccessControlAttributeConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "AccessControlAttributes" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "AccessControlAttributes" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AccessControlAttributes\": ")
	if tmp, err := json.Marshal(strct.AccessControlAttributes); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *InstanceAccessControlAttributeConfiguration) UnmarshalJSON(b []byte) error {
    AccessControlAttributesReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AccessControlAttributes":
            if err := json.Unmarshal([]byte(v), &strct.AccessControlAttributes); err != nil {
                return err
             }
            AccessControlAttributesReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if AccessControlAttributes (a required property) was received
    if !AccessControlAttributesReceived {
        return errors.New("\"AccessControlAttributes\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "AccessControlAttributes" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"AccessControlAttributes\": ")
	if tmp, err := json.Marshal(strct.AccessControlAttributes); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InstanceAccessControlAttributeConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceAccessControlAttributeConfiguration\": ")
	if tmp, err := json.Marshal(strct.InstanceAccessControlAttributeConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "InstanceArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "InstanceArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceArn\": ")
	if tmp, err := json.Marshal(strct.InstanceArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    InstanceArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "AccessControlAttributes":
            if err := json.Unmarshal([]byte(v), &strct.AccessControlAttributes); err != nil {
                return err
             }
        case "InstanceAccessControlAttributeConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.InstanceAccessControlAttributeConfiguration); err != nil {
                return err
             }
        case "InstanceArn":
            if err := json.Unmarshal([]byte(v), &strct.InstanceArn); err != nil {
                return err
             }
            InstanceArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if InstanceArn (a required property) was received
    if !InstanceArnReceived {
        return errors.New("\"InstanceArn\" is required but was not present")
    }
    return nil
}
