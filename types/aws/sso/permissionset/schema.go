// Code generated by schema-generate. DO NOT EDIT.

package permissionset

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// CustomerManagedPolicyReference 
type CustomerManagedPolicyReference struct {
  Name string `json:"Name"`
  Path string `json:"Path,omitempty"`
}

// InlinePolicy_object The inline policy to put in permission set.
type InlinePolicy_object struct {
}

// PermissionsBoundary 
type PermissionsBoundary struct {
  CustomerManagedPolicyReference *CustomerManagedPolicyReference `json:"CustomerManagedPolicyReference,omitempty"`
  ManagedPolicyArn string `json:"ManagedPolicyArn,omitempty"`
}

// Resource Resource Type definition for SSO PermissionSet
type Resource struct {
  CustomerManagedPolicyReferences []*CustomerManagedPolicyReference `json:"CustomerManagedPolicyReferences,omitempty"`

  // The permission set description.
  Description string `json:"Description,omitempty"`

  // The inline policy to put in permission set.
  InlinePolicy interface{} `json:"InlinePolicy,omitempty"`

  // The sso instance arn that the permission set is owned.
  InstanceArn string `json:"InstanceArn"`
  ManagedPolicies []string `json:"ManagedPolicies,omitempty"`

  // The name you want to assign to this permission set.
  Name string `json:"Name"`

  // The permission set that the policy will be attached to
  PermissionSetArn string `json:"PermissionSetArn,omitempty"`
  PermissionsBoundary *PermissionsBoundary `json:"PermissionsBoundary,omitempty"`

  // The relay state URL that redirect links to any service in the AWS Management Console.
  RelayStateType string `json:"RelayStateType,omitempty"`

  // The length of time that a user can be signed in to an AWS account.
  SessionDuration string `json:"SessionDuration,omitempty"`
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag The metadata that you apply to the permission set to help you categorize and organize them.
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *CustomerManagedPolicyReference) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Path" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Path\": ")
	if tmp, err := json.Marshal(strct.Path); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CustomerManagedPolicyReference) UnmarshalJSON(b []byte) error {
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Path":
            if err := json.Unmarshal([]byte(v), &strct.Path); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}

func (strct *PermissionsBoundary) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CustomerManagedPolicyReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CustomerManagedPolicyReference\": ")
	if tmp, err := json.Marshal(strct.CustomerManagedPolicyReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ManagedPolicyArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ManagedPolicyArn\": ")
	if tmp, err := json.Marshal(strct.ManagedPolicyArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PermissionsBoundary) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CustomerManagedPolicyReference":
            if err := json.Unmarshal([]byte(v), &strct.CustomerManagedPolicyReference); err != nil {
                return err
             }
        case "ManagedPolicyArn":
            if err := json.Unmarshal([]byte(v), &strct.ManagedPolicyArn); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "CustomerManagedPolicyReferences" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CustomerManagedPolicyReferences\": ")
	if tmp, err := json.Marshal(strct.CustomerManagedPolicyReferences); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InlinePolicy" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InlinePolicy\": ")
	if tmp, err := json.Marshal(strct.InlinePolicy); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "InstanceArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "InstanceArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InstanceArn\": ")
	if tmp, err := json.Marshal(strct.InstanceArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ManagedPolicies" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ManagedPolicies\": ")
	if tmp, err := json.Marshal(strct.ManagedPolicies); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PermissionSetArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PermissionSetArn\": ")
	if tmp, err := json.Marshal(strct.PermissionSetArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "PermissionsBoundary" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"PermissionsBoundary\": ")
	if tmp, err := json.Marshal(strct.PermissionsBoundary); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RelayStateType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RelayStateType\": ")
	if tmp, err := json.Marshal(strct.RelayStateType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SessionDuration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SessionDuration\": ")
	if tmp, err := json.Marshal(strct.SessionDuration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    InstanceArnReceived := false
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CustomerManagedPolicyReferences":
            if err := json.Unmarshal([]byte(v), &strct.CustomerManagedPolicyReferences); err != nil {
                return err
             }
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "InlinePolicy":
            if err := json.Unmarshal([]byte(v), &strct.InlinePolicy); err != nil {
                return err
             }
        case "InstanceArn":
            if err := json.Unmarshal([]byte(v), &strct.InstanceArn); err != nil {
                return err
             }
            InstanceArnReceived = true
        case "ManagedPolicies":
            if err := json.Unmarshal([]byte(v), &strct.ManagedPolicies); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "PermissionSetArn":
            if err := json.Unmarshal([]byte(v), &strct.PermissionSetArn); err != nil {
                return err
             }
        case "PermissionsBoundary":
            if err := json.Unmarshal([]byte(v), &strct.PermissionsBoundary); err != nil {
                return err
             }
        case "RelayStateType":
            if err := json.Unmarshal([]byte(v), &strct.RelayStateType); err != nil {
                return err
             }
        case "SessionDuration":
            if err := json.Unmarshal([]byte(v), &strct.SessionDuration); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if InstanceArn (a required property) was received
    if !InstanceArnReceived {
        return errors.New("\"InstanceArn\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
