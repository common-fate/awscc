// Code generated by schema-generate. DO NOT EDIT.

package ruleset

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// ColumnSelector Selector of a column from a dataset for profile job configuration. One selector includes either a column name or a regular expression
type ColumnSelector struct {

  // The name of a column from a dataset
  Name string `json:"Name,omitempty"`

  // A regular expression for selecting a column from a dataset
  Regex string `json:"Regex,omitempty"`
}

// Resource Resource schema for AWS::DataBrew::Ruleset.
type Resource struct {

  // Description of the Ruleset
  Description string `json:"Description,omitempty"`

  // Name of the Ruleset
  Name string `json:"Name"`

  // List of the data quality rules in the ruleset
  Rules []*Rule `json:"Rules"`
  Tags []*Tag `json:"Tags,omitempty"`

  // Arn of the target resource (dataset) to apply the ruleset to
  TargetArn string `json:"TargetArn"`
}

// Rule Data quality rule for a target resource (dataset)
type Rule struct {
  CheckExpression string `json:"CheckExpression"`
  ColumnSelectors []*ColumnSelector `json:"ColumnSelectors,omitempty"`
  Disabled bool `json:"Disabled,omitempty"`

  // Name of the rule
  Name string `json:"Name"`
  SubstitutionMap []*SubstitutionValue `json:"SubstitutionMap,omitempty"`
  Threshold *Threshold `json:"Threshold,omitempty"`
}

// SubstitutionValue A key-value pair to associate expression's substitution variable names with their values
type SubstitutionValue struct {

  // Value or column name
  Value string `json:"Value"`

  // Variable name
  ValueReference string `json:"ValueReference"`
}

// Tag A key-value pair to associate with a resource
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

// Threshold 
type Threshold struct {
  Type string `json:"Type,omitempty"`
  Unit string `json:"Unit,omitempty"`
  Value float64 `json:"Value"`
}

func (strct *ColumnSelector) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Regex" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Regex\": ")
	if tmp, err := json.Marshal(strct.Regex); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ColumnSelector) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "Regex":
            if err := json.Unmarshal([]byte(v), &strct.Regex); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Rules" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Rules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Rules\": ")
	if tmp, err := json.Marshal(strct.Rules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "TargetArn" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "TargetArn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"TargetArn\": ")
	if tmp, err := json.Marshal(strct.TargetArn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    NameReceived := false
    RulesReceived := false
    TargetArnReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Rules":
            if err := json.Unmarshal([]byte(v), &strct.Rules); err != nil {
                return err
             }
            RulesReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "TargetArn":
            if err := json.Unmarshal([]byte(v), &strct.TargetArn); err != nil {
                return err
             }
            TargetArnReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if Rules (a required property) was received
    if !RulesReceived {
        return errors.New("\"Rules\" is required but was not present")
    }
    // check if TargetArn (a required property) was received
    if !TargetArnReceived {
        return errors.New("\"TargetArn\" is required but was not present")
    }
    return nil
}

func (strct *Rule) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "CheckExpression" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "CheckExpression" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CheckExpression\": ")
	if tmp, err := json.Marshal(strct.CheckExpression); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ColumnSelectors" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ColumnSelectors\": ")
	if tmp, err := json.Marshal(strct.ColumnSelectors); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Disabled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Disabled\": ")
	if tmp, err := json.Marshal(strct.Disabled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SubstitutionMap" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SubstitutionMap\": ")
	if tmp, err := json.Marshal(strct.SubstitutionMap); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Threshold" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Threshold\": ")
	if tmp, err := json.Marshal(strct.Threshold); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Rule) UnmarshalJSON(b []byte) error {
    CheckExpressionReceived := false
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "CheckExpression":
            if err := json.Unmarshal([]byte(v), &strct.CheckExpression); err != nil {
                return err
             }
            CheckExpressionReceived = true
        case "ColumnSelectors":
            if err := json.Unmarshal([]byte(v), &strct.ColumnSelectors); err != nil {
                return err
             }
        case "Disabled":
            if err := json.Unmarshal([]byte(v), &strct.Disabled); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "SubstitutionMap":
            if err := json.Unmarshal([]byte(v), &strct.SubstitutionMap); err != nil {
                return err
             }
        case "Threshold":
            if err := json.Unmarshal([]byte(v), &strct.Threshold); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if CheckExpression (a required property) was received
    if !CheckExpressionReceived {
        return errors.New("\"CheckExpression\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}

func (strct *SubstitutionValue) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ValueReference" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "ValueReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ValueReference\": ")
	if tmp, err := json.Marshal(strct.ValueReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SubstitutionValue) UnmarshalJSON(b []byte) error {
    ValueReceived := false
    ValueReferenceReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        case "ValueReference":
            if err := json.Unmarshal([]byte(v), &strct.ValueReference); err != nil {
                return err
             }
            ValueReferenceReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    // check if ValueReference (a required property) was received
    if !ValueReferenceReceived {
        return errors.New("\"ValueReference\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}

func (strct *Threshold) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Unit" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Unit\": ")
	if tmp, err := json.Marshal(strct.Unit); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Threshold) UnmarshalJSON(b []byte) error {
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        case "Unit":
            if err := json.Unmarshal([]byte(v), &strct.Unit); err != nil {
                return err
             }
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
