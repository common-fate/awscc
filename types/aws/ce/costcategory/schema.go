// Code generated by schema-generate. DO NOT EDIT.

package costcategory

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Resource Cost Category enables you to map your cost and usage into meaningful categories. You can use Cost Category to organize your costs using a rule-based engine.
type Resource struct {

  // Cost category ARN
  Arn string `json:"Arn,omitempty"`

  // The default value for the cost category
  DefaultValue string `json:"DefaultValue,omitempty"`
  EffectiveStart string `json:"EffectiveStart,omitempty"`
  Name string `json:"Name"`
  RuleVersion string `json:"RuleVersion"`

  // JSON array format of Expression in Billing and Cost Management API
  Rules string `json:"Rules"`

  // Json array format of CostCategorySplitChargeRule in Billing and Cost Management API
  SplitChargeRules string `json:"SplitChargeRules,omitempty"`
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DefaultValue" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DefaultValue\": ")
	if tmp, err := json.Marshal(strct.DefaultValue); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "EffectiveStart" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EffectiveStart\": ")
	if tmp, err := json.Marshal(strct.EffectiveStart); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "RuleVersion" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "RuleVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RuleVersion\": ")
	if tmp, err := json.Marshal(strct.RuleVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Rules" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Rules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Rules\": ")
	if tmp, err := json.Marshal(strct.Rules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "SplitChargeRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SplitChargeRules\": ")
	if tmp, err := json.Marshal(strct.SplitChargeRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    NameReceived := false
    RuleVersionReceived := false
    RulesReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "DefaultValue":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValue); err != nil {
                return err
             }
        case "EffectiveStart":
            if err := json.Unmarshal([]byte(v), &strct.EffectiveStart); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "RuleVersion":
            if err := json.Unmarshal([]byte(v), &strct.RuleVersion); err != nil {
                return err
             }
            RuleVersionReceived = true
        case "Rules":
            if err := json.Unmarshal([]byte(v), &strct.Rules); err != nil {
                return err
             }
            RulesReceived = true
        case "SplitChargeRules":
            if err := json.Unmarshal([]byte(v), &strct.SplitChargeRules); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if RuleVersion (a required property) was received
    if !RuleVersionReceived {
        return errors.New("\"RuleVersion\" is required but was not present")
    }
    // check if Rules (a required property) was received
    if !RulesReceived {
        return errors.New("\"Rules\" is required but was not present")
    }
    return nil
}
