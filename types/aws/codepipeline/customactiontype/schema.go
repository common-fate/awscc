// Code generated by schema-generate. DO NOT EDIT.

package customactiontype

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// ArtifactDetails Returns information about the details of an artifact.
type ArtifactDetails struct {

  // The maximum number of artifacts allowed for the action type.
  MaximumCount int `json:"MaximumCount"`

  // The minimum number of artifacts allowed for the action type.
  MinimumCount int `json:"MinimumCount"`
}

// ConfigurationProperties The configuration properties for the custom action.
type ConfigurationProperties struct {

  // The description of the action configuration property that is displayed to users. 
  Description string `json:"Description,omitempty"`

  // Whether the configuration property is a key.
  Key bool `json:"Key"`

  // The name of the action configuration property.
  Name string `json:"Name"`

  // Indicates that the property is used with PollForJobs. When creating a custom action, an action can have up to one queryable property. If it has one, that property must be both required and not secret.If you create a pipeline with a custom action type, and that custom action contains a queryable property, the value for that configuration property is subject to other restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens. 
  Queryable bool `json:"Queryable,omitempty"`

  // Whether the configuration property is a required value.
  Required bool `json:"Required"`

  // Whether the configuration property is secret. Secrets are hidden from all calls except for GetJobDetails, GetThirdPartyJobDetails, PollForJobs, and PollForThirdPartyJobs.
  Secret bool `json:"Secret"`

  // The type of the configuration property.
  Type string `json:"Type,omitempty"`
}

// Resource The AWS::CodePipeline::CustomActionType resource creates a custom action for activities that aren't included in the CodePipeline default actions, such as running an internally developed build process or a test suite. You can use these custom actions in the stage of a pipeline.
type Resource struct {

  // The category of the custom action, such as a build action or a test action.
  Category string `json:"Category"`

  // The configuration properties for the custom action.
  ConfigurationProperties []*ConfigurationProperties `json:"ConfigurationProperties,omitempty"`
  Id string `json:"Id,omitempty"`

  // The details of the input artifact for the action, such as its commit ID.
  InputArtifactDetails *ArtifactDetails `json:"InputArtifactDetails"`

  // The details of the output artifact of the action, such as its commit ID.
  OutputArtifactDetails *ArtifactDetails `json:"OutputArtifactDetails"`

  // The provider of the service used in the custom action, such as AWS CodeDeploy.
  Provider string `json:"Provider"`

  // URLs that provide users information about this custom action.
  Settings *Settings `json:"Settings,omitempty"`

  // Any tags assigned to the custom action.
  Tags []*Tag `json:"Tags,omitempty"`

  // The version identifier of the custom action.
  Version string `json:"Version"`
}

// Settings Settings is a property of the AWS::CodePipeline::CustomActionType resource that provides URLs that users can access to view information about the CodePipeline custom action. 
type Settings struct {

  // The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system, such as the configuration page for an AWS CodeDeploy deployment group. This link is provided as part of the action display in the pipeline. 
  EntityUrlTemplate string `json:"EntityUrlTemplate,omitempty"`

  // The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system, such as the console page for AWS CodeDeploy. This link is shown on the pipeline view page in the AWS CodePipeline console and provides a link to the execution entity of the external action. 
  ExecutionUrlTemplate string `json:"ExecutionUrlTemplate,omitempty"`

  // The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action. 
  RevisionUrlTemplate string `json:"RevisionUrlTemplate,omitempty"`

  // The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
  ThirdPartyConfigurationUrl string `json:"ThirdPartyConfigurationUrl,omitempty"`
}

// Tag 
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *ArtifactDetails) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "MaximumCount" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MaximumCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaximumCount\": ")
	if tmp, err := json.Marshal(strct.MaximumCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MinimumCount" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "MinimumCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MinimumCount\": ")
	if tmp, err := json.Marshal(strct.MinimumCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ArtifactDetails) UnmarshalJSON(b []byte) error {
    MaximumCountReceived := false
    MinimumCountReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "MaximumCount":
            if err := json.Unmarshal([]byte(v), &strct.MaximumCount); err != nil {
                return err
             }
            MaximumCountReceived = true
        case "MinimumCount":
            if err := json.Unmarshal([]byte(v), &strct.MinimumCount); err != nil {
                return err
             }
            MinimumCountReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if MaximumCount (a required property) was received
    if !MaximumCountReceived {
        return errors.New("\"MaximumCount\" is required but was not present")
    }
    // check if MinimumCount (a required property) was received
    if !MinimumCountReceived {
        return errors.New("\"MinimumCount\" is required but was not present")
    }
    return nil
}

func (strct *ConfigurationProperties) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Queryable" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Queryable\": ")
	if tmp, err := json.Marshal(strct.Queryable); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Required" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Required" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Required\": ")
	if tmp, err := json.Marshal(strct.Required); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Secret" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Secret" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Secret\": ")
	if tmp, err := json.Marshal(strct.Secret); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ConfigurationProperties) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    NameReceived := false
    RequiredReceived := false
    SecretReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Queryable":
            if err := json.Unmarshal([]byte(v), &strct.Queryable); err != nil {
                return err
             }
        case "Required":
            if err := json.Unmarshal([]byte(v), &strct.Required); err != nil {
                return err
             }
            RequiredReceived = true
        case "Secret":
            if err := json.Unmarshal([]byte(v), &strct.Secret); err != nil {
                return err
             }
            SecretReceived = true
        case "Type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    // check if Required (a required property) was received
    if !RequiredReceived {
        return errors.New("\"Required\" is required but was not present")
    }
    // check if Secret (a required property) was received
    if !SecretReceived {
        return errors.New("\"Secret\" is required but was not present")
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Category" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Category" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Category\": ")
	if tmp, err := json.Marshal(strct.Category); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ConfigurationProperties" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ConfigurationProperties\": ")
	if tmp, err := json.Marshal(strct.ConfigurationProperties); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "InputArtifactDetails" field is required
    if strct.InputArtifactDetails == nil {
        return nil, errors.New("InputArtifactDetails is a required field")
    }
    // Marshal the "InputArtifactDetails" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InputArtifactDetails\": ")
	if tmp, err := json.Marshal(strct.InputArtifactDetails); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "OutputArtifactDetails" field is required
    if strct.OutputArtifactDetails == nil {
        return nil, errors.New("OutputArtifactDetails is a required field")
    }
    // Marshal the "OutputArtifactDetails" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"OutputArtifactDetails\": ")
	if tmp, err := json.Marshal(strct.OutputArtifactDetails); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Provider" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Provider" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Provider\": ")
	if tmp, err := json.Marshal(strct.Provider); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Settings" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Settings\": ")
	if tmp, err := json.Marshal(strct.Settings); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Version" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Version" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Version\": ")
	if tmp, err := json.Marshal(strct.Version); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    CategoryReceived := false
    InputArtifactDetailsReceived := false
    OutputArtifactDetailsReceived := false
    ProviderReceived := false
    VersionReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Category":
            if err := json.Unmarshal([]byte(v), &strct.Category); err != nil {
                return err
             }
            CategoryReceived = true
        case "ConfigurationProperties":
            if err := json.Unmarshal([]byte(v), &strct.ConfigurationProperties); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "InputArtifactDetails":
            if err := json.Unmarshal([]byte(v), &strct.InputArtifactDetails); err != nil {
                return err
             }
            InputArtifactDetailsReceived = true
        case "OutputArtifactDetails":
            if err := json.Unmarshal([]byte(v), &strct.OutputArtifactDetails); err != nil {
                return err
             }
            OutputArtifactDetailsReceived = true
        case "Provider":
            if err := json.Unmarshal([]byte(v), &strct.Provider); err != nil {
                return err
             }
            ProviderReceived = true
        case "Settings":
            if err := json.Unmarshal([]byte(v), &strct.Settings); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        case "Version":
            if err := json.Unmarshal([]byte(v), &strct.Version); err != nil {
                return err
             }
            VersionReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Category (a required property) was received
    if !CategoryReceived {
        return errors.New("\"Category\" is required but was not present")
    }
    // check if InputArtifactDetails (a required property) was received
    if !InputArtifactDetailsReceived {
        return errors.New("\"InputArtifactDetails\" is required but was not present")
    }
    // check if OutputArtifactDetails (a required property) was received
    if !OutputArtifactDetailsReceived {
        return errors.New("\"OutputArtifactDetails\" is required but was not present")
    }
    // check if Provider (a required property) was received
    if !ProviderReceived {
        return errors.New("\"Provider\" is required but was not present")
    }
    // check if Version (a required property) was received
    if !VersionReceived {
        return errors.New("\"Version\" is required but was not present")
    }
    return nil
}

func (strct *Settings) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "EntityUrlTemplate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"EntityUrlTemplate\": ")
	if tmp, err := json.Marshal(strct.EntityUrlTemplate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ExecutionUrlTemplate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ExecutionUrlTemplate\": ")
	if tmp, err := json.Marshal(strct.ExecutionUrlTemplate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RevisionUrlTemplate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RevisionUrlTemplate\": ")
	if tmp, err := json.Marshal(strct.RevisionUrlTemplate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ThirdPartyConfigurationUrl" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ThirdPartyConfigurationUrl\": ")
	if tmp, err := json.Marshal(strct.ThirdPartyConfigurationUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Settings) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "EntityUrlTemplate":
            if err := json.Unmarshal([]byte(v), &strct.EntityUrlTemplate); err != nil {
                return err
             }
        case "ExecutionUrlTemplate":
            if err := json.Unmarshal([]byte(v), &strct.ExecutionUrlTemplate); err != nil {
                return err
             }
        case "RevisionUrlTemplate":
            if err := json.Unmarshal([]byte(v), &strct.RevisionUrlTemplate); err != nil {
                return err
             }
        case "ThirdPartyConfigurationUrl":
            if err := json.Unmarshal([]byte(v), &strct.ThirdPartyConfigurationUrl); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
