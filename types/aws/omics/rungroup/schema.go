// Code generated by schema-generate. DO NOT EDIT.

package rungroup

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// Resource Definition of AWS::Omics::RunGroup Resource Type
type Resource struct {
  Arn string `json:"Arn,omitempty"`
  CreationTime string `json:"CreationTime,omitempty"`
  Id string `json:"Id,omitempty"`
  MaxCpus float64 `json:"MaxCpus,omitempty"`
  MaxDuration float64 `json:"MaxDuration,omitempty"`
  MaxRuns float64 `json:"MaxRuns,omitempty"`
  Name string `json:"Name,omitempty"`
  Tags *TagMap `json:"Tags,omitempty"`
}

// TagMap A map of resource tags
type TagMap struct {
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "CreationTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"CreationTime\": ")
	if tmp, err := json.Marshal(strct.CreationTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaxCpus" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxCpus\": ")
	if tmp, err := json.Marshal(strct.MaxCpus); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaxDuration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxDuration\": ")
	if tmp, err := json.Marshal(strct.MaxDuration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "MaxRuns" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"MaxRuns\": ")
	if tmp, err := json.Marshal(strct.MaxRuns); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "CreationTime":
            if err := json.Unmarshal([]byte(v), &strct.CreationTime); err != nil {
                return err
             }
        case "Id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "MaxCpus":
            if err := json.Unmarshal([]byte(v), &strct.MaxCpus); err != nil {
                return err
             }
        case "MaxDuration":
            if err := json.Unmarshal([]byte(v), &strct.MaxDuration); err != nil {
                return err
             }
        case "MaxRuns":
            if err := json.Unmarshal([]byte(v), &strct.MaxRuns); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *TagMap) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TagMap) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
