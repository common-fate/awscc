// Code generated by schema-generate. DO NOT EDIT.

package replicationset

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// RegionConfiguration The ReplicationSet regional configuration.
type RegionConfiguration struct {
  SseKmsKeyId string `json:"SseKmsKeyId"`
}

// ReplicationRegion The ReplicationSet regional configuration.
type ReplicationRegion struct {
  RegionConfiguration *RegionConfiguration `json:"RegionConfiguration,omitempty"`
  RegionName string `json:"RegionName,omitempty"`
}

// Resource Resource type definition for AWS::SSMIncidents::ReplicationSet
type Resource struct {

  // The ARN of the ReplicationSet.
  Arn string `json:"Arn,omitempty"`
  DeletionProtected bool `json:"DeletionProtected,omitempty"`

  // The ReplicationSet configuration.
  Regions []*ReplicationRegion `json:"Regions"`

  // The tags to apply to the replication set.
  Tags []*Tag `json:"Tags,omitempty"`
}

// Tag A key-value pair to tag a resource.
type Tag struct {
  Key string `json:"Key"`
  Value string `json:"Value"`
}

func (strct *RegionConfiguration) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "SseKmsKeyId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "SseKmsKeyId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"SseKmsKeyId\": ")
	if tmp, err := json.Marshal(strct.SseKmsKeyId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *RegionConfiguration) UnmarshalJSON(b []byte) error {
    SseKmsKeyIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "SseKmsKeyId":
            if err := json.Unmarshal([]byte(v), &strct.SseKmsKeyId); err != nil {
                return err
             }
            SseKmsKeyIdReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if SseKmsKeyId (a required property) was received
    if !SseKmsKeyIdReceived {
        return errors.New("\"SseKmsKeyId\" is required but was not present")
    }
    return nil
}

func (strct *ReplicationRegion) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "RegionConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RegionConfiguration\": ")
	if tmp, err := json.Marshal(strct.RegionConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "RegionName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"RegionName\": ")
	if tmp, err := json.Marshal(strct.RegionName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ReplicationRegion) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "RegionConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.RegionConfiguration); err != nil {
                return err
             }
        case "RegionName":
            if err := json.Unmarshal([]byte(v), &strct.RegionName); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *Resource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "Arn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Arn\": ")
	if tmp, err := json.Marshal(strct.Arn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "DeletionProtected" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"DeletionProtected\": ")
	if tmp, err := json.Marshal(strct.DeletionProtected); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Regions" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Regions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Regions\": ")
	if tmp, err := json.Marshal(strct.Regions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Resource) UnmarshalJSON(b []byte) error {
    RegionsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Arn":
            if err := json.Unmarshal([]byte(v), &strct.Arn); err != nil {
                return err
             }
        case "DeletionProtected":
            if err := json.Unmarshal([]byte(v), &strct.DeletionProtected); err != nil {
                return err
             }
        case "Regions":
            if err := json.Unmarshal([]byte(v), &strct.Regions); err != nil {
                return err
             }
            RegionsReceived = true
        case "Tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Regions (a required property) was received
    if !RegionsReceived {
        return errors.New("\"Regions\" is required but was not present")
    }
    return nil
}

func (strct *Tag) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tag) UnmarshalJSON(b []byte) error {
    KeyReceived := false
    ValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            KeyReceived = true
        case "Value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            ValueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if Key (a required property) was received
    if !KeyReceived {
        return errors.New("\"Key\" is required but was not present")
    }
    // check if Value (a required property) was received
    if !ValueReceived {
        return errors.New("\"Value\" is required but was not present")
    }
    return nil
}
